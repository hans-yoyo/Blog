{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cafe/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/images/fly-to-top.png","path":"images/fly-to-top.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/is.js","path":"js/is.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/elevator.js","path":"js/elevator.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/posts.js","path":"js/posts.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/duoshuo/embed.js","path":"duoshuo/embed.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/jquery/jquery.min.js","path":"jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","path":"themes/screenshots/Cafe.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cafe/.bowerrc","hash":"09b4947b6c6f8e300f4927b96a487f16f02d702a","modified":1572083947088},{"_id":"themes/cafe/.gitignore","hash":"63963cef8fc919257215ff980c3c34b7b0951754","modified":1572083947088},{"_id":"themes/cafe/README.md","hash":"7a338b1c256c07955989882333d82dc5349680de","modified":1572083947089},{"_id":"themes/cafe/README_en.md","hash":"a346042e7d7d4205bae48e86c894969d08485be6","modified":1572083947089},{"_id":"themes/cafe/cafe-qrcode.png","hash":"4fef2c889376a208a49aa92c582b147e7e005d23","modified":1572083947127},{"_id":"themes/cafe/_config.yml","hash":"6cef6f754fc1f1dcc3b9b19e23c049dce73e8317","modified":1572269298961},{"_id":"themes/cafe/bower.json","hash":"06dc924ce808e3363bb31eddc023433ea588a30d","modified":1572083947127},{"_id":"themes/cafe/package.json","hash":"81290c217cc42ded73ddf637c865b664a4aed53c","modified":1572083947164},{"_id":"themes/cafe/webpack.config.js","hash":"ad9a245e554affab9d5fc46c753c1978bdd4e640","modified":1572083947223},{"_id":"source/about/index.md","hash":"19a5853e93d500d0513843a52f3e62d791de4a16","modified":1556978993430},{"_id":"source/categories/index.md","hash":"0fc6ac175c7445d013251ecb2d2d95a0f960b3c9","modified":1556952119090},{"_id":"source/_posts/20190504-Hexo使用方法记录.md","hash":"f4c351ee17dab868b6c7c5139f46dffbd914856f","modified":1572181198279},{"_id":"source/_posts/20190507-Git学习笔记.md","hash":"e9d61014fef2e5b3a5b9bcc701b529b821b7bd77","modified":1572181236897},{"_id":"source/_posts/20190507-使用PicGo和GitHub搭建个人图床.md","hash":"b325285292be5c31b7da4d02d7a2bb9af3fd60c8","modified":1572181263911},{"_id":"source/_posts/20191204-mockjs新手入门.md","hash":"d7a3c1d5d5ca0478bc0f25ac32ae7226e3126ff1","modified":1575472947597},{"_id":"source/_posts/20190511-CentOS7下搭建FTP.md","hash":"164c3137b178bd62e3aa36155e8a5b0d7302ec1a","modified":1572181309331},{"_id":"source/_posts/20190520-使用不同json包对象转Json过程中的大小写问题.md","hash":"d0dceff96282901f40f4b55ade26d40555a96175","modified":1572181364639},{"_id":"source/_posts/20191124-Django入门.md","hash":"6f89066af0815c7dd7e188d052d5172dc996b36f","modified":1574648892282},{"_id":"source/tags/index.md","hash":"d201b448929c9a7330b213e2e7a719718981994e","modified":1556952153497},{"_id":"source/_posts/20191027-初识网关Zuul.md","hash":"4b9bb9ec19c27f0c1a3edc0ef3e3d67be5d62226","modified":1572182564308},{"_id":"source/_posts/20190611-记一次事务不起作用的排错历程.md","hash":"5f386810fc9469b04a17a6de1abb3bd2358d86b5","modified":1572181356106},{"_id":"source/_posts/20191027-初识ELK日志分析系统.md","hash":"f81bf8f1e82f23c57528e952b6a41e96214cb2a4","modified":1572184189209},{"_id":"themes/cafe/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1572083947061},{"_id":"themes/cafe/.git/config","hash":"014c619e4e6b6f112d7155175bc2fc354362c42e","modified":1572083947070},{"_id":"themes/cafe/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1572083927716},{"_id":"themes/cafe/.git/index","hash":"39bf6d453964989b507c294c460a10a56f5df7d2","modified":1572083947225},{"_id":"themes/cafe/.git/packed-refs","hash":"0708400921340a87eedd4f8551bf9b511d75896f","modified":1572083947049},{"_id":"themes/cafe/assets/duoshuo_comment.png","hash":"33402149f82b66ff4ed405f44beb06eb0172b6de","modified":1572083947092},{"_id":"themes/cafe/languages/default.yml","hash":"fa29b6eaff7c2adb38586748e35487294323ed7d","modified":1572083947128},{"_id":"themes/cafe/languages/en.yml","hash":"1fe9eaf256639fea43c30790129276a5d557db36","modified":1572083947128},{"_id":"themes/cafe/languages/no.yml","hash":"b3d1684075aa7178f59cb1ac6e9cb5f7664b797b","modified":1572083947129},{"_id":"themes/cafe/languages/nl.yml","hash":"eac2a6928ea9bf65c44a5cb7c620b1103f066558","modified":1572083947129},{"_id":"themes/cafe/languages/zh-CN.yml","hash":"00bd1677cd9ad8b3581ec54260ac7096c32049a3","modified":1572083947130},{"_id":"themes/cafe/languages/ru.yml","hash":"1db37462baa63725618bf45a1357b960df89c20d","modified":1572083947130},{"_id":"themes/cafe/assets/share.png","hash":"823926d9cb8985ceb93a119ef138f9638a8ead1a","modified":1572083947126},{"_id":"themes/cafe/scripts/extend.generator.js","hash":"adf14a21221a8b9667f6ea1d1f6ad6fb28eb5d74","modified":1572083947165},{"_id":"themes/cafe/scripts/fancybox.js","hash":"dd6c9e7cf9019a001eef26d58357e768584107cd","modified":1572083947165},{"_id":"themes/cafe/languages/zh-TW.yml","hash":"de2bb429c3c75ce89321b233a04e0237466dbf49","modified":1572083947131},{"_id":"themes/cafe/layout/archive.ejs","hash":"11912b8e50dafbe9b0a65df0beaeab64fde90abe","modified":1572083947157},{"_id":"themes/cafe/layout/category.ejs","hash":"f46e99e5b68c2ee67bdab068b1da4029bc09847d","modified":1572083947158},{"_id":"themes/cafe/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1572083947158},{"_id":"themes/cafe/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572083947159},{"_id":"themes/cafe/layout/layout.ejs","hash":"38f0162183c1714924063ecab4ba3d64d98090a9","modified":1572083947159},{"_id":"themes/cafe/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1572083947163},{"_id":"themes/cafe/layout/tag.ejs","hash":"4349f382b07603f9d2c03dd4df70ddea9b9a035c","modified":1572083947163},{"_id":"themes/cafe/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1572083947217},{"_id":"themes/cafe/layout/_scripts/index.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572083947145},{"_id":"themes/cafe/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1572083927730},{"_id":"themes/cafe/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1572083927717},{"_id":"themes/cafe/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1572083927720},{"_id":"themes/cafe/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1572083927721},{"_id":"themes/cafe/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1572083927719},{"_id":"themes/cafe/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1572083927722},{"_id":"themes/cafe/.git/logs/HEAD","hash":"a6c60ca327559d8f6e15416a2c0e74a5ea45cb58","modified":1572083947067},{"_id":"themes/cafe/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1572083927724},{"_id":"themes/cafe/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1572083927725},{"_id":"themes/cafe/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1572083927727},{"_id":"themes/cafe/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1572083927728},{"_id":"themes/cafe/layout/_partial/after-footer.ejs","hash":"7cb13c479a5eff78d96a90ab2ca7dc4d31907ca8","modified":1572083947133},{"_id":"themes/cafe/layout/_partial/archive-post.ejs","hash":"d4c33584464f238acc5c3bdb4698d7399f9638a8","modified":1572083947133},{"_id":"themes/cafe/layout/_partial/footer.ejs","hash":"a1627a239dc8c4c8864ad611d0b7d53dede33e1d","modified":1572083947136},{"_id":"themes/cafe/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1572083947136},{"_id":"themes/cafe/layout/_partial/head.ejs","hash":"20b6b18d1e0d6ec14ba558208fe7f36ec2dff0e9","modified":1572083947137},{"_id":"themes/cafe/layout/_partial/archive.ejs","hash":"fbf0ab448b94fa2064ef809601d51eaa4f497236","modified":1572083947134},{"_id":"themes/cafe/layout/_partial/article.ejs","hash":"0dca4c13e9702bef3a40abb4948fccc6812958d8","modified":1572083947135},{"_id":"themes/cafe/layout/_partial/comments.ejs","hash":"84b80c47ce52bdf103dda0f2559df4a6223b5183","modified":1572083947135},{"_id":"themes/cafe/layout/_partial/header.ejs","hash":"28d3e43eb3fd6dcdc0d273aaa063bd200be58e4c","modified":1572083947138},{"_id":"themes/cafe/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1572083947138},{"_id":"themes/cafe/layout/_widget/archive.ejs","hash":"16b4f2c9e92c61c9b0ba4355f331ef43a1da69f0","modified":1572083947152},{"_id":"themes/cafe/layout/_partial/sidebar.ejs","hash":"7dad154b4d825845c739d0105b7e3773d0cf8822","modified":1572083947144},{"_id":"themes/cafe/layout/_widget/category.ejs","hash":"d2a14d884080efddf2c4f3b0829d33b4fba46595","modified":1572083947153},{"_id":"themes/cafe/layout/_partial/random_posts.ejs","hash":"40e651a0b85eaafc6351bee2c776c9dc53562a77","modified":1572083947144},{"_id":"themes/cafe/layout/_partial/widget.ejs","hash":"da7939823193ada87f2f873c7ed3213430000645","modified":1572083947145},{"_id":"themes/cafe/layout/_widget/hot_comment_posts.ejs","hash":"85e643a3b3df886f84488c6fac1a81bb8abf9091","modified":1572083947153},{"_id":"themes/cafe/layout/_widget/friendly_link.ejs","hash":"bf3f3542894fc952819821233a071735c74012af","modified":1572083947153},{"_id":"themes/cafe/layout/_widget/lastest_comments.ejs","hash":"170a773c94b99f653d3cb1fb968fb9715b78a88d","modified":1572083947154},{"_id":"themes/cafe/layout/_widget/post_content.ejs","hash":"94bfe5713747e2f91d036549460220aa7d3b6a5b","modified":1572083947154},{"_id":"themes/cafe/layout/_widget/recent_posts.ejs","hash":"35ad60dbcdf5ba099a6cd7d61b4addb64023ceeb","modified":1572083947155},{"_id":"themes/cafe/layout/_widget/tag.ejs","hash":"51c3bcba8815677fc09919857205e48038fb0fef","modified":1572083947156},{"_id":"themes/cafe/layout/_widget/wechat.ejs","hash":"200f8e54879b7116e45f82c9a8118ef7df2417e6","modified":1572083947157},{"_id":"themes/cafe/layout/_widget/social.ejs","hash":"23e3d73d52a1a9759b8c7800641e96022e2cb84f","modified":1572083947155},{"_id":"themes/cafe/layout/_widget/tagcloud.ejs","hash":"28b18597ff7132c0c2b22b89a1e1fd4f3c31292c","modified":1572083947156},{"_id":"themes/cafe/layout/_third-part/index.ejs","hash":"a44b02c9fdeb63e130dc789a3fd7c9d4a413b370","modified":1572083947151},{"_id":"themes/cafe/layout/partials/back2top.ejs","hash":"7962c3bd00150d577c0a16c695557aa3690e394e","modified":1572083947160},{"_id":"themes/cafe/layout/partials/hot-comment-posts.ejs","hash":"2829226af9640dbb98e49e4349460baf7ec1f77b","modified":1572083947161},{"_id":"themes/cafe/layout/partials/pagination.ejs","hash":"7c4780ee5b9dad0a46c5caf422965bdcb1dc3664","modified":1572083947162},{"_id":"themes/cafe/layout/partials/lastest-comments.ejs","hash":"a49dc7faa2316783b836a8b227ff677bf43f5c7d","modified":1572083947161},{"_id":"themes/cafe/layout/partials/recent-posts.ejs","hash":"72f76ca49eb9640054a32725ef462e8085e1ca43","modified":1572083947162},{"_id":"themes/cafe/source/css/_extend.styl","hash":"cf7f7bf06ade097d841019e901c64ea5fcbf622f","modified":1572083947168},{"_id":"themes/cafe/source/css/_variables.styl","hash":"1f4d6146611009bd78e981b5be6fdf84197a35f8","modified":1572083947180},{"_id":"themes/cafe/source/_data/themes.yml","hash":"51a446e543e5ab821905351baa1edbfdc59826ab","modified":1572083947167},{"_id":"themes/cafe/source/css/style.styl","hash":"2ef9f14cb66a8be749ca1d95242396994b64e889","modified":1572083947204},{"_id":"themes/cafe/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572083947207},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572083947208},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572083947208},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572083947209},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572083947209},{"_id":"themes/cafe/source/images/fly-to-top.png","hash":"f189038da3c68a8012e924185a1faee98bde3003","modified":1572083947217},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572083947210},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1572083947214},{"_id":"themes/cafe/source/js/is.js","hash":"7e5820c0d5c688eb257ca436f583cb1762f986d4","modified":1572083947221},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1572083947216},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1572083947215},{"_id":"themes/cafe/source/js/elevator.js","hash":"e97932b797d4315fe5586d7538db513f18169956","modified":1572083947220},{"_id":"themes/cafe/source/js/posts.js","hash":"7696ec026e5d99fa0c999c0fd59bcb5fa15b1be0","modified":1574778448627},{"_id":"themes/cafe/source/js/script.js","hash":"4f8175622792da79b3b1fded60f5e15aa0bb067b","modified":1572083947221},{"_id":"themes/cafe/source/duoshuo/embed.js","hash":"f63d86822d86d2154b065d12303c4a889c40664d","modified":1572083947206},{"_id":"themes/cafe/source/jquery/jquery.min.js","hash":"745ab5d6e434cf8d321779da3c527b6d301e2b50","modified":1572083947219},{"_id":"themes/cafe/.git/refs/heads/master","hash":"ee5fcaedadc36a3fc117d11645d9f896d0295bd1","modified":1572083947064},{"_id":"themes/cafe/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1572083947139},{"_id":"themes/cafe/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1572083947140},{"_id":"themes/cafe/layout/_partial/post/duoshuo.ejs","hash":"467563b555d584b7b9de85a543445ff35c3157f9","modified":1572083947141},{"_id":"themes/cafe/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1572083947141},{"_id":"themes/cafe/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1572083947142},{"_id":"themes/cafe/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1572083947143},{"_id":"themes/cafe/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1572083947142},{"_id":"themes/cafe/layout/_third-part/comments/disqus.ejs","hash":"3bd41bc585b46d7e14f4abfe1fd130950e88e1e4","modified":1572083947148},{"_id":"themes/cafe/layout/_third-part/comments/duoshuo.ejs","hash":"50a681fe3a30e6c42b91fd9beea8ea23f8328cee","modified":1572083947148},{"_id":"themes/cafe/layout/_third-part/comments/changyan.ejs","hash":"1c94583c27c972e9e5161a453d96c5bb377bf21e","modified":1572083947147},{"_id":"themes/cafe/layout/_third-part/comments/gentie.ejs","hash":"eeaee1a1c958c6c4b1fb066b9e1b7cada9a9471d","modified":1572083947149},{"_id":"themes/cafe/layout/_third-part/comments/gitment.ejs","hash":"25c71114ff0ede012d2dcb72cfb4e821f1744634","modified":1572083947149},{"_id":"themes/cafe/layout/_third-part/comments/index.ejs","hash":"9a358fa1d7c965a054e2fb4fc0ed32d0472518bc","modified":1572083947150},{"_id":"themes/cafe/layout/_third-part/comments/youyan.ejs","hash":"40a49f44f934711d2f37e23827d60822305e1f2d","modified":1572083947150},{"_id":"themes/cafe/layout/_third-part/mathjax/index.ejs","hash":"c4c3995ef543c1295dc9a619582b98b2857d0ca1","modified":1572083947152},{"_id":"themes/cafe/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1572083947179},{"_id":"themes/cafe/source/css/_partial/comment.styl","hash":"d43ee49803bfe4d718fcf69921169b68f2cd994f","modified":1572083947170},{"_id":"themes/cafe/source/css/_partial/custom.styl","hash":"f162ddfa65c268d79425e8c143688481f559ad2c","modified":1572083947171},{"_id":"themes/cafe/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1572083947180},{"_id":"themes/cafe/source/css/_partial/archive.styl","hash":"77197dd5240eb0a4d77daf7bd977858ae83eda68","modified":1572083947169},{"_id":"themes/cafe/source/css/_partial/article.styl","hash":"37ce987f08ba6bc6af42d838536bc90f07ad48fa","modified":1572083947170},{"_id":"themes/cafe/source/css/_partial/footer.styl","hash":"27a0d5b8bd34319fdb4d066859753c9dac0bdf26","modified":1572083947172},{"_id":"themes/cafe/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1572083947174},{"_id":"themes/cafe/source/css/_partial/other.styl","hash":"cc89dc51b9a6fb12a4d38b7c591e022ab767fcc1","modified":1572083947175},{"_id":"themes/cafe/source/css/_partial/highlight.styl","hash":"acaf6574b14afcac8e54b4f868f514e4339be509","modified":1572083947173},{"_id":"themes/cafe/source/css/_partial/duoshuo.styl","hash":"6c9ac4fae2a2d8afedd63f5a8c95b1942cbd59b0","modified":1572083947171},{"_id":"themes/cafe/source/css/_partial/header.styl","hash":"ea3d77cfcc7244a737eea2bf1017e0c6abe69be3","modified":1572083947173},{"_id":"themes/cafe/source/css/_partial/random-post.styl","hash":"4fd4efb828bdcd01d3c3047ca2c5983eeabb9a43","modified":1572083947176},{"_id":"themes/cafe/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1572083947177},{"_id":"themes/cafe/source/css/_partial/sidebar.styl","hash":"6180892f6fc4d152bbf74664bbdaa7c87cdc6ba2","modified":1572083947177},{"_id":"themes/cafe/source/css/_partial/sidebar-aside.styl","hash":"935e66df775d2f855f15587d9e3891f1ed54bc27","modified":1572083947176},{"_id":"themes/cafe/source/css/_partial/social.styl","hash":"814e011e94b0f2e4f7583d58c6ca8a745009f2e4","modified":1572083947178},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572083947211},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1572083947212},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1572083947212},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1572083947214},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1572083947213},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1572083947213},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","hash":"6f639068117b8d44005730864cc0b05a11b28d73","modified":1572083947223},{"_id":"themes/cafe/.git/objects/pack/pack-ad84050cebd9ba6df16bca29d4b1bb200ff6e56e.idx","hash":"83819fbbade756a05b79e6ec1556eed92c9eea26","modified":1572083946952},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572083947198},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572083947199},{"_id":"themes/cafe/.git/logs/refs/heads/master","hash":"a6c60ca327559d8f6e15416a2c0e74a5ea45cb58","modified":1572083947066},{"_id":"themes/cafe/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1572083947058},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572083947184},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572083947188},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572083947197},{"_id":"themes/cafe/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1572083947203},{"_id":"themes/cafe/.git/logs/refs/remotes/origin/HEAD","hash":"a6c60ca327559d8f6e15416a2c0e74a5ea45cb58","modified":1572083947058},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1572083947193},{"_id":"themes/cafe/assets/pc-display.gif","hash":"fb84eb2ba958b1e02ad5e178a6f367a561cd9252","modified":1572083947126},{"_id":"themes/cafe/assets/mobie-display.gif","hash":"d20f7aa46d9bf618ba1ebaf9b6bda71b030f0ce9","modified":1572083947118},{"_id":"themes/cafe/.git/objects/pack/pack-ad84050cebd9ba6df16bca29d4b1bb200ff6e56e.pack","hash":"f0307ba763379d03d8a1f47cda0e5481f3511e48","modified":1572083946945}],"Category":[{"name":"技术","_id":"ck3rfxckd0005d4kp9y85rjiv"},{"name":"归纳总结","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclb000ld4kpmi31ecup"},{"name":"服务端","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclp000sd4kpsam5dbb2"},{"name":"测试","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclt000yd4kps7jtso4d"},{"name":"开发工具","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclx0013d4kpkcwbh9mj"},{"name":"Lesson-Learned","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclx0018d4kpptw5ne3c"},{"name":"Python","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm1001dd4kpib7qwip1"},{"name":"微服务","parent":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm5001jd4kp8xnrgqs8"},{"name":"网关","parent":"ck3rfxcm5001jd4kp8xnrgqs8","_id":"ck3rfxcm6001pd4kplypmlzzd"},{"name":"日志分析","parent":"ck3rfxcm5001jd4kp8xnrgqs8","_id":"ck3rfxcm6001qd4kp1ah39np0"}],"Data":[],"Page":[{"title":"关于我","date":"2019-05-04T14:07:28.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-05-04 22:07:28\n---\n","updated":"2019-05-04T14:09:53.430Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3rfxcio0000d4kpgaah2w4j","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类汇总","date":"2019-05-04T06:19:33.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类汇总\ndate: 2019-05-04 14:19:33\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-05-04T06:41:59.090Z","path":"categories/index.html","layout":"page","_id":"ck3rfxcju0001d4kpbibcfrg5","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"文章标签","date":"2019-05-04T06:40:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2019-05-04 14:40:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-05-04T06:42:33.497Z","path":"tags/index.html","layout":"page","_id":"ck3rfxck60003d4kpbw7gaeqa","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Hexo使用方法记录","date":"2019-05-04T06:15:23.000Z","toc_number":false,"_content":"\n\n\n此文是个人是通过Hexo和GitHub Page构建个人博客网站的步骤及注意事项，做为个人的备忘录，也可为其他小伙伴提供参考\n\n<!-- more -->\n\n\n\n## 创建项目\n\n```bash\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo server\n```\n\n## 设置主题风格\n\n### 设置主题步骤\n\n* 1. 下载主题\n* 2. 将下载好的主题文件夹，粘贴到站点目录的themes下。\n* 3. 更改**站点配置文件**_config.yml 的theme字段，为主题文件夹的名称：\n\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n```\n\n注意在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml\n\n* 站点配置文件，位于站点根目录下，主要包含 Hexo 本身的配置\n\n* 主题配置文件，位于主题目录下，主要用于配置主题相关的选项\n\n### 设置主题语言\n\n* 检查\\themes\\next\\languages文件夹下语言的yml文件，如中文对应的是zh-CN.yml，英文对应的是en.yml\n* 将站点配置文件中language设置为对应的值, 如简体中文设置为language: zh-CN\n\n### 设置主题风格\n\n修改**主题配置文件**中scheme项，目前 NexT 支持三种 Scheme，他们是：\n\n- Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n- Mist - Muse 的紧凑版本，整洁有序的单栏外观\n- Pisces - 双栏 Scheme，小家碧玉似的清新\n\n```yml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n# scheme: Muse\n#scheme: Mist\n#scheme: Pisces\nscheme: Gemini\n```\n### 设置菜单-menu\n\n#### 增加菜单项\n\n修改**主题配置**文件中menu项，菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是Font Awesome提供的图标\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -> archives).\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.\n# Value before `||` delimeter is the target link.\n# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.\n# External url should start with http:// or https://\nmenu:\n  首页: / || home\n  归档: /archives/ || archive\n  分类: /categories/ || th\n  标签: /tags/ || tags\n  关于: /about/ || user\n```\n\n#### categories页面创建\n\n\n* 1. 新建一个页面，命名为categories\n\n```javascript\nhexo new page categories\n```\n\n这时在source目录下会生成一个名为categories的文件夹, 在该文件夹下有一个名为index.md的文件\n\n* 2. 编辑categories文件夹下的index.md\n\n将页面的type设置为 categories ，主题将自动为这个页面显示所有分类\n\n```javascript\n---\ntitle: 分类\ndate: 2019-02-15 22:10:42\ntype: \"categories\"\ncomments: false\n---\n\n```\n\n注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false\n\n* 3. 在菜单中添加链接, 编辑主题的 _config.yml\n\n在文章中加入`category: \"博客操作\"`即可自动添加到分类。如下所示\n\n```javascript\n---\ntitle: 个人博客操作笔记\nauthor: Hyman Hu\ncategory: \"博客操作\"\ntags: \"Hexo\"\n---\n```\n\n### 设置侧栏-sidebar\n\n修改**主题配置**文件中sidebar项\n\n另：\n有时候写文章, 我们会习惯性地加上编号, 有时候又不想加上编号, 这个时候就需要自定义是否显示编号了。\n只要在不需要加编号的文章的front-matter加上 toc_number: false即可\n\n```yml\n# Table Of Contents in the Sidebar\ntoc:\n  enable: true\n  # Automatically add list number to toc.\n  number: true\n  # If true, all words will placed on next lines if header width longer then sidebar width.\n  wrap: false\n  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.\n  expand_all: false\n  # Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.\n  max_depth: 6\n```\n\n### 设置头像\n\n修改**主题配置**文件中avatar项\n\n### 其他\n\n* 1. 增加字数统计及阅读时长\n\n```shell\n# 安装插件\nnpm install hexo-symbols-count-time --save\n```\n\n修改**站点配置**文件(没有则新增)\n\n```yml\n# 增加字数和时间\nsymbols_count_time:\n #文章内是否显示\n  symbols: true\n  time: true\n # 网页底部是否显示\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n```\n\n修改**主题配置**文件\n\n```yml\n# Post wordcount display settings\n# Dependencies: https://github.com/theme-next/hexo-symbols-count-time\nsymbols_count_time:\n  separated_meta: true\n  #文章中的显示是否显示文字（本文字数|阅读时长）\n  item_text_post: true\n  #网页底部的显示是否显示文字（站点总字数|站点阅读时长） \n  item_text_total: false\n  # Average Word Length (chars count in word)\n  awl: 4\n  # Words Per Minute\n  wpm: 275\n  suffix: mins.\n```\n\n\n\n* 2. 网页底部信息隐藏，只需要把 主题配置文件的相关数据改为false就行\n\n```yml\nfooter:\n  # Specify the date when the site was setup. If not defined, current year will be used.\n  #since: 2015\n\n  # Icon between year and copyright info.\n  icon:\n    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/\n    # `heart` is recommended with animation in red (#ff0000).\n    name: user\n    # If you want to animate the icon, set it to true.\n    animated: false\n    # Change the color of icon, using Hex Code.\n    color: \"#808080\"\n\n  # If not defined, `author` from Hexo main config will be used.\n  copyright:\n\n  powered:\n    # Hexo link (Powered by Hexo).\n    enable: false\n    # Version info of Hexo after Hexo link (vX.X.X).\n    version: false\n\n  theme:\n    # Theme & scheme info link (Theme - NexT.scheme).\n    enable: false\n    # Version info of NexT after scheme info (vX.X.X).\n    version: false\n\n  # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.\n  # http://www.beian.miit.gov.cn\n  beian:\n    enable: false\n    icp:\n\n  # Any custom text can be defined here.\n  #custom_text: Hosted by <a href=\"https://pages.coding.me\" class=\"theme-link\" rel=\"noopener\" target=\"_blank\">Coding Pages</a>\n```\n\n* 3. 增加更新时间\n\n修改**主题配置**文件\n\n```yml\n# Post meta display settings\npost_meta:\n  item_text: true\n  created_at: true\n  updated_at:\n    enable: true\n    another_day: true\n  categories: true\n```\n\n写文章的时候可以直接在文章开头设置更新时间updated: 2019-05-04 12:00:00(注意格式)。没有这参数的话将会显示md文件的修改日期\n\n* 4.  增加阅读次数\n\n修改**主题配置文件**\n\n```yml\n# Show Views / Visitors of the website / page with busuanzi.\n# Get more information on http://ibruce.info/2015/04/04/busuanzi\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n* 主页只显示摘要，点击查看更多才能看全文\n\n```xml\n摘要\n<!-- more -->\n正文\n```\n\n\n\n\n\n\n## 基本操作\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n$ hexo n <title>\n```\n\n### 启动服务\n``` bash\n$ hexo server\n$ hexo s\n```\n\n### 生成静态文件\n``` bash\n$ hexo generate\n$ hexo g\n```\n\n### 部署到服务器\n``` bash\n$ hexo deploy\n$ hexo d\n```\n\n### 其他命令\n\n``` bash\n# 清除缓存文件 (db.json) 和已生成的静态文件 (public)\n$ hexo clean\n\n# 列出网站资料\n$ hexo list <type>\n\n# 显示hexo版本\n$ hexo version\n\n# 显示草稿\n$ hexo draft\n```\n\n\n\n## 官方文档\n\n### 写作\n\n```javascript\nhexo new [layout] <title>\n```\n\n* 1. 布局\n文章布局layout，默认post，可以通过修改_config.yml中的`default_layout`来指定默认布局\nHexo有三种默认布局: post(source/_posts_), page(source), draft(source/_draft_)。 自定义的布局，存储到_post文件夹中\n\n* 2. 文件名\nHexo 默认以标题做为文件名称。可修改**站点配置文件**_config.yml中`new_post_name`修改文件名，如：`:year-:month-:day-:title.md`\n\n* 3. 草稿\n发布草稿命令\n```javascript\nhexo publish [layout] <title>\n```\n\n* 4. 模板\n使用模板命令\n```javascript\nhexo new photo <title>\n```\n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md\n\n* 5. 文章头文件格式\n\n| 参数 | 描述 | 默认值 |\n| :---: | :---: | :---: |\n| layout | 布局 | post |\n| title | 标题 |  |\n| date | 建立日期 | 文件建立日期 |\n| updated | 更新日期 | 文件更新日期 |\n| comments | 开启文章评论功能 | true |\n| tags | 标签 |  |\n| category | 分类 |  |\n| permalink | 覆盖文章网址 |  |\n\n注：分类具有顺序性和层次性；而标签没有顺序和层次。\n\n```bash\ncategories:\n- Diary\n- Life\n```\n会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n### [插入引用](https://hexo.io/zh-cn/docs/tag-plugins)\n\n* 1. 引用块\n\n语法：\n```bash\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n* 2. 代码块\n\n语法：\n```bash\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n\n另一种形式的代码块，不同的是它使用三个反引号来包裹。\n\n```bash\n​``` [language] [title] [url] [link text] code snippet \n```\n\n\n\n\n\n\n### 插入图片\n\n* 1. 设置站点配置_config.yml\n\n```bash\npost_asset_folder: true\n```\n\n* 2. 安装插件\n```bash\nnpm install hexo-asset-image -- save\n```\n\n下次新建文章时，除了生成.md文件外还生成一个同名文件\n添加图片时使用markdown语法, 注意path只是文件的title，如果自定义了文件名，文件名前面的日期不需要写入\n```bash\n![image](path)\n```\n\n## 博客源码提交到Github\n\n将博客原文放在hexo分支上，博客静态文件放在master分支上\n\n1.新建Blog项目，并在github上创建分支,如hexo\n\n2.github上修改项目的默认分支为hexo\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504112516.png)\n\n3.clone项目到本地目录下\n```bash\ngit clone https://github.com/hyman213/Blog.git\n```\n\n4.执行git命令, 将文科原文保存到分支hexo上\n\n```bash\ngit remote add origin https://github.com/hyman213/Blog.git\ngit add .\ngit commit -m \"init commit\"\ngit push origin hexo\n```\n5.配置hexo deploy配置，提交到master分支\n\n```bash\ndeploy:\n  type: git\n  repository: git@github.com:hyman213/Blog.git\n  branch: master\n```\n\n静态文件发布命令\n```bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n\n今后博客的维护更新：\n\n1. 新增文章, hexo new \"article title\"\n2. 文章编辑完成后，利用github提交源码到github hexo分支\n3. 执行hexo clean、hexo g、hexo d，将博客页面上传到github master分支, 即可更新博客\n\n## 注意点\n\n* 1. Setting / GitHubPages\n     ![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504225102.png)\n\n* 2. Blog项目不是根目录，而是作为github.io的子目录。在站点配置文件中需要设置\n\n```shell\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /Blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n\n参考：\n\n* https://www.simon96.online/2018/10/12/hexo-tutorial/\n* https://www.cnblogs.com/xingyunblog/p/9685548.html\n\n","source":"_posts/20190504-Hexo使用方法记录.md","raw":"---\ntitle: Hexo使用方法记录\ndate: 2019-05-04 14:15:23\ntags: Hexo博客\ntoc_number: false\ncategory: \n  - 技术\n  - 归纳总结\n---\n\n\n\n此文是个人是通过Hexo和GitHub Page构建个人博客网站的步骤及注意事项，做为个人的备忘录，也可为其他小伙伴提供参考\n\n<!-- more -->\n\n\n\n## 创建项目\n\n```bash\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo server\n```\n\n## 设置主题风格\n\n### 设置主题步骤\n\n* 1. 下载主题\n* 2. 将下载好的主题文件夹，粘贴到站点目录的themes下。\n* 3. 更改**站点配置文件**_config.yml 的theme字段，为主题文件夹的名称：\n\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n```\n\n注意在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml\n\n* 站点配置文件，位于站点根目录下，主要包含 Hexo 本身的配置\n\n* 主题配置文件，位于主题目录下，主要用于配置主题相关的选项\n\n### 设置主题语言\n\n* 检查\\themes\\next\\languages文件夹下语言的yml文件，如中文对应的是zh-CN.yml，英文对应的是en.yml\n* 将站点配置文件中language设置为对应的值, 如简体中文设置为language: zh-CN\n\n### 设置主题风格\n\n修改**主题配置文件**中scheme项，目前 NexT 支持三种 Scheme，他们是：\n\n- Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n- Mist - Muse 的紧凑版本，整洁有序的单栏外观\n- Pisces - 双栏 Scheme，小家碧玉似的清新\n\n```yml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n# scheme: Muse\n#scheme: Mist\n#scheme: Pisces\nscheme: Gemini\n```\n### 设置菜单-menu\n\n#### 增加菜单项\n\n修改**主题配置**文件中menu项，菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是Font Awesome提供的图标\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -> archives).\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.\n# Value before `||` delimeter is the target link.\n# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.\n# External url should start with http:// or https://\nmenu:\n  首页: / || home\n  归档: /archives/ || archive\n  分类: /categories/ || th\n  标签: /tags/ || tags\n  关于: /about/ || user\n```\n\n#### categories页面创建\n\n\n* 1. 新建一个页面，命名为categories\n\n```javascript\nhexo new page categories\n```\n\n这时在source目录下会生成一个名为categories的文件夹, 在该文件夹下有一个名为index.md的文件\n\n* 2. 编辑categories文件夹下的index.md\n\n将页面的type设置为 categories ，主题将自动为这个页面显示所有分类\n\n```javascript\n---\ntitle: 分类\ndate: 2019-02-15 22:10:42\ntype: \"categories\"\ncomments: false\n---\n\n```\n\n注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false\n\n* 3. 在菜单中添加链接, 编辑主题的 _config.yml\n\n在文章中加入`category: \"博客操作\"`即可自动添加到分类。如下所示\n\n```javascript\n---\ntitle: 个人博客操作笔记\nauthor: Hyman Hu\ncategory: \"博客操作\"\ntags: \"Hexo\"\n---\n```\n\n### 设置侧栏-sidebar\n\n修改**主题配置**文件中sidebar项\n\n另：\n有时候写文章, 我们会习惯性地加上编号, 有时候又不想加上编号, 这个时候就需要自定义是否显示编号了。\n只要在不需要加编号的文章的front-matter加上 toc_number: false即可\n\n```yml\n# Table Of Contents in the Sidebar\ntoc:\n  enable: true\n  # Automatically add list number to toc.\n  number: true\n  # If true, all words will placed on next lines if header width longer then sidebar width.\n  wrap: false\n  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.\n  expand_all: false\n  # Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.\n  max_depth: 6\n```\n\n### 设置头像\n\n修改**主题配置**文件中avatar项\n\n### 其他\n\n* 1. 增加字数统计及阅读时长\n\n```shell\n# 安装插件\nnpm install hexo-symbols-count-time --save\n```\n\n修改**站点配置**文件(没有则新增)\n\n```yml\n# 增加字数和时间\nsymbols_count_time:\n #文章内是否显示\n  symbols: true\n  time: true\n # 网页底部是否显示\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n```\n\n修改**主题配置**文件\n\n```yml\n# Post wordcount display settings\n# Dependencies: https://github.com/theme-next/hexo-symbols-count-time\nsymbols_count_time:\n  separated_meta: true\n  #文章中的显示是否显示文字（本文字数|阅读时长）\n  item_text_post: true\n  #网页底部的显示是否显示文字（站点总字数|站点阅读时长） \n  item_text_total: false\n  # Average Word Length (chars count in word)\n  awl: 4\n  # Words Per Minute\n  wpm: 275\n  suffix: mins.\n```\n\n\n\n* 2. 网页底部信息隐藏，只需要把 主题配置文件的相关数据改为false就行\n\n```yml\nfooter:\n  # Specify the date when the site was setup. If not defined, current year will be used.\n  #since: 2015\n\n  # Icon between year and copyright info.\n  icon:\n    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/\n    # `heart` is recommended with animation in red (#ff0000).\n    name: user\n    # If you want to animate the icon, set it to true.\n    animated: false\n    # Change the color of icon, using Hex Code.\n    color: \"#808080\"\n\n  # If not defined, `author` from Hexo main config will be used.\n  copyright:\n\n  powered:\n    # Hexo link (Powered by Hexo).\n    enable: false\n    # Version info of Hexo after Hexo link (vX.X.X).\n    version: false\n\n  theme:\n    # Theme & scheme info link (Theme - NexT.scheme).\n    enable: false\n    # Version info of NexT after scheme info (vX.X.X).\n    version: false\n\n  # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.\n  # http://www.beian.miit.gov.cn\n  beian:\n    enable: false\n    icp:\n\n  # Any custom text can be defined here.\n  #custom_text: Hosted by <a href=\"https://pages.coding.me\" class=\"theme-link\" rel=\"noopener\" target=\"_blank\">Coding Pages</a>\n```\n\n* 3. 增加更新时间\n\n修改**主题配置**文件\n\n```yml\n# Post meta display settings\npost_meta:\n  item_text: true\n  created_at: true\n  updated_at:\n    enable: true\n    another_day: true\n  categories: true\n```\n\n写文章的时候可以直接在文章开头设置更新时间updated: 2019-05-04 12:00:00(注意格式)。没有这参数的话将会显示md文件的修改日期\n\n* 4.  增加阅读次数\n\n修改**主题配置文件**\n\n```yml\n# Show Views / Visitors of the website / page with busuanzi.\n# Get more information on http://ibruce.info/2015/04/04/busuanzi\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n* 主页只显示摘要，点击查看更多才能看全文\n\n```xml\n摘要\n<!-- more -->\n正文\n```\n\n\n\n\n\n\n## 基本操作\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n$ hexo n <title>\n```\n\n### 启动服务\n``` bash\n$ hexo server\n$ hexo s\n```\n\n### 生成静态文件\n``` bash\n$ hexo generate\n$ hexo g\n```\n\n### 部署到服务器\n``` bash\n$ hexo deploy\n$ hexo d\n```\n\n### 其他命令\n\n``` bash\n# 清除缓存文件 (db.json) 和已生成的静态文件 (public)\n$ hexo clean\n\n# 列出网站资料\n$ hexo list <type>\n\n# 显示hexo版本\n$ hexo version\n\n# 显示草稿\n$ hexo draft\n```\n\n\n\n## 官方文档\n\n### 写作\n\n```javascript\nhexo new [layout] <title>\n```\n\n* 1. 布局\n文章布局layout，默认post，可以通过修改_config.yml中的`default_layout`来指定默认布局\nHexo有三种默认布局: post(source/_posts_), page(source), draft(source/_draft_)。 自定义的布局，存储到_post文件夹中\n\n* 2. 文件名\nHexo 默认以标题做为文件名称。可修改**站点配置文件**_config.yml中`new_post_name`修改文件名，如：`:year-:month-:day-:title.md`\n\n* 3. 草稿\n发布草稿命令\n```javascript\nhexo publish [layout] <title>\n```\n\n* 4. 模板\n使用模板命令\n```javascript\nhexo new photo <title>\n```\n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md\n\n* 5. 文章头文件格式\n\n| 参数 | 描述 | 默认值 |\n| :---: | :---: | :---: |\n| layout | 布局 | post |\n| title | 标题 |  |\n| date | 建立日期 | 文件建立日期 |\n| updated | 更新日期 | 文件更新日期 |\n| comments | 开启文章评论功能 | true |\n| tags | 标签 |  |\n| category | 分类 |  |\n| permalink | 覆盖文章网址 |  |\n\n注：分类具有顺序性和层次性；而标签没有顺序和层次。\n\n```bash\ncategories:\n- Diary\n- Life\n```\n会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n### [插入引用](https://hexo.io/zh-cn/docs/tag-plugins)\n\n* 1. 引用块\n\n语法：\n```bash\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n* 2. 代码块\n\n语法：\n```bash\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n\n另一种形式的代码块，不同的是它使用三个反引号来包裹。\n\n```bash\n​``` [language] [title] [url] [link text] code snippet \n```\n\n\n\n\n\n\n### 插入图片\n\n* 1. 设置站点配置_config.yml\n\n```bash\npost_asset_folder: true\n```\n\n* 2. 安装插件\n```bash\nnpm install hexo-asset-image -- save\n```\n\n下次新建文章时，除了生成.md文件外还生成一个同名文件\n添加图片时使用markdown语法, 注意path只是文件的title，如果自定义了文件名，文件名前面的日期不需要写入\n```bash\n![image](path)\n```\n\n## 博客源码提交到Github\n\n将博客原文放在hexo分支上，博客静态文件放在master分支上\n\n1.新建Blog项目，并在github上创建分支,如hexo\n\n2.github上修改项目的默认分支为hexo\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504112516.png)\n\n3.clone项目到本地目录下\n```bash\ngit clone https://github.com/hyman213/Blog.git\n```\n\n4.执行git命令, 将文科原文保存到分支hexo上\n\n```bash\ngit remote add origin https://github.com/hyman213/Blog.git\ngit add .\ngit commit -m \"init commit\"\ngit push origin hexo\n```\n5.配置hexo deploy配置，提交到master分支\n\n```bash\ndeploy:\n  type: git\n  repository: git@github.com:hyman213/Blog.git\n  branch: master\n```\n\n静态文件发布命令\n```bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n\n今后博客的维护更新：\n\n1. 新增文章, hexo new \"article title\"\n2. 文章编辑完成后，利用github提交源码到github hexo分支\n3. 执行hexo clean、hexo g、hexo d，将博客页面上传到github master分支, 即可更新博客\n\n## 注意点\n\n* 1. Setting / GitHubPages\n     ![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504225102.png)\n\n* 2. Blog项目不是根目录，而是作为github.io的子目录。在站点配置文件中需要设置\n\n```shell\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /Blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n\n参考：\n\n* https://www.simon96.online/2018/10/12/hexo-tutorial/\n* https://www.cnblogs.com/xingyunblog/p/9685548.html\n\n","slug":"Hexo使用方法记录","published":1,"updated":"2019-10-27T12:59:58.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxcju0002d4kpurvo7p97","content":"<p>此文是个人是通过Hexo和GitHub Page构建个人博客网站的步骤及注意事项，做为个人的备忘录，也可为其他小伙伴提供参考</p>\n<a id=\"more\"></a>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置主题风格\"><a href=\"#设置主题风格\" class=\"headerlink\" title=\"设置主题风格\"></a>设置主题风格</h2><h3 id=\"设置主题步骤\"><a href=\"#设置主题步骤\" class=\"headerlink\" title=\"设置主题步骤\"></a>设置主题步骤</h3><ul>\n<li><ol>\n<li>下载主题</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将下载好的主题文件夹，粘贴到站点目录的themes下。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>更改<strong>站点配置文件</strong>_config.yml 的theme字段，为主题文件夹的名称：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<p>注意在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml</p>\n<ul>\n<li><p>站点配置文件，位于站点根目录下，主要包含 Hexo 本身的配置</p>\n</li>\n<li><p>主题配置文件，位于主题目录下，主要用于配置主题相关的选项</p>\n</li>\n</ul>\n<h3 id=\"设置主题语言\"><a href=\"#设置主题语言\" class=\"headerlink\" title=\"设置主题语言\"></a>设置主题语言</h3><ul>\n<li>检查\\themes\\next\\languages文件夹下语言的yml文件，如中文对应的是zh-CN.yml，英文对应的是en.yml</li>\n<li>将站点配置文件中language设置为对应的值, 如简体中文设置为language: zh-CN</li>\n</ul>\n<h3 id=\"设置主题风格-1\"><a href=\"#设置主题风格-1\" class=\"headerlink\" title=\"设置主题风格\"></a>设置主题风格</h3><p>修改<strong>主题配置文件</strong>中scheme项，目前 NexT 支持三种 Scheme，他们是：</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\"># scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置菜单-menu\"><a href=\"#设置菜单-menu\" class=\"headerlink\" title=\"设置菜单-menu\"></a>设置菜单-menu</h3><h4 id=\"增加菜单项\"><a href=\"#增加菜单项\" class=\"headerlink\" title=\"增加菜单项\"></a>增加菜单项</h4><p>修改<strong>主题配置</strong>文件中menu项，菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是Font Awesome提供的图标</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimeter is the target link.</span></span><br><span class=\"line\"><span class=\"comment\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">首页:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"string\">归档:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\">  <span class=\"string\">标签:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"string\">关于:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"categories页面创建\"><a href=\"#categories页面创建\" class=\"headerlink\" title=\"categories页面创建\"></a>categories页面创建</h4><ul>\n<li><ol>\n<li>新建一个页面，命名为categories</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> page categories</span><br></pre></td></tr></table></figure>\n<p>这时在source目录下会生成一个名为categories的文件夹, 在该文件夹下有一个名为index.md的文件</p>\n<ul>\n<li><ol start=\"2\">\n<li>编辑categories文件夹下的index.md</li>\n</ol>\n</li>\n</ul>\n<p>将页面的type设置为 categories ，主题将自动为这个页面显示所有分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: <span class=\"number\">2019</span><span class=\"number\">-02</span><span class=\"number\">-15</span> <span class=\"number\">22</span>:<span class=\"number\">10</span>:<span class=\"number\">42</span></span><br><span class=\"line\">type: <span class=\"string\">\"categories\"</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false</p>\n<ul>\n<li><ol start=\"3\">\n<li>在菜单中添加链接, 编辑主题的 _config.yml</li>\n</ol>\n</li>\n</ul>\n<p>在文章中加入<code>category: &quot;博客操作&quot;</code>即可自动添加到分类。如下所示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 个人博客操作笔记</span><br><span class=\"line\">author: Hyman Hu</span><br><span class=\"line\">category: <span class=\"string\">\"博客操作\"</span></span><br><span class=\"line\">tags: <span class=\"string\">\"Hexo\"</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置侧栏-sidebar\"><a href=\"#设置侧栏-sidebar\" class=\"headerlink\" title=\"设置侧栏-sidebar\"></a>设置侧栏-sidebar</h3><p>修改<strong>主题配置</strong>文件中sidebar项</p>\n<p>另：<br>有时候写文章, 我们会习惯性地加上编号, 有时候又不想加上编号, 这个时候就需要自定义是否显示编号了。<br>只要在不需要加编号的文章的front-matter加上 toc_number: false即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Table Of Contents in the Sidebar</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Automatically add list number to toc.</span></span><br><span class=\"line\"><span class=\"attr\">  number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class=\"line\"><span class=\"attr\">  wrap:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class=\"line\"><span class=\"attr\">  expand_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span></span><br><span class=\"line\"><span class=\"attr\">  max_depth:</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><p>修改<strong>主题配置</strong>文件中avatar项</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><ol>\n<li>增加字数统计及阅读时长</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装插件</span></span><br><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>\n<p>修改<strong>站点配置</strong>文件(没有则新增)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加字数和时间</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"> <span class=\"comment\">#文章内是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"comment\"># 网页底部是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude_codeblock:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>修改<strong>主题配置</strong>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Post wordcount display settings</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#文章中的显示是否显示文字（本文字数|阅读时长）</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#网页底部的显示是否显示文字（站点总字数|站点阅读时长） </span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Average Word Length (chars count in word)</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"comment\"># Words Per Minute</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br><span class=\"line\"><span class=\"attr\">  suffix:</span> <span class=\"string\">mins.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>网页底部信息隐藏，只需要把 主题配置文件的相关数据改为false就行</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class=\"line\">  <span class=\"comment\">#since: 2015</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Icon between year and copyright info.</span></span><br><span class=\"line\"><span class=\"attr\">  icon:</span></span><br><span class=\"line\">    <span class=\"comment\"># Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class=\"line\">    <span class=\"comment\"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">user</span></span><br><span class=\"line\">    <span class=\"comment\"># If you want to animate the icon, set it to true.</span></span><br><span class=\"line\"><span class=\"attr\">    animated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># Change the color of icon, using Hex Code.</span></span><br><span class=\"line\"><span class=\"attr\">    color:</span> <span class=\"string\">\"#808080\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If not defined, `author` from Hexo main config will be used.</span></span><br><span class=\"line\"><span class=\"attr\">  copyright:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  powered:</span></span><br><span class=\"line\">    <span class=\"comment\"># Hexo link (Powered by Hexo).</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class=\"line\"><span class=\"attr\">    version:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  theme:</span></span><br><span class=\"line\">    <span class=\"comment\"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class=\"line\"><span class=\"attr\">    version:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.</span></span><br><span class=\"line\">  <span class=\"comment\"># http://www.beian.miit.gov.cn</span></span><br><span class=\"line\"><span class=\"attr\">  beian:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    icp:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Any custom text can be defined here.</span></span><br><span class=\"line\">  <span class=\"comment\">#custom_text: Hosted by &lt;a href=\"https://pages.coding.me\" class=\"theme-link\" rel=\"noopener\" target=\"_blank\"&gt;Coding Pages&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"3\">\n<li>增加更新时间</li>\n</ol>\n</li>\n</ul>\n<p>修改<strong>主题配置</strong>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Post meta display settings</span></span><br><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\"><span class=\"attr\">  item_text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  created_at:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  updated_at:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    another_day:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>写文章的时候可以直接在文章开头设置更新时间updated: 2019-05-04 12:00:00(注意格式)。没有这参数的话将会显示md文件的修改日期</p>\n<ul>\n<li><ol start=\"4\">\n<li>增加阅读次数</li>\n</ol>\n</li>\n</ul>\n<p>修改<strong>主题配置文件</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class=\"line\"><span class=\"comment\"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors_icon:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_views_icon:</span> <span class=\"string\">eye</span></span><br><span class=\"line\"><span class=\"attr\">  post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>主页只显示摘要，点击查看更多才能看全文</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">摘要</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\">正文</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br><span class=\"line\">$ hexo n &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到服务器\"><a href=\"#部署到服务器\" class=\"headerlink\" title=\"部署到服务器\"></a>部署到服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出网站资料</span></span><br><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示hexo版本</span></span><br><span class=\"line\">$ hexo version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示草稿</span></span><br><span class=\"line\">$ hexo draft</span><br></pre></td></tr></table></figure>\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol>\n<li>布局<br>文章布局layout，默认post，可以通过修改_config.yml中的<code>default_layout</code>来指定默认布局<br>Hexo有三种默认布局: post(source/<em>posts</em>), page(source), draft(source/<em>draft</em>)。 自定义的布局，存储到_post文件夹中</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>文件名<br>Hexo 默认以标题做为文件名称。可修改<strong>站点配置文件</strong>_config.yml中<code>new_post_name</code>修改文件名，如：<code>:year-:month-:day-:title.md</code></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>草稿<br>发布草稿命令<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>模板<br>使用模板命令<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> photo &lt;title&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md</p>\n<ul>\n<li><ol start=\"5\">\n<li>文章头文件格式</li>\n</ol>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">布局</td>\n<td style=\"text-align:center\">post</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">标题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">建立日期</td>\n<td style=\"text-align:center\">文件建立日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updated</td>\n<td style=\"text-align:center\">更新日期</td>\n<td style=\"text-align:center\">文件更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\">开启文章评论功能</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">category</td>\n<td style=\"text-align:center\">分类</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">permalink</td>\n<td style=\"text-align:center\">覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>注：分类具有顺序性和层次性；而标签没有顺序和层次。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">- Life</span><br></pre></td></tr></table></figure>\n<p>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>\n<h3 id=\"插入引用\"><a href=\"#插入引用\" class=\"headerlink\" title=\"插入引用\"></a><a href=\"https://hexo.io/zh-cn/docs/tag-plugins\" target=\"_blank\" rel=\"noopener\">插入引用</a></h3><ul>\n<li><ol>\n<li>引用块</li>\n</ol>\n</li>\n</ul>\n<p>语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, <span class=\"built_in\">source</span>]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><ol start=\"2\">\n<li>代码块</li>\n</ol>\n</li>\n</ul>\n<p>语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​``` [language] [title] [url] [link text] code snippet</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><ul>\n<li><ol>\n<li>设置站点配置_config.yml</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>安装插件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image -- save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>下次新建文章时，除了生成.md文件外还生成一个同名文件<br>添加图片时使用markdown语法, 注意path只是文件的title，如果自定义了文件名，文件名前面的日期不需要写入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![image](path)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"博客源码提交到Github\"><a href=\"#博客源码提交到Github\" class=\"headerlink\" title=\"博客源码提交到Github\"></a>博客源码提交到Github</h2><p>将博客原文放在hexo分支上，博客静态文件放在master分支上</p>\n<p>1.新建Blog项目，并在github上创建分支,如hexo</p>\n<p>2.github上修改项目的默认分支为hexo</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504112516.png\" alt></p>\n<p>3.clone项目到本地目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/hyman213/Blog.git</span><br></pre></td></tr></table></figure></p>\n<p>4.执行git命令, 将文科原文保存到分支hexo上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/hyman213/Blog.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"init commit\"</span></span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n<p>5.配置hexo deploy配置，提交到master分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: git@github.com:hyman213/Blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>静态文件发布命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>今后博客的维护更新：</p>\n<ol>\n<li>新增文章, hexo new “article title”</li>\n<li>文章编辑完成后，利用github提交源码到github hexo分支</li>\n<li>执行hexo clean、hexo g、hexo d，将博客页面上传到github master分支, 即可更新博客</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li><ol>\n<li>Setting / GitHubPages<br><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504225102.png\" alt></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Blog项目不是根目录，而是作为github.io的子目录。在站点配置文件中需要设置</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> URL</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span></span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /Blog/</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.simon96.online/2018/10/12/hexo-tutorial/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></li>\n<li><a href=\"https://www.cnblogs.com/xingyunblog/p/9685548.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xingyunblog/p/9685548.html</a></li>\n</ul>\n","site":{"data":{}},"length":6968,"excerpt":"<p>此文是个人是通过Hexo和GitHub Page构建个人博客网站的步骤及注意事项，做为个人的备忘录，也可为其他小伙伴提供参考</p>","more":"<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置主题风格\"><a href=\"#设置主题风格\" class=\"headerlink\" title=\"设置主题风格\"></a>设置主题风格</h2><h3 id=\"设置主题步骤\"><a href=\"#设置主题步骤\" class=\"headerlink\" title=\"设置主题步骤\"></a>设置主题步骤</h3><ul>\n<li><ol>\n<li>下载主题</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将下载好的主题文件夹，粘贴到站点目录的themes下。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>更改<strong>站点配置文件</strong>_config.yml 的theme字段，为主题文件夹的名称：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<p>注意在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml</p>\n<ul>\n<li><p>站点配置文件，位于站点根目录下，主要包含 Hexo 本身的配置</p>\n</li>\n<li><p>主题配置文件，位于主题目录下，主要用于配置主题相关的选项</p>\n</li>\n</ul>\n<h3 id=\"设置主题语言\"><a href=\"#设置主题语言\" class=\"headerlink\" title=\"设置主题语言\"></a>设置主题语言</h3><ul>\n<li>检查\\themes\\next\\languages文件夹下语言的yml文件，如中文对应的是zh-CN.yml，英文对应的是en.yml</li>\n<li>将站点配置文件中language设置为对应的值, 如简体中文设置为language: zh-CN</li>\n</ul>\n<h3 id=\"设置主题风格-1\"><a href=\"#设置主题风格-1\" class=\"headerlink\" title=\"设置主题风格\"></a>设置主题风格</h3><p>修改<strong>主题配置文件</strong>中scheme项，目前 NexT 支持三种 Scheme，他们是：</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\"># scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置菜单-menu\"><a href=\"#设置菜单-menu\" class=\"headerlink\" title=\"设置菜单-menu\"></a>设置菜单-menu</h3><h4 id=\"增加菜单项\"><a href=\"#增加菜单项\" class=\"headerlink\" title=\"增加菜单项\"></a>增加菜单项</h4><p>修改<strong>主题配置</strong>文件中menu项，菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是Font Awesome提供的图标</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimeter is the target link.</span></span><br><span class=\"line\"><span class=\"comment\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">首页:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"string\">归档:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\">  <span class=\"string\">标签:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"string\">关于:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"categories页面创建\"><a href=\"#categories页面创建\" class=\"headerlink\" title=\"categories页面创建\"></a>categories页面创建</h4><ul>\n<li><ol>\n<li>新建一个页面，命名为categories</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> page categories</span><br></pre></td></tr></table></figure>\n<p>这时在source目录下会生成一个名为categories的文件夹, 在该文件夹下有一个名为index.md的文件</p>\n<ul>\n<li><ol start=\"2\">\n<li>编辑categories文件夹下的index.md</li>\n</ol>\n</li>\n</ul>\n<p>将页面的type设置为 categories ，主题将自动为这个页面显示所有分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: <span class=\"number\">2019</span><span class=\"number\">-02</span><span class=\"number\">-15</span> <span class=\"number\">22</span>:<span class=\"number\">10</span>:<span class=\"number\">42</span></span><br><span class=\"line\">type: <span class=\"string\">\"categories\"</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false</p>\n<ul>\n<li><ol start=\"3\">\n<li>在菜单中添加链接, 编辑主题的 _config.yml</li>\n</ol>\n</li>\n</ul>\n<p>在文章中加入<code>category: &quot;博客操作&quot;</code>即可自动添加到分类。如下所示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 个人博客操作笔记</span><br><span class=\"line\">author: Hyman Hu</span><br><span class=\"line\">category: <span class=\"string\">\"博客操作\"</span></span><br><span class=\"line\">tags: <span class=\"string\">\"Hexo\"</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置侧栏-sidebar\"><a href=\"#设置侧栏-sidebar\" class=\"headerlink\" title=\"设置侧栏-sidebar\"></a>设置侧栏-sidebar</h3><p>修改<strong>主题配置</strong>文件中sidebar项</p>\n<p>另：<br>有时候写文章, 我们会习惯性地加上编号, 有时候又不想加上编号, 这个时候就需要自定义是否显示编号了。<br>只要在不需要加编号的文章的front-matter加上 toc_number: false即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Table Of Contents in the Sidebar</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Automatically add list number to toc.</span></span><br><span class=\"line\"><span class=\"attr\">  number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class=\"line\"><span class=\"attr\">  wrap:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class=\"line\"><span class=\"attr\">  expand_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span></span><br><span class=\"line\"><span class=\"attr\">  max_depth:</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><p>修改<strong>主题配置</strong>文件中avatar项</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><ol>\n<li>增加字数统计及阅读时长</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装插件</span></span><br><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>\n<p>修改<strong>站点配置</strong>文件(没有则新增)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加字数和时间</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"> <span class=\"comment\">#文章内是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"comment\"># 网页底部是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  exclude_codeblock:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>修改<strong>主题配置</strong>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Post wordcount display settings</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#文章中的显示是否显示文字（本文字数|阅读时长）</span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#网页底部的显示是否显示文字（站点总字数|站点阅读时长） </span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Average Word Length (chars count in word)</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"comment\"># Words Per Minute</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br><span class=\"line\"><span class=\"attr\">  suffix:</span> <span class=\"string\">mins.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>网页底部信息隐藏，只需要把 主题配置文件的相关数据改为false就行</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class=\"line\">  <span class=\"comment\">#since: 2015</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Icon between year and copyright info.</span></span><br><span class=\"line\"><span class=\"attr\">  icon:</span></span><br><span class=\"line\">    <span class=\"comment\"># Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class=\"line\">    <span class=\"comment\"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">user</span></span><br><span class=\"line\">    <span class=\"comment\"># If you want to animate the icon, set it to true.</span></span><br><span class=\"line\"><span class=\"attr\">    animated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># Change the color of icon, using Hex Code.</span></span><br><span class=\"line\"><span class=\"attr\">    color:</span> <span class=\"string\">\"#808080\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If not defined, `author` from Hexo main config will be used.</span></span><br><span class=\"line\"><span class=\"attr\">  copyright:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  powered:</span></span><br><span class=\"line\">    <span class=\"comment\"># Hexo link (Powered by Hexo).</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class=\"line\"><span class=\"attr\">    version:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  theme:</span></span><br><span class=\"line\">    <span class=\"comment\"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class=\"line\"><span class=\"attr\">    version:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.</span></span><br><span class=\"line\">  <span class=\"comment\"># http://www.beian.miit.gov.cn</span></span><br><span class=\"line\"><span class=\"attr\">  beian:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    icp:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Any custom text can be defined here.</span></span><br><span class=\"line\">  <span class=\"comment\">#custom_text: Hosted by &lt;a href=\"https://pages.coding.me\" class=\"theme-link\" rel=\"noopener\" target=\"_blank\"&gt;Coding Pages&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"3\">\n<li>增加更新时间</li>\n</ol>\n</li>\n</ul>\n<p>修改<strong>主题配置</strong>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Post meta display settings</span></span><br><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\"><span class=\"attr\">  item_text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  created_at:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  updated_at:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    another_day:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>写文章的时候可以直接在文章开头设置更新时间updated: 2019-05-04 12:00:00(注意格式)。没有这参数的话将会显示md文件的修改日期</p>\n<ul>\n<li><ol start=\"4\">\n<li>增加阅读次数</li>\n</ol>\n</li>\n</ul>\n<p>修改<strong>主题配置文件</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class=\"line\"><span class=\"comment\"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_visitors_icon:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">  total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_views_icon:</span> <span class=\"string\">eye</span></span><br><span class=\"line\"><span class=\"attr\">  post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>主页只显示摘要，点击查看更多才能看全文</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">摘要</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\">正文</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br><span class=\"line\">$ hexo n &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到服务器\"><a href=\"#部署到服务器\" class=\"headerlink\" title=\"部署到服务器\"></a>部署到服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出网站资料</span></span><br><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示hexo版本</span></span><br><span class=\"line\">$ hexo version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示草稿</span></span><br><span class=\"line\">$ hexo draft</span><br></pre></td></tr></table></figure>\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol>\n<li>布局<br>文章布局layout，默认post，可以通过修改_config.yml中的<code>default_layout</code>来指定默认布局<br>Hexo有三种默认布局: post(source/<em>posts</em>), page(source), draft(source/<em>draft</em>)。 自定义的布局，存储到_post文件夹中</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>文件名<br>Hexo 默认以标题做为文件名称。可修改<strong>站点配置文件</strong>_config.yml中<code>new_post_name</code>修改文件名，如：<code>:year-:month-:day-:title.md</code></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>草稿<br>发布草稿命令<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>模板<br>使用模板命令<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> photo &lt;title&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md</p>\n<ul>\n<li><ol start=\"5\">\n<li>文章头文件格式</li>\n</ol>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">布局</td>\n<td style=\"text-align:center\">post</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">标题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">建立日期</td>\n<td style=\"text-align:center\">文件建立日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updated</td>\n<td style=\"text-align:center\">更新日期</td>\n<td style=\"text-align:center\">文件更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\">开启文章评论功能</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">category</td>\n<td style=\"text-align:center\">分类</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">permalink</td>\n<td style=\"text-align:center\">覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>注：分类具有顺序性和层次性；而标签没有顺序和层次。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">- Life</span><br></pre></td></tr></table></figure>\n<p>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>\n<h3 id=\"插入引用\"><a href=\"#插入引用\" class=\"headerlink\" title=\"插入引用\"></a><a href=\"https://hexo.io/zh-cn/docs/tag-plugins\" target=\"_blank\" rel=\"noopener\">插入引用</a></h3><ul>\n<li><ol>\n<li>引用块</li>\n</ol>\n</li>\n</ul>\n<p>语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, <span class=\"built_in\">source</span>]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><ol start=\"2\">\n<li>代码块</li>\n</ol>\n</li>\n</ul>\n<p>语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​``` [language] [title] [url] [link text] code snippet</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><ul>\n<li><ol>\n<li>设置站点配置_config.yml</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>安装插件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image -- save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>下次新建文章时，除了生成.md文件外还生成一个同名文件<br>添加图片时使用markdown语法, 注意path只是文件的title，如果自定义了文件名，文件名前面的日期不需要写入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![image](path)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"博客源码提交到Github\"><a href=\"#博客源码提交到Github\" class=\"headerlink\" title=\"博客源码提交到Github\"></a>博客源码提交到Github</h2><p>将博客原文放在hexo分支上，博客静态文件放在master分支上</p>\n<p>1.新建Blog项目，并在github上创建分支,如hexo</p>\n<p>2.github上修改项目的默认分支为hexo</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504112516.png\" alt></p>\n<p>3.clone项目到本地目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/hyman213/Blog.git</span><br></pre></td></tr></table></figure></p>\n<p>4.执行git命令, 将文科原文保存到分支hexo上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/hyman213/Blog.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"init commit\"</span></span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n<p>5.配置hexo deploy配置，提交到master分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: git@github.com:hyman213/Blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>静态文件发布命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>今后博客的维护更新：</p>\n<ol>\n<li>新增文章, hexo new “article title”</li>\n<li>文章编辑完成后，利用github提交源码到github hexo分支</li>\n<li>执行hexo clean、hexo g、hexo d，将博客页面上传到github master分支, 即可更新博客</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li><ol>\n<li>Setting / GitHubPages<br><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190504225102.png\" alt></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Blog项目不是根目录，而是作为github.io的子目录。在站点配置文件中需要设置</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> URL</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span></span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /Blog/</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.simon96.online/2018/10/12/hexo-tutorial/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></li>\n<li><a href=\"https://www.cnblogs.com/xingyunblog/p/9685548.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xingyunblog/p/9685548.html</a></li>\n</ul>"},{"title":"Git学习笔记","date":"2019-05-07T13:37:56.000Z","_content":"\n\nGit是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。\n\n<!--more-->\n\n## Git是什么\n\nGit是分布式版本控制系统\n官网:[https://git-scm.com/](https://git-scm.com/)\n\n### 工作原理 / 流程\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502000850.png)\n\n* Workspace: 工作区\n* Index / Stage: 暂存区\n* Repository: 仓库区（或本地仓库）\n* Remote: 远程仓库\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502002525.png)\n\n### SVN与Git的主要区别\n\nSVN-集中式版本控制系统，版本库放在中央服务器。以中央服务器的版本为基准，干活前需要先同步中央服务器得到最新的版本，自己本地的更新也需要推送到中央服务器。\n\nGit是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。\n\n## Git安装使用\n\n### Git安装\n\n参照Git官网下载安装,安装完成后鼠标右键菜单多了2个选项\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502145216.png)\n\n### Git初始化用户信息\n\n设置用户全局配置：\n\n```shell\ngit config --global user.name \"[name]\"\nSets the name you want to attached to your transactions\n\ngit config --global user.email \"[email address]\"\nSets the email you want to attached to your transactions\n\ngit config --global color.ui auto\nEnables helpful colorization of command line output\n```\n\n查看用户信息配置\n\n```shell\ngit config user.name\ngit config user.email\n```\n\n### GitHub配置SSH公钥\n\n```shell\nssh-keygen -t rsa -C '[email address using in github]'\n```\n\n* 在Git Bash输入以上命令后，回车后再按三个回车(默认存储位置，密码为空，确认密码)。\n\n* 将上一步生成的公钥路径：C:\\Users\\你的用户名\\\\.ssh。id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n* 将生成的公钥(id_rsa.pub)添加到GitHub:选择头像-->Settings-->SSH and GPG keys\n\n### [Git GUI Clients](https://git-scm.com/downloads/guis)\n\n* GitHub Desktop\n* TortoiseGit\n* Git Extensions\n* ...\n\n## Git管理代码仓库\n\n### 创建版本库\n\nRepository可以理解为一个目录，这个目录里面的所有文件都可以被Git管理起来。\n\n```shell\n$ mkdir testgit\n$ cd testgit/\n$ git init\nInitialized empty Git repository in D:/WorkSpaces/testgit/.git/\n```\n\n执行上面的操作，gittest就成为了一个Git仓库。在testgit目录下自动新增了一个.git文件夹\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502150628.png)\n\n新建readme.txt文件并提交\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502151123.png)\n\n继续修改readme.txt文件后，提交修改\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502152011.png)\n\n发现每次都会有warning: LF will be replaced by CRLF in readme.txt.提示。\n\n原因是不同操作系统中换行符的标识不同\n\n* CRLF->Windows-style\n\n* LF->Unix Style\n\n* CR->Mac Style\n\n可通过如下命令进行转换设置\n\n```shell\ngit config --global core.autocrlf true/false/inout\n```\n\n* true，添加文件到git仓库时，git将其视为文本文件。他将把crlf变成lf\n* false，line-endings将不做转换操作。文本文件保持原来的样子。\n* input，添加文件git仓库石，git把crlf编程lf。当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置\n\n### 版本回退\n\n继续修改readme.txt文件，新增\"33333333\"并提交\n\n查看修改的历史记录\n\n```shell\ngit log\ngit log --pretty=oneline\ngit reflog\n```\n\ngit log 与git reflog的区别\n\n1) git log: commit 的版本日志 包含提交的版本 操作者 日期 (方便查看commit的版本,但是版本回退后,使用git log 看不到回退版本号之后的版本记录) \n\n2) git reflog: 使用git 命令进行操作的日志  包括当前步骤所在哪个版本(一个commit 产生一个版本, 指定版本回退只能回退到该commit) 以及操作的具体内容\n\n版本回退后,仍然可以看到所有的版本记录 方便查看每个操作步骤所在的版本,可以根据版本号自由前进后退\n\n版本回退操作\n\n```shell\ngit reset --hard HEAD^\ngit reset --hard HEAD^^\ngit reset --hard HEAD~100\ngit reset --hard '版本号'\n```\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502155810.png)\n\n### 撤销和删除文件\n\n#### 撤销修改\n\n```shell\n# 丢弃工作区的修改。--很重要，没有--的话命令就变成创建分支了\ngit checkout -- file\n```\n\n有2种情况：\n\n* 文件修改后，还没有放到暂存区，使用撤销修改就回到和版本库一模一样的状态\n* 另外一种是文件的修改已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162025.png)\n\n#### 删除文件\n\n删除文件后再commit到git，如果删除并提交到暂存区后，可执行checkout操作恢复删除的文件\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162924.png)\n\n\n\n## 远程仓库\n\n### 注册GitHub，并在本地创建SSH添加到GitHub \n\n操作参照步骤2-3\n\n### 添加远程库\n\n#### 本地先有仓库，然后关联到远程库\n\n* 1. 在GitHub上创建仓库\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171256.png)\n\n* 2. 在本地仓库目录下运行命令\n\n```shell\ngit remote add origin https://github.com/hyman213/testgit.git\n# 第一次推送\ngit push -u origin master\n# 之后的推送\ngit push origin master\n```\n\n我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171627.png)\n\n此时本地仓库的内容就上传到了远程库\n\n再次修改本地库的readme.txt文件，测试上传更新到远程库\n\n```shell\n$ vi readme.txt\n$ git status\n$ git add readme.txt\n$ git commit -m '增加了55555555和66666666'\n$ git push origin master\n```\n\n刷新GitHub上内容，内容与本地库一致，本地内容成功推送到可远程库\n\n#### 先有远程仓库\n\n* 1. 在GitHub上创建仓库testgit2\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502172525.png)\n\n* 2. 在本地clone远程库的内容, 注意clone下来内容会在当前路径生成新文件夹testgit2\n\n```shell\n$ git clone https://github.com/hyman213/testgit2.git\n```\n\n* 3. 测试在本地增加readme.txt文件，并上传推送到远程库\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502173248.png)\n\n\n\n## 分支-branch\n\n> 每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支\n\n\n\n用到的命令有\n\n```shell\n# 创建分支dev\ngit branch dev\n# 切换到dev分支\ngit checkout dev\n# 上面两个命令合并\ngit checkout -b dev\n# 查看分支(列出所有分支,当前分支会添加一个星号)\ngit branch\n# 合并分支(将dev分支上的更新合并到当前分支)\ngit merge dev\n# 删除分支\ngit branch -d dev\n```\n\n\n\n### 创建分支\n\n\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502223958.png)\n\n切换到dev分支，然后在dev分支上进行修改。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502225423.png)\n\n切换到master分支，查看readme.txt文件。内容没有修改\n\n### 合并/删除分支\n\n将dev分支上的修改合并到master分支上\n\n![1556808994739](C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556808994739.png)\n\n通常合并分支时，git一般使用\"Fast forward\"模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式\n\n禁用”Fast forward”模式合并分支\n\n```shell\ngit merge --no-ff -m \"merge with mo-ff\" dev\n```\n\n### 解决分支冲突\n\n新建分支branch1,在branch1分支和master分支分别修改readme.txt文件并提交。然后将branch1分支的修改合并到master分支。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502231618.png)\n\n查看冲突并解决冲突后，再次提交文件\n\n![1556810416998](C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556810416998.png)\n\n### 分支管理\n\n首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来\n\n> bug分支: 在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。\n\n在dev分支修改readme.txt的内容，然后紧急有个bug需要修复, 需要新增分支在master基础上进行修复。需要先将dev分支上的修改隐藏\n\n```shell\n# 将当前分支的修改隐藏\ngit stash\n# 列出隐藏的修改\ngit stash list\n# 恢复隐藏的修改\ngit stash apply\n# 删除stash\ngit stash drop\n# 恢复的同时删除\ngit stash pop\n```\n\n## 多人协作\n\n### 查看远程库信息\n\n```shell\ngit remote\n# 详细信息\ngit remote -v\n```\n\n### 推送分支\n\n推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支\n\n```shell\n# 推送master分支\ngit push origin master\n# 推送dev分支\ngit push origin dev\n```\n\n修改dev分支的内容，并将dev分支推送到远程库，结果远程库会新增dev分支\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000207.png)\n\n\n\ngitHub上新增分支dev\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000251.png)\n\n\n\nmaster分支是主分支，因此要时刻与远程同步。\n\n一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。\n\n### 抓取分支\n\n将远程的origin的dev分支同步到本地\n\n```shell\ngit checkout -b dev origin/dev\n```\n\n现在就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库。\n\n```shell\ngit push origin dev\n```\n\n抓取远程仓库\n\n```shell\ngit pull\n# 指定den分支与远程origin/dev分支的链接\ngit branch --set-upstream-to dev origin/dev\n```\n\n\n\n多人协作工作模式一般是这样的：\n\n- 首先，可以试图用git push origin branch-name推送自己的修改.\n- 如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。\n- 如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。\n\n\n\n## GitHub-Git Cheat Sheet\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214432.png)\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214558.png)","source":"_posts/20190507-Git学习笔记.md","raw":"---\ntitle: Git学习笔记\ndate: 2019-05-07 21:37:56\ntags: Git\ncategory: \n - 技术\n - 开发工具\n---\n\n\nGit是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。\n\n<!--more-->\n\n## Git是什么\n\nGit是分布式版本控制系统\n官网:[https://git-scm.com/](https://git-scm.com/)\n\n### 工作原理 / 流程\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502000850.png)\n\n* Workspace: 工作区\n* Index / Stage: 暂存区\n* Repository: 仓库区（或本地仓库）\n* Remote: 远程仓库\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502002525.png)\n\n### SVN与Git的主要区别\n\nSVN-集中式版本控制系统，版本库放在中央服务器。以中央服务器的版本为基准，干活前需要先同步中央服务器得到最新的版本，自己本地的更新也需要推送到中央服务器。\n\nGit是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。\n\n## Git安装使用\n\n### Git安装\n\n参照Git官网下载安装,安装完成后鼠标右键菜单多了2个选项\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502145216.png)\n\n### Git初始化用户信息\n\n设置用户全局配置：\n\n```shell\ngit config --global user.name \"[name]\"\nSets the name you want to attached to your transactions\n\ngit config --global user.email \"[email address]\"\nSets the email you want to attached to your transactions\n\ngit config --global color.ui auto\nEnables helpful colorization of command line output\n```\n\n查看用户信息配置\n\n```shell\ngit config user.name\ngit config user.email\n```\n\n### GitHub配置SSH公钥\n\n```shell\nssh-keygen -t rsa -C '[email address using in github]'\n```\n\n* 在Git Bash输入以上命令后，回车后再按三个回车(默认存储位置，密码为空，确认密码)。\n\n* 将上一步生成的公钥路径：C:\\Users\\你的用户名\\\\.ssh。id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n* 将生成的公钥(id_rsa.pub)添加到GitHub:选择头像-->Settings-->SSH and GPG keys\n\n### [Git GUI Clients](https://git-scm.com/downloads/guis)\n\n* GitHub Desktop\n* TortoiseGit\n* Git Extensions\n* ...\n\n## Git管理代码仓库\n\n### 创建版本库\n\nRepository可以理解为一个目录，这个目录里面的所有文件都可以被Git管理起来。\n\n```shell\n$ mkdir testgit\n$ cd testgit/\n$ git init\nInitialized empty Git repository in D:/WorkSpaces/testgit/.git/\n```\n\n执行上面的操作，gittest就成为了一个Git仓库。在testgit目录下自动新增了一个.git文件夹\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502150628.png)\n\n新建readme.txt文件并提交\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502151123.png)\n\n继续修改readme.txt文件后，提交修改\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502152011.png)\n\n发现每次都会有warning: LF will be replaced by CRLF in readme.txt.提示。\n\n原因是不同操作系统中换行符的标识不同\n\n* CRLF->Windows-style\n\n* LF->Unix Style\n\n* CR->Mac Style\n\n可通过如下命令进行转换设置\n\n```shell\ngit config --global core.autocrlf true/false/inout\n```\n\n* true，添加文件到git仓库时，git将其视为文本文件。他将把crlf变成lf\n* false，line-endings将不做转换操作。文本文件保持原来的样子。\n* input，添加文件git仓库石，git把crlf编程lf。当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置\n\n### 版本回退\n\n继续修改readme.txt文件，新增\"33333333\"并提交\n\n查看修改的历史记录\n\n```shell\ngit log\ngit log --pretty=oneline\ngit reflog\n```\n\ngit log 与git reflog的区别\n\n1) git log: commit 的版本日志 包含提交的版本 操作者 日期 (方便查看commit的版本,但是版本回退后,使用git log 看不到回退版本号之后的版本记录) \n\n2) git reflog: 使用git 命令进行操作的日志  包括当前步骤所在哪个版本(一个commit 产生一个版本, 指定版本回退只能回退到该commit) 以及操作的具体内容\n\n版本回退后,仍然可以看到所有的版本记录 方便查看每个操作步骤所在的版本,可以根据版本号自由前进后退\n\n版本回退操作\n\n```shell\ngit reset --hard HEAD^\ngit reset --hard HEAD^^\ngit reset --hard HEAD~100\ngit reset --hard '版本号'\n```\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502155810.png)\n\n### 撤销和删除文件\n\n#### 撤销修改\n\n```shell\n# 丢弃工作区的修改。--很重要，没有--的话命令就变成创建分支了\ngit checkout -- file\n```\n\n有2种情况：\n\n* 文件修改后，还没有放到暂存区，使用撤销修改就回到和版本库一模一样的状态\n* 另外一种是文件的修改已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162025.png)\n\n#### 删除文件\n\n删除文件后再commit到git，如果删除并提交到暂存区后，可执行checkout操作恢复删除的文件\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162924.png)\n\n\n\n## 远程仓库\n\n### 注册GitHub，并在本地创建SSH添加到GitHub \n\n操作参照步骤2-3\n\n### 添加远程库\n\n#### 本地先有仓库，然后关联到远程库\n\n* 1. 在GitHub上创建仓库\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171256.png)\n\n* 2. 在本地仓库目录下运行命令\n\n```shell\ngit remote add origin https://github.com/hyman213/testgit.git\n# 第一次推送\ngit push -u origin master\n# 之后的推送\ngit push origin master\n```\n\n我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171627.png)\n\n此时本地仓库的内容就上传到了远程库\n\n再次修改本地库的readme.txt文件，测试上传更新到远程库\n\n```shell\n$ vi readme.txt\n$ git status\n$ git add readme.txt\n$ git commit -m '增加了55555555和66666666'\n$ git push origin master\n```\n\n刷新GitHub上内容，内容与本地库一致，本地内容成功推送到可远程库\n\n#### 先有远程仓库\n\n* 1. 在GitHub上创建仓库testgit2\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502172525.png)\n\n* 2. 在本地clone远程库的内容, 注意clone下来内容会在当前路径生成新文件夹testgit2\n\n```shell\n$ git clone https://github.com/hyman213/testgit2.git\n```\n\n* 3. 测试在本地增加readme.txt文件，并上传推送到远程库\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502173248.png)\n\n\n\n## 分支-branch\n\n> 每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支\n\n\n\n用到的命令有\n\n```shell\n# 创建分支dev\ngit branch dev\n# 切换到dev分支\ngit checkout dev\n# 上面两个命令合并\ngit checkout -b dev\n# 查看分支(列出所有分支,当前分支会添加一个星号)\ngit branch\n# 合并分支(将dev分支上的更新合并到当前分支)\ngit merge dev\n# 删除分支\ngit branch -d dev\n```\n\n\n\n### 创建分支\n\n\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502223958.png)\n\n切换到dev分支，然后在dev分支上进行修改。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502225423.png)\n\n切换到master分支，查看readme.txt文件。内容没有修改\n\n### 合并/删除分支\n\n将dev分支上的修改合并到master分支上\n\n![1556808994739](C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556808994739.png)\n\n通常合并分支时，git一般使用\"Fast forward\"模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式\n\n禁用”Fast forward”模式合并分支\n\n```shell\ngit merge --no-ff -m \"merge with mo-ff\" dev\n```\n\n### 解决分支冲突\n\n新建分支branch1,在branch1分支和master分支分别修改readme.txt文件并提交。然后将branch1分支的修改合并到master分支。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502231618.png)\n\n查看冲突并解决冲突后，再次提交文件\n\n![1556810416998](C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556810416998.png)\n\n### 分支管理\n\n首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来\n\n> bug分支: 在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。\n\n在dev分支修改readme.txt的内容，然后紧急有个bug需要修复, 需要新增分支在master基础上进行修复。需要先将dev分支上的修改隐藏\n\n```shell\n# 将当前分支的修改隐藏\ngit stash\n# 列出隐藏的修改\ngit stash list\n# 恢复隐藏的修改\ngit stash apply\n# 删除stash\ngit stash drop\n# 恢复的同时删除\ngit stash pop\n```\n\n## 多人协作\n\n### 查看远程库信息\n\n```shell\ngit remote\n# 详细信息\ngit remote -v\n```\n\n### 推送分支\n\n推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支\n\n```shell\n# 推送master分支\ngit push origin master\n# 推送dev分支\ngit push origin dev\n```\n\n修改dev分支的内容，并将dev分支推送到远程库，结果远程库会新增dev分支\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000207.png)\n\n\n\ngitHub上新增分支dev\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000251.png)\n\n\n\nmaster分支是主分支，因此要时刻与远程同步。\n\n一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。\n\n### 抓取分支\n\n将远程的origin的dev分支同步到本地\n\n```shell\ngit checkout -b dev origin/dev\n```\n\n现在就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库。\n\n```shell\ngit push origin dev\n```\n\n抓取远程仓库\n\n```shell\ngit pull\n# 指定den分支与远程origin/dev分支的链接\ngit branch --set-upstream-to dev origin/dev\n```\n\n\n\n多人协作工作模式一般是这样的：\n\n- 首先，可以试图用git push origin branch-name推送自己的修改.\n- 如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。\n- 如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。\n\n\n\n## GitHub-Git Cheat Sheet\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214432.png)\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214558.png)","slug":"Git学习笔记","published":1,"updated":"2019-10-27T13:00:36.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxck80004d4kpp9hskq56","content":"<p>Git是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。</p>\n<a id=\"more\"></a>\n<h2 id=\"Git是什么\"><a href=\"#Git是什么\" class=\"headerlink\" title=\"Git是什么\"></a>Git是什么</h2><p>Git是分布式版本控制系统<br>官网:<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h3 id=\"工作原理-流程\"><a href=\"#工作原理-流程\" class=\"headerlink\" title=\"工作原理 / 流程\"></a>工作原理 / 流程</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502000850.png\" alt></p>\n<ul>\n<li>Workspace: 工作区</li>\n<li>Index / Stage: 暂存区</li>\n<li>Repository: 仓库区（或本地仓库）</li>\n<li>Remote: 远程仓库</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502002525.png\" alt></p>\n<h3 id=\"SVN与Git的主要区别\"><a href=\"#SVN与Git的主要区别\" class=\"headerlink\" title=\"SVN与Git的主要区别\"></a>SVN与Git的主要区别</h3><p>SVN-集中式版本控制系统，版本库放在中央服务器。以中央服务器的版本为基准，干活前需要先同步中央服务器得到最新的版本，自己本地的更新也需要推送到中央服务器。</p>\n<p>Git是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。</p>\n<h2 id=\"Git安装使用\"><a href=\"#Git安装使用\" class=\"headerlink\" title=\"Git安装使用\"></a>Git安装使用</h2><h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>参照Git官网下载安装,安装完成后鼠标右键菜单多了2个选项</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502145216.png\" alt></p>\n<h3 id=\"Git初始化用户信息\"><a href=\"#Git初始化用户信息\" class=\"headerlink\" title=\"Git初始化用户信息\"></a>Git初始化用户信息</h3><p>设置用户全局配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name \"[name]\"</span><br><span class=\"line\">Sets the name you want to attached to your transactions</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email \"[email address]\"</span><br><span class=\"line\">Sets the email you want to attached to your transactions</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global color.ui auto</span><br><span class=\"line\">Enables helpful colorization of command line output</span><br></pre></td></tr></table></figure>\n<p>查看用户信息配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<h3 id=\"GitHub配置SSH公钥\"><a href=\"#GitHub配置SSH公钥\" class=\"headerlink\" title=\"GitHub配置SSH公钥\"></a>GitHub配置SSH公钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C '[email address using in github]'</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>在Git Bash输入以上命令后，回车后再按三个回车(默认存储位置，密码为空，确认密码)。</p>\n</li>\n<li><p>将上一步生成的公钥路径：C:\\Users\\你的用户名\\.ssh。id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n</li>\n<li><p>将生成的公钥(id_rsa.pub)添加到GitHub:选择头像–&gt;Settings–&gt;SSH and GPG keys</p>\n</li>\n</ul>\n<h3 id=\"Git-GUI-Clients\"><a href=\"#Git-GUI-Clients\" class=\"headerlink\" title=\"Git GUI Clients\"></a><a href=\"https://git-scm.com/downloads/guis\" target=\"_blank\" rel=\"noopener\">Git GUI Clients</a></h3><ul>\n<li>GitHub Desktop</li>\n<li>TortoiseGit</li>\n<li>Git Extensions</li>\n<li>…</li>\n</ul>\n<h2 id=\"Git管理代码仓库\"><a href=\"#Git管理代码仓库\" class=\"headerlink\" title=\"Git管理代码仓库\"></a>Git管理代码仓库</h2><h3 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h3><p>Repository可以理解为一个目录，这个目录里面的所有文件都可以被Git管理起来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir testgit</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> testgit/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br><span class=\"line\">Initialized empty Git repository in D:/WorkSpaces/testgit/.git/</span><br></pre></td></tr></table></figure>\n<p>执行上面的操作，gittest就成为了一个Git仓库。在testgit目录下自动新增了一个.git文件夹</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502150628.png\" alt></p>\n<p>新建readme.txt文件并提交</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502151123.png\" alt></p>\n<p>继续修改readme.txt文件后，提交修改</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502152011.png\" alt></p>\n<p>发现每次都会有warning: LF will be replaced by CRLF in readme.txt.提示。</p>\n<p>原因是不同操作系统中换行符的标识不同</p>\n<ul>\n<li><p>CRLF-&gt;Windows-style</p>\n</li>\n<li><p>LF-&gt;Unix Style</p>\n</li>\n<li><p>CR-&gt;Mac Style</p>\n</li>\n</ul>\n<p>可通过如下命令进行转换设置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf true/false/inout</span><br></pre></td></tr></table></figure>\n<ul>\n<li>true，添加文件到git仓库时，git将其视为文本文件。他将把crlf变成lf</li>\n<li>false，line-endings将不做转换操作。文本文件保持原来的样子。</li>\n<li>input，添加文件git仓库石，git把crlf编程lf。当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置</li>\n</ul>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>继续修改readme.txt文件，新增”33333333”并提交</p>\n<p>查看修改的历史记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git log --pretty=oneline</span><br><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<p>git log 与git reflog的区别</p>\n<p>1) git log: commit 的版本日志 包含提交的版本 操作者 日期 (方便查看commit的版本,但是版本回退后,使用git log 看不到回退版本号之后的版本记录) </p>\n<p>2) git reflog: 使用git 命令进行操作的日志  包括当前步骤所在哪个版本(一个commit 产生一个版本, 指定版本回退只能回退到该commit) 以及操作的具体内容</p>\n<p>版本回退后,仍然可以看到所有的版本记录 方便查看每个操作步骤所在的版本,可以根据版本号自由前进后退</p>\n<p>版本回退操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br><span class=\"line\">git reset --hard HEAD^^</span><br><span class=\"line\">git reset --hard HEAD~100</span><br><span class=\"line\">git reset --hard '版本号'</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502155810.png\" alt></p>\n<h3 id=\"撤销和删除文件\"><a href=\"#撤销和删除文件\" class=\"headerlink\" title=\"撤销和删除文件\"></a>撤销和删除文件</h3><h4 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 丢弃工作区的修改。--很重要，没有--的话命令就变成创建分支了</span></span><br><span class=\"line\">git checkout -- file</span><br></pre></td></tr></table></figure>\n<p>有2种情况：</p>\n<ul>\n<li>文件修改后，还没有放到暂存区，使用撤销修改就回到和版本库一模一样的状态</li>\n<li>另外一种是文件的修改已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162025.png\" alt></p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p>删除文件后再commit到git，如果删除并提交到暂存区后，可执行checkout操作恢复删除的文件</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162924.png\" alt></p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"注册GitHub，并在本地创建SSH添加到GitHub\"><a href=\"#注册GitHub，并在本地创建SSH添加到GitHub\" class=\"headerlink\" title=\"注册GitHub，并在本地创建SSH添加到GitHub\"></a>注册GitHub，并在本地创建SSH添加到GitHub</h3><p>操作参照步骤2-3</p>\n<h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><h4 id=\"本地先有仓库，然后关联到远程库\"><a href=\"#本地先有仓库，然后关联到远程库\" class=\"headerlink\" title=\"本地先有仓库，然后关联到远程库\"></a>本地先有仓库，然后关联到远程库</h4><ul>\n<li><ol>\n<li>在GitHub上创建仓库</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171256.png\" alt></p>\n<ul>\n<li><ol start=\"2\">\n<li>在本地仓库目录下运行命令</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/hyman213/testgit.git</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 第一次推送</span></span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 之后的推送</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171627.png\" alt></p>\n<p>此时本地仓库的内容就上传到了远程库</p>\n<p>再次修改本地库的readme.txt文件，测试上传更新到远程库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">'增加了55555555和66666666'</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master</span></span><br></pre></td></tr></table></figure>\n<p>刷新GitHub上内容，内容与本地库一致，本地内容成功推送到可远程库</p>\n<h4 id=\"先有远程仓库\"><a href=\"#先有远程仓库\" class=\"headerlink\" title=\"先有远程仓库\"></a>先有远程仓库</h4><ul>\n<li><ol>\n<li>在GitHub上创建仓库testgit2</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502172525.png\" alt></p>\n<ul>\n<li><ol start=\"2\">\n<li>在本地clone远程库的内容, 注意clone下来内容会在当前路径生成新文件夹testgit2</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/hyman213/testgit2.git</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"3\">\n<li>测试在本地增加readme.txt文件，并上传推送到远程库</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502173248.png\" alt></p>\n<h2 id=\"分支-branch\"><a href=\"#分支-branch\" class=\"headerlink\" title=\"分支-branch\"></a>分支-branch</h2><blockquote>\n<p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支</p>\n</blockquote>\n<p>用到的命令有</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建分支dev</span></span><br><span class=\"line\">git branch dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到dev分支</span></span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上面两个命令合并</span></span><br><span class=\"line\">git checkout -b dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看分支(列出所有分支,当前分支会添加一个星号)</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并分支(将dev分支上的更新合并到当前分支)</span></span><br><span class=\"line\">git merge dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除分支</span></span><br><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502223958.png\" alt></p>\n<p>切换到dev分支，然后在dev分支上进行修改。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502225423.png\" alt></p>\n<p>切换到master分支，查看readme.txt文件。内容没有修改</p>\n<h3 id=\"合并-删除分支\"><a href=\"#合并-删除分支\" class=\"headerlink\" title=\"合并/删除分支\"></a>合并/删除分支</h3><p>将dev分支上的修改合并到master分支上</p>\n<p><img src=\"C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556808994739.png\" alt=\"1556808994739\"></p>\n<p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式</p>\n<p>禁用”Fast forward”模式合并分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m \"merge with mo-ff\" dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决分支冲突\"><a href=\"#解决分支冲突\" class=\"headerlink\" title=\"解决分支冲突\"></a>解决分支冲突</h3><p>新建分支branch1,在branch1分支和master分支分别修改readme.txt文件并提交。然后将branch1分支的修改合并到master分支。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502231618.png\" alt></p>\n<p>查看冲突并解决冲突后，再次提交文件</p>\n<p><img src=\"C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556810416998.png\" alt=\"1556810416998\"></p>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><p>首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来</p>\n<blockquote>\n<p>bug分支: 在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p>\n</blockquote>\n<p>在dev分支修改readme.txt的内容，然后紧急有个bug需要修复, 需要新增分支在master基础上进行修复。需要先将dev分支上的修改隐藏</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将当前分支的修改隐藏</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出隐藏的修改</span></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复隐藏的修改</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除stash</span></span><br><span class=\"line\">git stash drop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复的同时删除</span></span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h2><h3 id=\"查看远程库信息\"><a href=\"#查看远程库信息\" class=\"headerlink\" title=\"查看远程库信息\"></a>查看远程库信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 详细信息</span></span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h3><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送master分支</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送dev分支</span></span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n<p>修改dev分支的内容，并将dev分支推送到远程库，结果远程库会新增dev分支</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000207.png\" alt></p>\n<p>gitHub上新增分支dev</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000251.png\" alt></p>\n<p>master分支是主分支，因此要时刻与远程同步。</p>\n<p>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p>\n<h3 id=\"抓取分支\"><a href=\"#抓取分支\" class=\"headerlink\" title=\"抓取分支\"></a>抓取分支</h3><p>将远程的origin的dev分支同步到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>\n<p>现在就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n<p>抓取远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定den分支与远程origin/dev分支的链接</span></span><br><span class=\"line\">git branch --set-upstream-to dev origin/dev</span><br></pre></td></tr></table></figure>\n<p>多人协作工作模式一般是这样的：</p>\n<ul>\n<li>首先，可以试图用git push origin branch-name推送自己的修改.</li>\n<li>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</li>\n<li>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</li>\n</ul>\n<h2 id=\"GitHub-Git-Cheat-Sheet\"><a href=\"#GitHub-Git-Cheat-Sheet\" class=\"headerlink\" title=\"GitHub-Git Cheat Sheet\"></a>GitHub-Git Cheat Sheet</h2><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214432.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214558.png\" alt></p>\n","site":{"data":{}},"length":4422,"excerpt":"<p>Git是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。</p>","more":"<h2 id=\"Git是什么\"><a href=\"#Git是什么\" class=\"headerlink\" title=\"Git是什么\"></a>Git是什么</h2><p>Git是分布式版本控制系统<br>官网:<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h3 id=\"工作原理-流程\"><a href=\"#工作原理-流程\" class=\"headerlink\" title=\"工作原理 / 流程\"></a>工作原理 / 流程</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502000850.png\" alt></p>\n<ul>\n<li>Workspace: 工作区</li>\n<li>Index / Stage: 暂存区</li>\n<li>Repository: 仓库区（或本地仓库）</li>\n<li>Remote: 远程仓库</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502002525.png\" alt></p>\n<h3 id=\"SVN与Git的主要区别\"><a href=\"#SVN与Git的主要区别\" class=\"headerlink\" title=\"SVN与Git的主要区别\"></a>SVN与Git的主要区别</h3><p>SVN-集中式版本控制系统，版本库放在中央服务器。以中央服务器的版本为基准，干活前需要先同步中央服务器得到最新的版本，自己本地的更新也需要推送到中央服务器。</p>\n<p>Git是分布式版本控制系统，Git中每个人的电脑就是一个完整的版本库，当多人协作时，只需把各自的修改推送给对方。</p>\n<h2 id=\"Git安装使用\"><a href=\"#Git安装使用\" class=\"headerlink\" title=\"Git安装使用\"></a>Git安装使用</h2><h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>参照Git官网下载安装,安装完成后鼠标右键菜单多了2个选项</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502145216.png\" alt></p>\n<h3 id=\"Git初始化用户信息\"><a href=\"#Git初始化用户信息\" class=\"headerlink\" title=\"Git初始化用户信息\"></a>Git初始化用户信息</h3><p>设置用户全局配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name \"[name]\"</span><br><span class=\"line\">Sets the name you want to attached to your transactions</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email \"[email address]\"</span><br><span class=\"line\">Sets the email you want to attached to your transactions</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global color.ui auto</span><br><span class=\"line\">Enables helpful colorization of command line output</span><br></pre></td></tr></table></figure>\n<p>查看用户信息配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<h3 id=\"GitHub配置SSH公钥\"><a href=\"#GitHub配置SSH公钥\" class=\"headerlink\" title=\"GitHub配置SSH公钥\"></a>GitHub配置SSH公钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C '[email address using in github]'</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>在Git Bash输入以上命令后，回车后再按三个回车(默认存储位置，密码为空，确认密码)。</p>\n</li>\n<li><p>将上一步生成的公钥路径：C:\\Users\\你的用户名\\.ssh。id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n</li>\n<li><p>将生成的公钥(id_rsa.pub)添加到GitHub:选择头像–&gt;Settings–&gt;SSH and GPG keys</p>\n</li>\n</ul>\n<h3 id=\"Git-GUI-Clients\"><a href=\"#Git-GUI-Clients\" class=\"headerlink\" title=\"Git GUI Clients\"></a><a href=\"https://git-scm.com/downloads/guis\" target=\"_blank\" rel=\"noopener\">Git GUI Clients</a></h3><ul>\n<li>GitHub Desktop</li>\n<li>TortoiseGit</li>\n<li>Git Extensions</li>\n<li>…</li>\n</ul>\n<h2 id=\"Git管理代码仓库\"><a href=\"#Git管理代码仓库\" class=\"headerlink\" title=\"Git管理代码仓库\"></a>Git管理代码仓库</h2><h3 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h3><p>Repository可以理解为一个目录，这个目录里面的所有文件都可以被Git管理起来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir testgit</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> testgit/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br><span class=\"line\">Initialized empty Git repository in D:/WorkSpaces/testgit/.git/</span><br></pre></td></tr></table></figure>\n<p>执行上面的操作，gittest就成为了一个Git仓库。在testgit目录下自动新增了一个.git文件夹</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502150628.png\" alt></p>\n<p>新建readme.txt文件并提交</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502151123.png\" alt></p>\n<p>继续修改readme.txt文件后，提交修改</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502152011.png\" alt></p>\n<p>发现每次都会有warning: LF will be replaced by CRLF in readme.txt.提示。</p>\n<p>原因是不同操作系统中换行符的标识不同</p>\n<ul>\n<li><p>CRLF-&gt;Windows-style</p>\n</li>\n<li><p>LF-&gt;Unix Style</p>\n</li>\n<li><p>CR-&gt;Mac Style</p>\n</li>\n</ul>\n<p>可通过如下命令进行转换设置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf true/false/inout</span><br></pre></td></tr></table></figure>\n<ul>\n<li>true，添加文件到git仓库时，git将其视为文本文件。他将把crlf变成lf</li>\n<li>false，line-endings将不做转换操作。文本文件保持原来的样子。</li>\n<li>input，添加文件git仓库石，git把crlf编程lf。当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置</li>\n</ul>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>继续修改readme.txt文件，新增”33333333”并提交</p>\n<p>查看修改的历史记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git log --pretty=oneline</span><br><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<p>git log 与git reflog的区别</p>\n<p>1) git log: commit 的版本日志 包含提交的版本 操作者 日期 (方便查看commit的版本,但是版本回退后,使用git log 看不到回退版本号之后的版本记录) </p>\n<p>2) git reflog: 使用git 命令进行操作的日志  包括当前步骤所在哪个版本(一个commit 产生一个版本, 指定版本回退只能回退到该commit) 以及操作的具体内容</p>\n<p>版本回退后,仍然可以看到所有的版本记录 方便查看每个操作步骤所在的版本,可以根据版本号自由前进后退</p>\n<p>版本回退操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br><span class=\"line\">git reset --hard HEAD^^</span><br><span class=\"line\">git reset --hard HEAD~100</span><br><span class=\"line\">git reset --hard '版本号'</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502155810.png\" alt></p>\n<h3 id=\"撤销和删除文件\"><a href=\"#撤销和删除文件\" class=\"headerlink\" title=\"撤销和删除文件\"></a>撤销和删除文件</h3><h4 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 丢弃工作区的修改。--很重要，没有--的话命令就变成创建分支了</span></span><br><span class=\"line\">git checkout -- file</span><br></pre></td></tr></table></figure>\n<p>有2种情况：</p>\n<ul>\n<li>文件修改后，还没有放到暂存区，使用撤销修改就回到和版本库一模一样的状态</li>\n<li>另外一种是文件的修改已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162025.png\" alt></p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p>删除文件后再commit到git，如果删除并提交到暂存区后，可执行checkout操作恢复删除的文件</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502162924.png\" alt></p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"注册GitHub，并在本地创建SSH添加到GitHub\"><a href=\"#注册GitHub，并在本地创建SSH添加到GitHub\" class=\"headerlink\" title=\"注册GitHub，并在本地创建SSH添加到GitHub\"></a>注册GitHub，并在本地创建SSH添加到GitHub</h3><p>操作参照步骤2-3</p>\n<h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><h4 id=\"本地先有仓库，然后关联到远程库\"><a href=\"#本地先有仓库，然后关联到远程库\" class=\"headerlink\" title=\"本地先有仓库，然后关联到远程库\"></a>本地先有仓库，然后关联到远程库</h4><ul>\n<li><ol>\n<li>在GitHub上创建仓库</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171256.png\" alt></p>\n<ul>\n<li><ol start=\"2\">\n<li>在本地仓库目录下运行命令</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/hyman213/testgit.git</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 第一次推送</span></span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 之后的推送</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502171627.png\" alt></p>\n<p>此时本地仓库的内容就上传到了远程库</p>\n<p>再次修改本地库的readme.txt文件，测试上传更新到远程库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">'增加了55555555和66666666'</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master</span></span><br></pre></td></tr></table></figure>\n<p>刷新GitHub上内容，内容与本地库一致，本地内容成功推送到可远程库</p>\n<h4 id=\"先有远程仓库\"><a href=\"#先有远程仓库\" class=\"headerlink\" title=\"先有远程仓库\"></a>先有远程仓库</h4><ul>\n<li><ol>\n<li>在GitHub上创建仓库testgit2</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502172525.png\" alt></p>\n<ul>\n<li><ol start=\"2\">\n<li>在本地clone远程库的内容, 注意clone下来内容会在当前路径生成新文件夹testgit2</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/hyman213/testgit2.git</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"3\">\n<li>测试在本地增加readme.txt文件，并上传推送到远程库</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502173248.png\" alt></p>\n<h2 id=\"分支-branch\"><a href=\"#分支-branch\" class=\"headerlink\" title=\"分支-branch\"></a>分支-branch</h2><blockquote>\n<p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支</p>\n</blockquote>\n<p>用到的命令有</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建分支dev</span></span><br><span class=\"line\">git branch dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到dev分支</span></span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上面两个命令合并</span></span><br><span class=\"line\">git checkout -b dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看分支(列出所有分支,当前分支会添加一个星号)</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并分支(将dev分支上的更新合并到当前分支)</span></span><br><span class=\"line\">git merge dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除分支</span></span><br><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502223958.png\" alt></p>\n<p>切换到dev分支，然后在dev分支上进行修改。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502225423.png\" alt></p>\n<p>切换到master分支，查看readme.txt文件。内容没有修改</p>\n<h3 id=\"合并-删除分支\"><a href=\"#合并-删除分支\" class=\"headerlink\" title=\"合并/删除分支\"></a>合并/删除分支</h3><p>将dev分支上的修改合并到master分支上</p>\n<p><img src=\"C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556808994739.png\" alt=\"1556808994739\"></p>\n<p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式</p>\n<p>禁用”Fast forward”模式合并分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m \"merge with mo-ff\" dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决分支冲突\"><a href=\"#解决分支冲突\" class=\"headerlink\" title=\"解决分支冲突\"></a>解决分支冲突</h3><p>新建分支branch1,在branch1分支和master分支分别修改readme.txt文件并提交。然后将branch1分支的修改合并到master分支。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190502231618.png\" alt></p>\n<p>查看冲突并解决冲突后，再次提交文件</p>\n<p><img src=\"C:\\Users\\idobe\\AppData\\Roaming\\Typora\\typora-user-images\\1556810416998.png\" alt=\"1556810416998\"></p>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><p>首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来</p>\n<blockquote>\n<p>bug分支: 在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p>\n</blockquote>\n<p>在dev分支修改readme.txt的内容，然后紧急有个bug需要修复, 需要新增分支在master基础上进行修复。需要先将dev分支上的修改隐藏</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将当前分支的修改隐藏</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出隐藏的修改</span></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复隐藏的修改</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除stash</span></span><br><span class=\"line\">git stash drop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 恢复的同时删除</span></span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h2><h3 id=\"查看远程库信息\"><a href=\"#查看远程库信息\" class=\"headerlink\" title=\"查看远程库信息\"></a>查看远程库信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 详细信息</span></span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h3><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送master分支</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送dev分支</span></span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n<p>修改dev分支的内容，并将dev分支推送到远程库，结果远程库会新增dev分支</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000207.png\" alt></p>\n<p>gitHub上新增分支dev</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190503000251.png\" alt></p>\n<p>master分支是主分支，因此要时刻与远程同步。</p>\n<p>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p>\n<h3 id=\"抓取分支\"><a href=\"#抓取分支\" class=\"headerlink\" title=\"抓取分支\"></a>抓取分支</h3><p>将远程的origin的dev分支同步到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>\n<p>现在就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n<p>抓取远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定den分支与远程origin/dev分支的链接</span></span><br><span class=\"line\">git branch --set-upstream-to dev origin/dev</span><br></pre></td></tr></table></figure>\n<p>多人协作工作模式一般是这样的：</p>\n<ul>\n<li>首先，可以试图用git push origin branch-name推送自己的修改.</li>\n<li>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</li>\n<li>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</li>\n</ul>\n<h2 id=\"GitHub-Git-Cheat-Sheet\"><a href=\"#GitHub-Git-Cheat-Sheet\" class=\"headerlink\" title=\"GitHub-Git Cheat Sheet\"></a>GitHub-Git Cheat Sheet</h2><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214432.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190507214558.png\" alt></p>"},{"title":"使用不同json包对象转Json过程中的大小写问题","date":"2019-05-20T13:29:22.000Z","_content":"\n\n对象转json字符串时，针对对象属性不同的大小写，常用的两种工具类json-lib和fastjson转换的结果有差异。记录于此，作为今后的参考。\n\n<!--more-->\n\n## `net.sf.json-lib` 与 `com.alibaba.fastjson`的不同效果\n\n### 导入jar包\n\n这里同时导入两个json工具包\n\n```xml\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.4</version>\n</dependency>\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.45</version>\n</dependency>\n```\n\n### 对象采用驼峰命名法\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    private Integer id;\n\n    private String name;\n\n    private String sex;\n\n    private Integer age;\n\n    private String companyName;\n\n}\n\n```\n\n#### 使用`net.sf.json-lib`\n\n```java\nimport net.sf.json.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user = new User(1, \"zhangsan\", \"Male\", 18, \"华为\");\n        JSONObject jsonObject = JSONObject.fromObject(user);\n        System.out.println(jsonObject.toString());\n    }\n}\n\n结果：(与对象名一致，没毛病)\n{\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"sex\":\"Male\"}\n```\n\n#### 使用fastjson\n\n```java\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user = new User(1, \"zhangsan\", \"Male\", 18, \"华为\");\n        String jsonString = JSONObject.toJSONString(user);\n        System.out.println(jsonString);\n    }\n\n}\n结果：(与对象名一致，没毛病)\n{\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"sex\":\"Male\"}\n```\n\n### 对象首字母大写\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    private Integer Id;\n\n    private String Name;\n\n    private String Sex;\n\n    private Integer Age;\n\n    private String CompanyName;\n\n    private String Remark;\n\n}\n```\n\n#### 使用`net.sf.json-lib\n\n```java\nimport net.sf.json.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        JSONObject jsonObject1 = JSONObject.fromObject(user1);\n        JSONObject jsonObject2 = JSONObject.fromObject(user2);\n        System.out.println(\"user1  \" + jsonObject1.toString());\n        System.out.println(\"user2  \" + jsonObject2.toString());\n    }\n\n}\n\n结果: 首字母变成小写,保留了值为null的节点（0和\"\"）\nuser1  {\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"remark\":\"\",\"sex\":\"Male\"}\nuser2  {\"age\":0,\"companyName\":\"小米\",\"id\":2,\"name\":\"Lisi\",\"remark\":\"\",\"sex\":\"Female\"}\n```\n\n#### 使用fastjson\n\n```java\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        String jsonString1 = JSONObject.toJSONString(user1);\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果：首字母自动变成小写,自动去掉了值为null的节点(为\"\"的仍然保留)\nuser1  {\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"sex\":\"Male\"}\nuser2  {\"companyName\":\"小米\",\"id\":2,\"name\":\"Lisi\",\"remark\":\"\",\"sex\":\"Female\"}\n```\n\n如果需要一定按指定的字段名，可使用@JSONField\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    @JSONField(name = \"Id\")\n    private Integer Id;\n\n    @JSONField(name = \"Name\")\n    private String Name;\n\n    @JSONField(name = \"Sex\")\n    private String Sex;\n\n    @JSONField(name = \"Age\")\n    private Integer Age;\n\n    @JSONField(name = \"CompanyName\")\n    private String CompanyName;\n\n    @JSONField(name = \"Remark\")\n    private String Remark;\n\n}\n\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        String jsonString1 = JSONObject.toJSONString(user1);\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果: 按JSONField指定的name转json，自动去掉了值为null的节点(为\"\"的仍然保留)\nuser1  {\"Age\":18,\"CompanyName\":\"华为\",\"Id\":1,\"Name\":\"zhangsan\",\"Sex\":\"Male\"}\nuser2  {\"CompanyName\":\"小米\",\"Id\":2,\"Name\":\"Lisi\",\"Remark\":\"\",\"Sex\":\"Female\"}\n```\n\n### 对象属性全部大写\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    private Integer ID;\n\n    private String NAME;\n\n    private String SEX;\n\n    private Integer AGE;\n\n    private String COMPANYNAME;\n\n    private String REMARK;\n\n}\n\n```\n\n#### 使用`net.sf.json-lib\n\n```java\nimport net.sf.json.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        JSONObject jsonObject1 = JSONObject.fromObject(user1);\n        JSONObject jsonObject2 = JSONObject.fromObject(user2);\n        System.out.println(\"user1  \" + jsonObject1.toString());\n        System.out.println(\"user2  \" + jsonObject2.toString());\n    }\n\n}\n\n结果：首字母没有自动变成小写,保留了值为null的节点（0和\"\"）\nuser1  {\"AGE\":18,\"COMPANYNAME\":\"华为\",\"ID\":1,\"NAME\":\"zhangsan\",\"REMARK\":\"\",\"SEX\":\"Male\"}\nuser2  {\"AGE\":0,\"COMPANYNAME\":\"小米\",\"ID\":2,\"NAME\":\"Lisi\",\"REMARK\":\"\",\"SEX\":\"Female\"}\n\n```\n\n#### 使用fastjson\n\n```json\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        String jsonString1 = JSONObject.toJSONString(user1);\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果：首字母自动变成小写,自动去掉了值为null的节点(为\"\"的仍然保留)\nuser1  {\"aGE\":18,\"cOMPANYNAME\":\"华为\",\"iD\":1,\"nAME\":\"zhangsan\",\"sEX\":\"Male\"}\nuser2  {\"cOMPANYNAME\":\"小米\",\"iD\":2,\"nAME\":\"Lisi\",\"rEMARK\":\"\",\"sEX\":\"Female\"}\n\n```\n\n## 结论\n\n### fastjson\n\n1. 无论对象首字母是大写，或者是小写，转json字符串是都会将首字母自动变成小写。\n2. 默认会将值为null的节点忽略掉\n3. 可通过注解@JSONField，指定对象转json时的key\n\n### json-lib\n\n1. 只有在对象属性名全部为大写时，才不会将首字母变为小写，其他情况都会将首字母变成小写\n2. 依然会保留值为null的节点\n\n## 对Date类型的字段格式化的处理\n\n### fastjson\n\n默认会将时间转为毫秒值，可使用`JSONObject.toJSONStringWithDateFormat`或者在属性字段上使用`@JSONField(format = \"yyyy-MM-dd HH:mm:ss\")`\n\n```java\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.util.Date;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null, new Date());\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\", new Date());\n        String jsonString1 = JSONObject.toJSONStringWithDateFormat(user1, \"yyyy-MM-dd\");\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果：\nuser1  {\"Age\":18,\"CompanyName\":\"华为\",\"Id\":1,\"Name\":\"zhangsan\",\"Sex\":\"Male\",\"birthday\":\"2019-05-21\"}\nuser2  {\"CompanyName\":\"小米\",\"Id\":2,\"Name\":\"Lisi\",\"Remark\":\"\",\"Sex\":\"Female\",\"birthday\":1558398124477}\n```\n\n\n\n### json-lib\n\n默认会将Date类型的字段分解, 可通过传入`JsonConfig`并注册`JsonValueProcessor`解决这个问题\n\n```java\nimport net.sf.json.JSONObject;\nimport net.sf.json.JsonConfig;\n\nimport java.util.Date;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null, new Date());\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\", new Date());\n        JsonConfig jsonConfig = new JsonConfig();\n        jsonConfig.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor());\n        JSONObject jsonObject1 = JSONObject.fromObject(user1, jsonConfig);\n        JSONObject jsonObject2 = JSONObject.fromObject(user2);\n        System.out.println(\"user1  \" + jsonObject1.toString());\n        System.out.println(\"user2  \" + jsonObject2.toString());\n    }\n\n}\n\nuser1  {\"age\":18,\"birthday\":\"2019-05-21 08:30:53\",\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"remark\":\"\",\"sex\":\"Male\"}\nuser2  {\"age\":0,\"birthday\":{\"date\":21,\"day\":2,\"hours\":8,\"minutes\":30,\"month\":4,\"seconds\":53,\"time\":1558398653824,\"timezoneOffset\":-480,\"year\":119},\"companyName\":\"小米\",\"id\":2,\"name\":\"Lisi\",\"remark\":\"\",\"sex\":\"Female\"}\n\npublic class DateJsonValueProcessor implements JsonValueProcessor {\n\n    private String formatDateTime = \"yyyy-MM-dd HH:mm:ss\";\n\n    private String formatDate = \"yyyy-MM-dd\";\n\n    public DateJsonValueProcessor() {\n\n    }\n\n    public DateJsonValueProcessor(String format) {\n        this.formatDateTime = format;\n    }\n\n    @Override\n    public Object processArrayValue(Object value, JsonConfig jsonConfig) {\n        String[] obj = {};\n        if (value instanceof Date[]) {\n            SimpleDateFormat sf = new SimpleDateFormat(formatDateTime);\n            Date[] dates = (Date[]) value;\n            obj = new String[dates.length];\n            for (int i = 0; i < dates.length; i++) {\n                obj[i] = sf.format(dates[i]);\n            }\n        }\n        return obj;\n    }\n\n    @Override\n    public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) {\n        if (value instanceof Date) {\n            String str = \"\";\n            if (Objects.equals(key, \"checkDate\") || Objects.equals(key, \"validUntil\")) {\n                str = new SimpleDateFormat(formatDate).format((Date) value);\n            } else {\n                str = new SimpleDateFormat(formatDateTime).format((Date) value);\n            }\n            return str;\n        }\n        return value;\n    }\n}\n```\n\n","source":"_posts/20190520-使用不同json包对象转Json过程中的大小写问题.md","raw":"---\ntitle: 使用不同json包对象转Json过程中的大小写问题\ndate: 2019-05-20 21:29:22\ntags: 经验总结\ncategory: \n - 技术\n - Lesson-Learned\n---\n\n\n对象转json字符串时，针对对象属性不同的大小写，常用的两种工具类json-lib和fastjson转换的结果有差异。记录于此，作为今后的参考。\n\n<!--more-->\n\n## `net.sf.json-lib` 与 `com.alibaba.fastjson`的不同效果\n\n### 导入jar包\n\n这里同时导入两个json工具包\n\n```xml\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.4</version>\n</dependency>\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.45</version>\n</dependency>\n```\n\n### 对象采用驼峰命名法\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    private Integer id;\n\n    private String name;\n\n    private String sex;\n\n    private Integer age;\n\n    private String companyName;\n\n}\n\n```\n\n#### 使用`net.sf.json-lib`\n\n```java\nimport net.sf.json.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user = new User(1, \"zhangsan\", \"Male\", 18, \"华为\");\n        JSONObject jsonObject = JSONObject.fromObject(user);\n        System.out.println(jsonObject.toString());\n    }\n}\n\n结果：(与对象名一致，没毛病)\n{\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"sex\":\"Male\"}\n```\n\n#### 使用fastjson\n\n```java\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user = new User(1, \"zhangsan\", \"Male\", 18, \"华为\");\n        String jsonString = JSONObject.toJSONString(user);\n        System.out.println(jsonString);\n    }\n\n}\n结果：(与对象名一致，没毛病)\n{\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"sex\":\"Male\"}\n```\n\n### 对象首字母大写\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    private Integer Id;\n\n    private String Name;\n\n    private String Sex;\n\n    private Integer Age;\n\n    private String CompanyName;\n\n    private String Remark;\n\n}\n```\n\n#### 使用`net.sf.json-lib\n\n```java\nimport net.sf.json.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        JSONObject jsonObject1 = JSONObject.fromObject(user1);\n        JSONObject jsonObject2 = JSONObject.fromObject(user2);\n        System.out.println(\"user1  \" + jsonObject1.toString());\n        System.out.println(\"user2  \" + jsonObject2.toString());\n    }\n\n}\n\n结果: 首字母变成小写,保留了值为null的节点（0和\"\"）\nuser1  {\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"remark\":\"\",\"sex\":\"Male\"}\nuser2  {\"age\":0,\"companyName\":\"小米\",\"id\":2,\"name\":\"Lisi\",\"remark\":\"\",\"sex\":\"Female\"}\n```\n\n#### 使用fastjson\n\n```java\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        String jsonString1 = JSONObject.toJSONString(user1);\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果：首字母自动变成小写,自动去掉了值为null的节点(为\"\"的仍然保留)\nuser1  {\"age\":18,\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"sex\":\"Male\"}\nuser2  {\"companyName\":\"小米\",\"id\":2,\"name\":\"Lisi\",\"remark\":\"\",\"sex\":\"Female\"}\n```\n\n如果需要一定按指定的字段名，可使用@JSONField\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    @JSONField(name = \"Id\")\n    private Integer Id;\n\n    @JSONField(name = \"Name\")\n    private String Name;\n\n    @JSONField(name = \"Sex\")\n    private String Sex;\n\n    @JSONField(name = \"Age\")\n    private Integer Age;\n\n    @JSONField(name = \"CompanyName\")\n    private String CompanyName;\n\n    @JSONField(name = \"Remark\")\n    private String Remark;\n\n}\n\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        String jsonString1 = JSONObject.toJSONString(user1);\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果: 按JSONField指定的name转json，自动去掉了值为null的节点(为\"\"的仍然保留)\nuser1  {\"Age\":18,\"CompanyName\":\"华为\",\"Id\":1,\"Name\":\"zhangsan\",\"Sex\":\"Male\"}\nuser2  {\"CompanyName\":\"小米\",\"Id\":2,\"Name\":\"Lisi\",\"Remark\":\"\",\"Sex\":\"Female\"}\n```\n\n### 对象属性全部大写\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    private Integer ID;\n\n    private String NAME;\n\n    private String SEX;\n\n    private Integer AGE;\n\n    private String COMPANYNAME;\n\n    private String REMARK;\n\n}\n\n```\n\n#### 使用`net.sf.json-lib\n\n```java\nimport net.sf.json.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        JSONObject jsonObject1 = JSONObject.fromObject(user1);\n        JSONObject jsonObject2 = JSONObject.fromObject(user2);\n        System.out.println(\"user1  \" + jsonObject1.toString());\n        System.out.println(\"user2  \" + jsonObject2.toString());\n    }\n\n}\n\n结果：首字母没有自动变成小写,保留了值为null的节点（0和\"\"）\nuser1  {\"AGE\":18,\"COMPANYNAME\":\"华为\",\"ID\":1,\"NAME\":\"zhangsan\",\"REMARK\":\"\",\"SEX\":\"Male\"}\nuser2  {\"AGE\":0,\"COMPANYNAME\":\"小米\",\"ID\":2,\"NAME\":\"Lisi\",\"REMARK\":\"\",\"SEX\":\"Female\"}\n\n```\n\n#### 使用fastjson\n\n```json\nimport com.alibaba.fastjson.JSONObject;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");\n        String jsonString1 = JSONObject.toJSONString(user1);\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果：首字母自动变成小写,自动去掉了值为null的节点(为\"\"的仍然保留)\nuser1  {\"aGE\":18,\"cOMPANYNAME\":\"华为\",\"iD\":1,\"nAME\":\"zhangsan\",\"sEX\":\"Male\"}\nuser2  {\"cOMPANYNAME\":\"小米\",\"iD\":2,\"nAME\":\"Lisi\",\"rEMARK\":\"\",\"sEX\":\"Female\"}\n\n```\n\n## 结论\n\n### fastjson\n\n1. 无论对象首字母是大写，或者是小写，转json字符串是都会将首字母自动变成小写。\n2. 默认会将值为null的节点忽略掉\n3. 可通过注解@JSONField，指定对象转json时的key\n\n### json-lib\n\n1. 只有在对象属性名全部为大写时，才不会将首字母变为小写，其他情况都会将首字母变成小写\n2. 依然会保留值为null的节点\n\n## 对Date类型的字段格式化的处理\n\n### fastjson\n\n默认会将时间转为毫秒值，可使用`JSONObject.toJSONStringWithDateFormat`或者在属性字段上使用`@JSONField(format = \"yyyy-MM-dd HH:mm:ss\")`\n\n```java\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.util.Date;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null, new Date());\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\", new Date());\n        String jsonString1 = JSONObject.toJSONStringWithDateFormat(user1, \"yyyy-MM-dd\");\n        String jsonString2 = JSONObject.toJSONString(user2);\n        System.out.println(\"user1  \" + jsonString1);\n        System.out.println(\"user2  \" + jsonString2);\n    }\n\n}\n\n结果：\nuser1  {\"Age\":18,\"CompanyName\":\"华为\",\"Id\":1,\"Name\":\"zhangsan\",\"Sex\":\"Male\",\"birthday\":\"2019-05-21\"}\nuser2  {\"CompanyName\":\"小米\",\"Id\":2,\"Name\":\"Lisi\",\"Remark\":\"\",\"Sex\":\"Female\",\"birthday\":1558398124477}\n```\n\n\n\n### json-lib\n\n默认会将Date类型的字段分解, 可通过传入`JsonConfig`并注册`JsonValueProcessor`解决这个问题\n\n```java\nimport net.sf.json.JSONObject;\nimport net.sf.json.JsonConfig;\n\nimport java.util.Date;\n\npublic class JSONUtilsTest {\n\n    public static void main(String[] args) {\n        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null, new Date());\n        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\", new Date());\n        JsonConfig jsonConfig = new JsonConfig();\n        jsonConfig.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor());\n        JSONObject jsonObject1 = JSONObject.fromObject(user1, jsonConfig);\n        JSONObject jsonObject2 = JSONObject.fromObject(user2);\n        System.out.println(\"user1  \" + jsonObject1.toString());\n        System.out.println(\"user2  \" + jsonObject2.toString());\n    }\n\n}\n\nuser1  {\"age\":18,\"birthday\":\"2019-05-21 08:30:53\",\"companyName\":\"华为\",\"id\":1,\"name\":\"zhangsan\",\"remark\":\"\",\"sex\":\"Male\"}\nuser2  {\"age\":0,\"birthday\":{\"date\":21,\"day\":2,\"hours\":8,\"minutes\":30,\"month\":4,\"seconds\":53,\"time\":1558398653824,\"timezoneOffset\":-480,\"year\":119},\"companyName\":\"小米\",\"id\":2,\"name\":\"Lisi\",\"remark\":\"\",\"sex\":\"Female\"}\n\npublic class DateJsonValueProcessor implements JsonValueProcessor {\n\n    private String formatDateTime = \"yyyy-MM-dd HH:mm:ss\";\n\n    private String formatDate = \"yyyy-MM-dd\";\n\n    public DateJsonValueProcessor() {\n\n    }\n\n    public DateJsonValueProcessor(String format) {\n        this.formatDateTime = format;\n    }\n\n    @Override\n    public Object processArrayValue(Object value, JsonConfig jsonConfig) {\n        String[] obj = {};\n        if (value instanceof Date[]) {\n            SimpleDateFormat sf = new SimpleDateFormat(formatDateTime);\n            Date[] dates = (Date[]) value;\n            obj = new String[dates.length];\n            for (int i = 0; i < dates.length; i++) {\n                obj[i] = sf.format(dates[i]);\n            }\n        }\n        return obj;\n    }\n\n    @Override\n    public Object processObjectValue(String key, Object value, JsonConfig jsonConfig) {\n        if (value instanceof Date) {\n            String str = \"\";\n            if (Objects.equals(key, \"checkDate\") || Objects.equals(key, \"validUntil\")) {\n                str = new SimpleDateFormat(formatDate).format((Date) value);\n            } else {\n                str = new SimpleDateFormat(formatDateTime).format((Date) value);\n            }\n            return str;\n        }\n        return value;\n    }\n}\n```\n\n","slug":"使用不同json包对象转Json过程中的大小写问题","published":1,"updated":"2019-10-27T13:02:44.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxckh0007d4kptz5fypdv","content":"<p>对象转json字符串时，针对对象属性不同的大小写，常用的两种工具类json-lib和fastjson转换的结果有差异。记录于此，作为今后的参考。</p>\n<a id=\"more\"></a>\n<h2 id=\"net-sf-json-lib-与-com-alibaba-fastjson的不同效果\"><a href=\"#net-sf-json-lib-与-com-alibaba-fastjson的不同效果\" class=\"headerlink\" title=\"net.sf.json-lib 与 com.alibaba.fastjson的不同效果\"></a><code>net.sf.json-lib</code> 与 <code>com.alibaba.fastjson</code>的不同效果</h2><h3 id=\"导入jar包\"><a href=\"#导入jar包\" class=\"headerlink\" title=\"导入jar包\"></a>导入jar包</h3><p>这里同时导入两个json工具包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.45<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象采用驼峰命名法\"><a href=\"#对象采用驼峰命名法\" class=\"headerlink\" title=\"对象采用驼峰命名法\"></a>对象采用驼峰命名法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String companyName;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用net-sf-json-lib\"><a href=\"#使用net-sf-json-lib\" class=\"headerlink\" title=\"使用net.sf.json-lib\"></a>使用<code>net.sf.json-lib</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>);</span><br><span class=\"line\">        JSONObject jsonObject = JSONObject.fromObject(user);</span><br><span class=\"line\">        System.out.println(jsonObject.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：(与对象名一致，没毛病)</span><br><span class=\"line\">&#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用fastjson\"><a href=\"#使用fastjson\" class=\"headerlink\" title=\"使用fastjson\"></a>使用fastjson</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>);</span><br><span class=\"line\">        String jsonString = JSONObject.toJSONString(user);</span><br><span class=\"line\">        System.out.println(jsonString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果：(与对象名一致，没毛病)</span><br><span class=\"line\">&#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象首字母大写\"><a href=\"#对象首字母大写\" class=\"headerlink\" title=\"对象首字母大写\"></a>对象首字母大写</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String CompanyName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Remark;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-net-sf-json-lib\"><a href=\"#使用-net-sf-json-lib\" class=\"headerlink\" title=\"使用`net.sf.json-lib\"></a>使用`net.sf.json-lib</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        JSONObject jsonObject1 = JSONObject.fromObject(user1);</span><br><span class=\"line\">        JSONObject jsonObject2 = JSONObject.fromObject(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonObject1.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonObject2.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果: 首字母变成小写,保留了值为<span class=\"keyword\">null</span>的节点（<span class=\"number\">0</span>和<span class=\"string\">\"\"</span>）</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用fastjson-1\"><a href=\"#使用fastjson-1\" class=\"headerlink\" title=\"使用fastjson\"></a>使用fastjson</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONString(user1);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonString1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：首字母自动变成小写,自动去掉了值为<span class=\"keyword\">null</span>的节点(为<span class=\"string\">\"\"</span>的仍然保留)</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要一定按指定的字段名，可使用@JSONField</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Id\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Sex\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Age\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"CompanyName\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String CompanyName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Remark\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Remark;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONString(user1);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonString1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果: 按JSONField指定的name转json，自动去掉了值为<span class=\"keyword\">null</span>的节点(为<span class=\"string\">\"\"</span>的仍然保留)</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"Age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"Remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象属性全部大写\"><a href=\"#对象属性全部大写\" class=\"headerlink\" title=\"对象属性全部大写\"></a>对象属性全部大写</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String SEX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer AGE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String COMPANYNAME;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String REMARK;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-net-sf-json-lib-1\"><a href=\"#使用-net-sf-json-lib-1\" class=\"headerlink\" title=\"使用`net.sf.json-lib\"></a>使用`net.sf.json-lib</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        JSONObject jsonObject1 = JSONObject.fromObject(user1);</span><br><span class=\"line\">        JSONObject jsonObject2 = JSONObject.fromObject(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonObject1.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonObject2.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：首字母没有自动变成小写,保留了值为<span class=\"keyword\">null</span>的节点（<span class=\"number\">0</span>和<span class=\"string\">\"\"</span>）</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"AGE\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"COMPANYNAME\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"ID\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"NAME\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"REMARK\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"SEX\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"AGE\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"COMPANYNAME\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"ID\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"NAME\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"REMARK\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"SEX\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用fastjson-2\"><a href=\"#使用fastjson-2\" class=\"headerlink\" title=\"使用fastjson\"></a>使用fastjson</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\">public class JSONUtilsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);</span><br><span class=\"line\">        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONString(user1);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(\"user1  \" + jsonString1);</span><br><span class=\"line\">        System.out.println(\"user2  \" + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：首字母自动变成小写,自动去掉了值为null的节点(为\"\"的仍然保留)</span><br><span class=\"line\">user1  &#123;\"aGE\":18,\"cOMPANYNAME\":\"华为\",\"iD\":1,\"nAME\":\"zhangsan\",\"sEX\":\"Male\"&#125;</span><br><span class=\"line\">user2  &#123;\"cOMPANYNAME\":\"小米\",\"iD\":2,\"nAME\":\"Lisi\",\"rEMARK\":\"\",\"sEX\":\"Female\"&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><ol>\n<li>无论对象首字母是大写，或者是小写，转json字符串是都会将首字母自动变成小写。</li>\n<li>默认会将值为null的节点忽略掉</li>\n<li>可通过注解@JSONField，指定对象转json时的key</li>\n</ol>\n<h3 id=\"json-lib\"><a href=\"#json-lib\" class=\"headerlink\" title=\"json-lib\"></a>json-lib</h3><ol>\n<li>只有在对象属性名全部为大写时，才不会将首字母变为小写，其他情况都会将首字母变成小写</li>\n<li>依然会保留值为null的节点</li>\n</ol>\n<h2 id=\"对Date类型的字段格式化的处理\"><a href=\"#对Date类型的字段格式化的处理\" class=\"headerlink\" title=\"对Date类型的字段格式化的处理\"></a>对Date类型的字段格式化的处理</h2><h3 id=\"fastjson-1\"><a href=\"#fastjson-1\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><p>默认会将时间转为毫秒值，可使用<code>JSONObject.toJSONStringWithDateFormat</code>或者在属性字段上使用<code>@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONStringWithDateFormat(user1, <span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonString1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"Age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Male\"</span>,<span class=\"string\">\"birthday\"</span>:<span class=\"string\">\"2019-05-21\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"Remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Female\"</span>,<span class=\"string\">\"birthday\"</span>:<span class=\"number\">1558398124477</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"json-lib-1\"><a href=\"#json-lib-1\" class=\"headerlink\" title=\"json-lib\"></a>json-lib</h3><p>默认会将Date类型的字段分解, 可通过传入<code>JsonConfig</code>并注册<code>JsonValueProcessor</code>解决这个问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JsonConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        JsonConfig jsonConfig = <span class=\"keyword\">new</span> JsonConfig();</span><br><span class=\"line\">        jsonConfig.registerJsonValueProcessor(Date.class, <span class=\"keyword\">new</span> DateJsonValueProcessor());</span><br><span class=\"line\">        JSONObject jsonObject1 = JSONObject.fromObject(user1, jsonConfig);</span><br><span class=\"line\">        JSONObject jsonObject2 = JSONObject.fromObject(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonObject1.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonObject2.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"birthday\"</span>:<span class=\"string\">\"2019-05-21 08:30:53\"</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"birthday\"</span>:&#123;<span class=\"string\">\"date\"</span>:<span class=\"number\">21</span>,<span class=\"string\">\"day\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"hours\"</span>:<span class=\"number\">8</span>,<span class=\"string\">\"minutes\"</span>:<span class=\"number\">30</span>,<span class=\"string\">\"month\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"seconds\"</span>:<span class=\"number\">53</span>,<span class=\"string\">\"time\"</span>:<span class=\"number\">1558398653824</span>,<span class=\"string\">\"timezoneOffset\"</span>:-<span class=\"number\">480</span>,<span class=\"string\">\"year\"</span>:<span class=\"number\">119</span>&#125;,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateJsonValueProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">JsonValueProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formatDateTime = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formatDate = <span class=\"string\">\"yyyy-MM-dd\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateJsonValueProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateJsonValueProcessor</span><span class=\"params\">(String format)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.formatDateTime = format;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">processArrayValue</span><span class=\"params\">(Object value, JsonConfig jsonConfig)</span> </span>&#123;</span><br><span class=\"line\">        String[] obj = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Date[]) &#123;</span><br><span class=\"line\">            SimpleDateFormat sf = <span class=\"keyword\">new</span> SimpleDateFormat(formatDateTime);</span><br><span class=\"line\">            Date[] dates = (Date[]) value;</span><br><span class=\"line\">            obj = <span class=\"keyword\">new</span> String[dates.length];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dates.length; i++) &#123;</span><br><span class=\"line\">                obj[i] = sf.format(dates[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">processObjectValue</span><span class=\"params\">(String key, Object value, JsonConfig jsonConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Date) &#123;</span><br><span class=\"line\">            String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.equals(key, <span class=\"string\">\"checkDate\"</span>) || Objects.equals(key, <span class=\"string\">\"validUntil\"</span>)) &#123;</span><br><span class=\"line\">                str = <span class=\"keyword\">new</span> SimpleDateFormat(formatDate).format((Date) value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                str = <span class=\"keyword\">new</span> SimpleDateFormat(formatDateTime).format((Date) value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":8684,"excerpt":"<p>对象转json字符串时，针对对象属性不同的大小写，常用的两种工具类json-lib和fastjson转换的结果有差异。记录于此，作为今后的参考。</p>","more":"<h2 id=\"net-sf-json-lib-与-com-alibaba-fastjson的不同效果\"><a href=\"#net-sf-json-lib-与-com-alibaba-fastjson的不同效果\" class=\"headerlink\" title=\"net.sf.json-lib 与 com.alibaba.fastjson的不同效果\"></a><code>net.sf.json-lib</code> 与 <code>com.alibaba.fastjson</code>的不同效果</h2><h3 id=\"导入jar包\"><a href=\"#导入jar包\" class=\"headerlink\" title=\"导入jar包\"></a>导入jar包</h3><p>这里同时导入两个json工具包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.45<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象采用驼峰命名法\"><a href=\"#对象采用驼峰命名法\" class=\"headerlink\" title=\"对象采用驼峰命名法\"></a>对象采用驼峰命名法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String companyName;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用net-sf-json-lib\"><a href=\"#使用net-sf-json-lib\" class=\"headerlink\" title=\"使用net.sf.json-lib\"></a>使用<code>net.sf.json-lib</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>);</span><br><span class=\"line\">        JSONObject jsonObject = JSONObject.fromObject(user);</span><br><span class=\"line\">        System.out.println(jsonObject.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：(与对象名一致，没毛病)</span><br><span class=\"line\">&#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用fastjson\"><a href=\"#使用fastjson\" class=\"headerlink\" title=\"使用fastjson\"></a>使用fastjson</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>);</span><br><span class=\"line\">        String jsonString = JSONObject.toJSONString(user);</span><br><span class=\"line\">        System.out.println(jsonString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果：(与对象名一致，没毛病)</span><br><span class=\"line\">&#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象首字母大写\"><a href=\"#对象首字母大写\" class=\"headerlink\" title=\"对象首字母大写\"></a>对象首字母大写</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String CompanyName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Remark;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-net-sf-json-lib\"><a href=\"#使用-net-sf-json-lib\" class=\"headerlink\" title=\"使用`net.sf.json-lib\"></a>使用`net.sf.json-lib</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        JSONObject jsonObject1 = JSONObject.fromObject(user1);</span><br><span class=\"line\">        JSONObject jsonObject2 = JSONObject.fromObject(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonObject1.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonObject2.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果: 首字母变成小写,保留了值为<span class=\"keyword\">null</span>的节点（<span class=\"number\">0</span>和<span class=\"string\">\"\"</span>）</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用fastjson-1\"><a href=\"#使用fastjson-1\" class=\"headerlink\" title=\"使用fastjson\"></a>使用fastjson</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONString(user1);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonString1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：首字母自动变成小写,自动去掉了值为<span class=\"keyword\">null</span>的节点(为<span class=\"string\">\"\"</span>的仍然保留)</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要一定按指定的字段名，可使用@JSONField</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Id\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Sex\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Age\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer Age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"CompanyName\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String CompanyName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(name = <span class=\"string\">\"Remark\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Remark;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONString(user1);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonString1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果: 按JSONField指定的name转json，自动去掉了值为<span class=\"keyword\">null</span>的节点(为<span class=\"string\">\"\"</span>的仍然保留)</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"Age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"Remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象属性全部大写\"><a href=\"#对象属性全部大写\" class=\"headerlink\" title=\"对象属性全部大写\"></a>对象属性全部大写</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String SEX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer AGE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String COMPANYNAME;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String REMARK;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-net-sf-json-lib-1\"><a href=\"#使用-net-sf-json-lib-1\" class=\"headerlink\" title=\"使用`net.sf.json-lib\"></a>使用`net.sf.json-lib</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        JSONObject jsonObject1 = JSONObject.fromObject(user1);</span><br><span class=\"line\">        JSONObject jsonObject2 = JSONObject.fromObject(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonObject1.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonObject2.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：首字母没有自动变成小写,保留了值为<span class=\"keyword\">null</span>的节点（<span class=\"number\">0</span>和<span class=\"string\">\"\"</span>）</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"AGE\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"COMPANYNAME\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"ID\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"NAME\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"REMARK\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"SEX\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"AGE\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"COMPANYNAME\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"ID\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"NAME\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"REMARK\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"SEX\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用fastjson-2\"><a href=\"#使用fastjson-2\" class=\"headerlink\" title=\"使用fastjson\"></a>使用fastjson</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\">public class JSONUtilsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        User user1 = new User(1, \"zhangsan\", \"Male\", 18, \"华为\", null);</span><br><span class=\"line\">        User user2 = new User(2, \"Lisi\", \"Female\", null, \"小米\", \"\");</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONString(user1);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(\"user1  \" + jsonString1);</span><br><span class=\"line\">        System.out.println(\"user2  \" + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：首字母自动变成小写,自动去掉了值为null的节点(为\"\"的仍然保留)</span><br><span class=\"line\">user1  &#123;\"aGE\":18,\"cOMPANYNAME\":\"华为\",\"iD\":1,\"nAME\":\"zhangsan\",\"sEX\":\"Male\"&#125;</span><br><span class=\"line\">user2  &#123;\"cOMPANYNAME\":\"小米\",\"iD\":2,\"nAME\":\"Lisi\",\"rEMARK\":\"\",\"sEX\":\"Female\"&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><ol>\n<li>无论对象首字母是大写，或者是小写，转json字符串是都会将首字母自动变成小写。</li>\n<li>默认会将值为null的节点忽略掉</li>\n<li>可通过注解@JSONField，指定对象转json时的key</li>\n</ol>\n<h3 id=\"json-lib\"><a href=\"#json-lib\" class=\"headerlink\" title=\"json-lib\"></a>json-lib</h3><ol>\n<li>只有在对象属性名全部为大写时，才不会将首字母变为小写，其他情况都会将首字母变成小写</li>\n<li>依然会保留值为null的节点</li>\n</ol>\n<h2 id=\"对Date类型的字段格式化的处理\"><a href=\"#对Date类型的字段格式化的处理\" class=\"headerlink\" title=\"对Date类型的字段格式化的处理\"></a>对Date类型的字段格式化的处理</h2><h3 id=\"fastjson-1\"><a href=\"#fastjson-1\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><p>默认会将时间转为毫秒值，可使用<code>JSONObject.toJSONStringWithDateFormat</code>或者在属性字段上使用<code>@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        String jsonString1 = JSONObject.toJSONStringWithDateFormat(user1, <span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        String jsonString2 = JSONObject.toJSONString(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonString1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonString2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"Age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Male\"</span>,<span class=\"string\">\"birthday\"</span>:<span class=\"string\">\"2019-05-21\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"CompanyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"Id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"Remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"Sex\"</span>:<span class=\"string\">\"Female\"</span>,<span class=\"string\">\"birthday\"</span>:<span class=\"number\">1558398124477</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"json-lib-1\"><a href=\"#json-lib-1\" class=\"headerlink\" title=\"json-lib\"></a>json-lib</h3><p>默认会将Date类型的字段分解, 可通过传入<code>JsonConfig</code>并注册<code>JsonValueProcessor</code>解决这个问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JsonConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONUtilsTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">\"zhangsan\"</span>, <span class=\"string\">\"Male\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"华为\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">\"Lisi\"</span>, <span class=\"string\">\"Female\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"小米\"</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        JsonConfig jsonConfig = <span class=\"keyword\">new</span> JsonConfig();</span><br><span class=\"line\">        jsonConfig.registerJsonValueProcessor(Date.class, <span class=\"keyword\">new</span> DateJsonValueProcessor());</span><br><span class=\"line\">        JSONObject jsonObject1 = JSONObject.fromObject(user1, jsonConfig);</span><br><span class=\"line\">        JSONObject jsonObject2 = JSONObject.fromObject(user2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1  \"</span> + jsonObject1.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2  \"</span> + jsonObject2.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">user1  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">18</span>,<span class=\"string\">\"birthday\"</span>:<span class=\"string\">\"2019-05-21 08:30:53\"</span>,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"华为\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Male\"</span>&#125;</span><br><span class=\"line\">user2  &#123;<span class=\"string\">\"age\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"birthday\"</span>:&#123;<span class=\"string\">\"date\"</span>:<span class=\"number\">21</span>,<span class=\"string\">\"day\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"hours\"</span>:<span class=\"number\">8</span>,<span class=\"string\">\"minutes\"</span>:<span class=\"number\">30</span>,<span class=\"string\">\"month\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"seconds\"</span>:<span class=\"number\">53</span>,<span class=\"string\">\"time\"</span>:<span class=\"number\">1558398653824</span>,<span class=\"string\">\"timezoneOffset\"</span>:-<span class=\"number\">480</span>,<span class=\"string\">\"year\"</span>:<span class=\"number\">119</span>&#125;,<span class=\"string\">\"companyName\"</span>:<span class=\"string\">\"小米\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Lisi\"</span>,<span class=\"string\">\"remark\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"Female\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateJsonValueProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">JsonValueProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formatDateTime = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formatDate = <span class=\"string\">\"yyyy-MM-dd\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateJsonValueProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateJsonValueProcessor</span><span class=\"params\">(String format)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.formatDateTime = format;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">processArrayValue</span><span class=\"params\">(Object value, JsonConfig jsonConfig)</span> </span>&#123;</span><br><span class=\"line\">        String[] obj = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Date[]) &#123;</span><br><span class=\"line\">            SimpleDateFormat sf = <span class=\"keyword\">new</span> SimpleDateFormat(formatDateTime);</span><br><span class=\"line\">            Date[] dates = (Date[]) value;</span><br><span class=\"line\">            obj = <span class=\"keyword\">new</span> String[dates.length];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dates.length; i++) &#123;</span><br><span class=\"line\">                obj[i] = sf.format(dates[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">processObjectValue</span><span class=\"params\">(String key, Object value, JsonConfig jsonConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Date) &#123;</span><br><span class=\"line\">            String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.equals(key, <span class=\"string\">\"checkDate\"</span>) || Objects.equals(key, <span class=\"string\">\"validUntil\"</span>)) &#123;</span><br><span class=\"line\">                str = <span class=\"keyword\">new</span> SimpleDateFormat(formatDate).format((Date) value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                str = <span class=\"keyword\">new</span> SimpleDateFormat(formatDateTime).format((Date) value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用PicGo和GitHub搭建个人图床","date":"2019-05-03T13:50:00.000Z","_content":"\n\n\n> 一直苦于一些图片没地方保存，如果图片能够上传到一个地方而且能够直接通过地址访问就好了。无意间在GitHub上看到有人利用GitHub做图层，于是就有了试一试的想法。最终利用PicGo和GitHub成功搭建个人图床\n\n<!--more-->\n\n## GitHub仓库设置\n\n### 新建仓库\n\n仓库选择public\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225624.png)\n\n### 创建token\n\n\n\ntoken用于后面PicGo操作Github仓库。\n\n访问[https://github.com/settings/tokens](https://github.com/settings/tokens) 或者个人头像/Settings/Developer settings/Personal access tokens\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225737.png)\n\n把repo的勾打上即可。然后翻到页面最底部，点击`Generate token`的绿色按钮生成token。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225802.png)\n\n**注意：**这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。\n\n## PicGo\n\nPicGo是一款免费开源的图片上传和管理工具。\n\n[官方网站https://molunerfinn.com/PicGo/](https://molunerfinn.com/PicGo/)\n\n### PicGo应用说明\n\nPicGo在上传图片之后自动会将图片链接复制到你的剪贴板里，可选5种复制的链接格式。\n\nPicGo目前支持了,目前最新版本为2.1.0\n\n- 微博图床 v1.0\n- 七牛图床 v1.0\n- 腾讯云COS v4\\v5版本 v1.1 & v1.5.0\n- 又拍云 v1.2.0\n- GitHub v1.5.0\n- SM.MS v1.5.1\n- 阿里云OSS v1.6.0\n- Imgur v1.6.0\n\n### 下载安装PicGo\n\n按照PicGo官网[文档说明](https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85)下载安装PicGo\n\nmacOS用户请下载最新版本的`dmg`文件，windows用户请下载最新版本的`exe`文件，linux用户请下载`AppImage`文件。\n\n\n\n### 快速上手\n\n- Mini窗口上传\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501221954.png)\n\n1)直接拖拽图片到mini窗口上传\n\n2)将图片复制到剪贴板，然后右键mini窗口，选择剪贴板上传\n\n- 主窗口上传\n\n### 配置说明\n\nPicGo配置文件在不同系统里是不一样的\n\n- Windows：`%APPDATA%\\picgo\\data.json`\n- Linux: `$XDG_CONFIG_HOME/picgo/data.json` or `~/.config/picgo/data.json`\n- macOS:` ~/Library/Application\\ Support/picgo/data.json`\n\n我的配置文件是在C:\\Users\\idobe\\AppData\\Roaming\\PicGo\\data.json\n\n默认配置如下,\n\n```json\n{\n  \"uploaded\": [],\n  \"picBed\": {\n    \"current\": \"weibo\"\n  },\n  \"settings\": {\n    \"shortKey\": {\n      \"upload\": \"CommandOrControl+Shift+P\"\n    },\n    \"showUpdateTip\": true\n  },\n  \"needReload\": false,\n  \"picgoPlugins\": {}\n}\n```\n\n在PicGo界面还可以有多种个性化设置，我在这里设置了时间戳重命名，上传的图片会自动按时间戳重命名后上传。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501223804.png)\n\n### 配置GitHub图床\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501222516.jpg)\n\n仓库名：格式-用户名/仓库\n\n分支名：master\n\nToken：GitHub 生成的Token\n\n指定储存路径：注意格式**2019/**，不要写成**/2019/**。仓库下的路径名,注意GitHub上该目录必须存在\n\n自定义域名不用设置。\n\n\n\n至此，使用PicGo和GitHub创建个人图床已经完成。可以愉快的上传图片了。\n\n参考：\n\n1.https://github.com/nnngu/FigureBed\n\n2.https://blog.csdn.net/yefcion/article/details/88412025\n\n3.另外一款图床工具感觉也不错。https://github.com/xiebruce/PicUploader\n\n\n\n","source":"_posts/20190507-使用PicGo和GitHub搭建个人图床.md","raw":"---\ntitle: 使用PicGo和GitHub搭建个人图床\ndate: 2019-05-03 21:50:00\ntags: Hexo博客\ncategory: \n  - 技术\n  - 归纳总结\n---\n\n\n\n> 一直苦于一些图片没地方保存，如果图片能够上传到一个地方而且能够直接通过地址访问就好了。无意间在GitHub上看到有人利用GitHub做图层，于是就有了试一试的想法。最终利用PicGo和GitHub成功搭建个人图床\n\n<!--more-->\n\n## GitHub仓库设置\n\n### 新建仓库\n\n仓库选择public\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225624.png)\n\n### 创建token\n\n\n\ntoken用于后面PicGo操作Github仓库。\n\n访问[https://github.com/settings/tokens](https://github.com/settings/tokens) 或者个人头像/Settings/Developer settings/Personal access tokens\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225737.png)\n\n把repo的勾打上即可。然后翻到页面最底部，点击`Generate token`的绿色按钮生成token。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225802.png)\n\n**注意：**这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。\n\n## PicGo\n\nPicGo是一款免费开源的图片上传和管理工具。\n\n[官方网站https://molunerfinn.com/PicGo/](https://molunerfinn.com/PicGo/)\n\n### PicGo应用说明\n\nPicGo在上传图片之后自动会将图片链接复制到你的剪贴板里，可选5种复制的链接格式。\n\nPicGo目前支持了,目前最新版本为2.1.0\n\n- 微博图床 v1.0\n- 七牛图床 v1.0\n- 腾讯云COS v4\\v5版本 v1.1 & v1.5.0\n- 又拍云 v1.2.0\n- GitHub v1.5.0\n- SM.MS v1.5.1\n- 阿里云OSS v1.6.0\n- Imgur v1.6.0\n\n### 下载安装PicGo\n\n按照PicGo官网[文档说明](https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85)下载安装PicGo\n\nmacOS用户请下载最新版本的`dmg`文件，windows用户请下载最新版本的`exe`文件，linux用户请下载`AppImage`文件。\n\n\n\n### 快速上手\n\n- Mini窗口上传\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501221954.png)\n\n1)直接拖拽图片到mini窗口上传\n\n2)将图片复制到剪贴板，然后右键mini窗口，选择剪贴板上传\n\n- 主窗口上传\n\n### 配置说明\n\nPicGo配置文件在不同系统里是不一样的\n\n- Windows：`%APPDATA%\\picgo\\data.json`\n- Linux: `$XDG_CONFIG_HOME/picgo/data.json` or `~/.config/picgo/data.json`\n- macOS:` ~/Library/Application\\ Support/picgo/data.json`\n\n我的配置文件是在C:\\Users\\idobe\\AppData\\Roaming\\PicGo\\data.json\n\n默认配置如下,\n\n```json\n{\n  \"uploaded\": [],\n  \"picBed\": {\n    \"current\": \"weibo\"\n  },\n  \"settings\": {\n    \"shortKey\": {\n      \"upload\": \"CommandOrControl+Shift+P\"\n    },\n    \"showUpdateTip\": true\n  },\n  \"needReload\": false,\n  \"picgoPlugins\": {}\n}\n```\n\n在PicGo界面还可以有多种个性化设置，我在这里设置了时间戳重命名，上传的图片会自动按时间戳重命名后上传。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501223804.png)\n\n### 配置GitHub图床\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501222516.jpg)\n\n仓库名：格式-用户名/仓库\n\n分支名：master\n\nToken：GitHub 生成的Token\n\n指定储存路径：注意格式**2019/**，不要写成**/2019/**。仓库下的路径名,注意GitHub上该目录必须存在\n\n自定义域名不用设置。\n\n\n\n至此，使用PicGo和GitHub创建个人图床已经完成。可以愉快的上传图片了。\n\n参考：\n\n1.https://github.com/nnngu/FigureBed\n\n2.https://blog.csdn.net/yefcion/article/details/88412025\n\n3.另外一款图床工具感觉也不错。https://github.com/xiebruce/PicUploader\n\n\n\n","slug":"使用PicGo和GitHub搭建个人图床","published":1,"updated":"2019-10-27T13:01:03.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxckm0008d4kpl4883fo7","content":"<blockquote>\n<p>一直苦于一些图片没地方保存，如果图片能够上传到一个地方而且能够直接通过地址访问就好了。无意间在GitHub上看到有人利用GitHub做图层，于是就有了试一试的想法。最终利用PicGo和GitHub成功搭建个人图床</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"GitHub仓库设置\"><a href=\"#GitHub仓库设置\" class=\"headerlink\" title=\"GitHub仓库设置\"></a>GitHub仓库设置</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>仓库选择public</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225624.png\" alt></p>\n<h3 id=\"创建token\"><a href=\"#创建token\" class=\"headerlink\" title=\"创建token\"></a>创建token</h3><p>token用于后面PicGo操作Github仓库。</p>\n<p>访问<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/tokens</a> 或者个人头像/Settings/Developer settings/Personal access tokens</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225737.png\" alt></p>\n<p>把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225802.png\" alt></p>\n<p><strong>注意：</strong>这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p>\n<h2 id=\"PicGo\"><a href=\"#PicGo\" class=\"headerlink\" title=\"PicGo\"></a>PicGo</h2><p>PicGo是一款免费开源的图片上传和管理工具。</p>\n<p><a href=\"https://molunerfinn.com/PicGo/\" target=\"_blank\" rel=\"noopener\">官方网站https://molunerfinn.com/PicGo/</a></p>\n<h3 id=\"PicGo应用说明\"><a href=\"#PicGo应用说明\" class=\"headerlink\" title=\"PicGo应用说明\"></a>PicGo应用说明</h3><p>PicGo在上传图片之后自动会将图片链接复制到你的剪贴板里，可选5种复制的链接格式。</p>\n<p>PicGo目前支持了,目前最新版本为2.1.0</p>\n<ul>\n<li>微博图床 v1.0</li>\n<li>七牛图床 v1.0</li>\n<li>腾讯云COS v4\\v5版本 v1.1 &amp; v1.5.0</li>\n<li>又拍云 v1.2.0</li>\n<li>GitHub v1.5.0</li>\n<li>SM.MS v1.5.1</li>\n<li>阿里云OSS v1.6.0</li>\n<li>Imgur v1.6.0</li>\n</ul>\n<h3 id=\"下载安装PicGo\"><a href=\"#下载安装PicGo\" class=\"headerlink\" title=\"下载安装PicGo\"></a>下载安装PicGo</h3><p>按照PicGo官网<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">文档说明</a>下载安装PicGo</p>\n<p>macOS用户请下载最新版本的<code>dmg</code>文件，windows用户请下载最新版本的<code>exe</code>文件，linux用户请下载<code>AppImage</code>文件。</p>\n<h3 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h3><ul>\n<li>Mini窗口上传</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501221954.png\" alt></p>\n<p>1)直接拖拽图片到mini窗口上传</p>\n<p>2)将图片复制到剪贴板，然后右键mini窗口，选择剪贴板上传</p>\n<ul>\n<li>主窗口上传</li>\n</ul>\n<h3 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h3><p>PicGo配置文件在不同系统里是不一样的</p>\n<ul>\n<li>Windows：<code>%APPDATA%\\picgo\\data.json</code></li>\n<li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> or <code>~/.config/picgo/data.json</code></li>\n<li>macOS:<code>~/Library/Application\\ Support/picgo/data.json</code></li>\n</ul>\n<p>我的配置文件是在C:\\Users\\idobe\\AppData\\Roaming\\PicGo\\data.json</p>\n<p>默认配置如下,</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"uploaded\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"picBed\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"current\"</span>: <span class=\"string\">\"weibo\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"shortKey\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"upload\"</span>: <span class=\"string\">\"CommandOrControl+Shift+P\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"showUpdateTip\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"needReload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"picgoPlugins\"</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在PicGo界面还可以有多种个性化设置，我在这里设置了时间戳重命名，上传的图片会自动按时间戳重命名后上传。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501223804.png\" alt></p>\n<h3 id=\"配置GitHub图床\"><a href=\"#配置GitHub图床\" class=\"headerlink\" title=\"配置GitHub图床\"></a>配置GitHub图床</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501222516.jpg\" alt></p>\n<p>仓库名：格式-用户名/仓库</p>\n<p>分支名：master</p>\n<p>Token：GitHub 生成的Token</p>\n<p>指定储存路径：注意格式<strong>2019/</strong>，不要写成<strong>/2019/</strong>。仓库下的路径名,注意GitHub上该目录必须存在</p>\n<p>自定义域名不用设置。</p>\n<p>至此，使用PicGo和GitHub创建个人图床已经完成。可以愉快的上传图片了。</p>\n<p>参考：</p>\n<p>1.<a href=\"https://github.com/nnngu/FigureBed\" target=\"_blank\" rel=\"noopener\">https://github.com/nnngu/FigureBed</a></p>\n<p>2.<a href=\"https://blog.csdn.net/yefcion/article/details/88412025\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yefcion/article/details/88412025</a></p>\n<p>3.另外一款图床工具感觉也不错。<a href=\"https://github.com/xiebruce/PicUploader\" target=\"_blank\" rel=\"noopener\">https://github.com/xiebruce/PicUploader</a></p>\n","site":{"data":{}},"length":1568,"excerpt":"<blockquote>\n<p>一直苦于一些图片没地方保存，如果图片能够上传到一个地方而且能够直接通过地址访问就好了。无意间在GitHub上看到有人利用GitHub做图层，于是就有了试一试的想法。最终利用PicGo和GitHub成功搭建个人图床</p>\n</blockquote>","more":"<h2 id=\"GitHub仓库设置\"><a href=\"#GitHub仓库设置\" class=\"headerlink\" title=\"GitHub仓库设置\"></a>GitHub仓库设置</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>仓库选择public</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225624.png\" alt></p>\n<h3 id=\"创建token\"><a href=\"#创建token\" class=\"headerlink\" title=\"创建token\"></a>创建token</h3><p>token用于后面PicGo操作Github仓库。</p>\n<p>访问<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/tokens</a> 或者个人头像/Settings/Developer settings/Personal access tokens</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225737.png\" alt></p>\n<p>把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501225802.png\" alt></p>\n<p><strong>注意：</strong>这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p>\n<h2 id=\"PicGo\"><a href=\"#PicGo\" class=\"headerlink\" title=\"PicGo\"></a>PicGo</h2><p>PicGo是一款免费开源的图片上传和管理工具。</p>\n<p><a href=\"https://molunerfinn.com/PicGo/\" target=\"_blank\" rel=\"noopener\">官方网站https://molunerfinn.com/PicGo/</a></p>\n<h3 id=\"PicGo应用说明\"><a href=\"#PicGo应用说明\" class=\"headerlink\" title=\"PicGo应用说明\"></a>PicGo应用说明</h3><p>PicGo在上传图片之后自动会将图片链接复制到你的剪贴板里，可选5种复制的链接格式。</p>\n<p>PicGo目前支持了,目前最新版本为2.1.0</p>\n<ul>\n<li>微博图床 v1.0</li>\n<li>七牛图床 v1.0</li>\n<li>腾讯云COS v4\\v5版本 v1.1 &amp; v1.5.0</li>\n<li>又拍云 v1.2.0</li>\n<li>GitHub v1.5.0</li>\n<li>SM.MS v1.5.1</li>\n<li>阿里云OSS v1.6.0</li>\n<li>Imgur v1.6.0</li>\n</ul>\n<h3 id=\"下载安装PicGo\"><a href=\"#下载安装PicGo\" class=\"headerlink\" title=\"下载安装PicGo\"></a>下载安装PicGo</h3><p>按照PicGo官网<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">文档说明</a>下载安装PicGo</p>\n<p>macOS用户请下载最新版本的<code>dmg</code>文件，windows用户请下载最新版本的<code>exe</code>文件，linux用户请下载<code>AppImage</code>文件。</p>\n<h3 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h3><ul>\n<li>Mini窗口上传</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501221954.png\" alt></p>\n<p>1)直接拖拽图片到mini窗口上传</p>\n<p>2)将图片复制到剪贴板，然后右键mini窗口，选择剪贴板上传</p>\n<ul>\n<li>主窗口上传</li>\n</ul>\n<h3 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h3><p>PicGo配置文件在不同系统里是不一样的</p>\n<ul>\n<li>Windows：<code>%APPDATA%\\picgo\\data.json</code></li>\n<li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> or <code>~/.config/picgo/data.json</code></li>\n<li>macOS:<code>~/Library/Application\\ Support/picgo/data.json</code></li>\n</ul>\n<p>我的配置文件是在C:\\Users\\idobe\\AppData\\Roaming\\PicGo\\data.json</p>\n<p>默认配置如下,</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"uploaded\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"picBed\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"current\"</span>: <span class=\"string\">\"weibo\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"shortKey\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"upload\"</span>: <span class=\"string\">\"CommandOrControl+Shift+P\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"showUpdateTip\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"needReload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"picgoPlugins\"</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在PicGo界面还可以有多种个性化设置，我在这里设置了时间戳重命名，上传的图片会自动按时间戳重命名后上传。</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501223804.png\" alt></p>\n<h3 id=\"配置GitHub图床\"><a href=\"#配置GitHub图床\" class=\"headerlink\" title=\"配置GitHub图床\"></a>配置GitHub图床</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/20190501222516.jpg\" alt></p>\n<p>仓库名：格式-用户名/仓库</p>\n<p>分支名：master</p>\n<p>Token：GitHub 生成的Token</p>\n<p>指定储存路径：注意格式<strong>2019/</strong>，不要写成<strong>/2019/</strong>。仓库下的路径名,注意GitHub上该目录必须存在</p>\n<p>自定义域名不用设置。</p>\n<p>至此，使用PicGo和GitHub创建个人图床已经完成。可以愉快的上传图片了。</p>\n<p>参考：</p>\n<p>1.<a href=\"https://github.com/nnngu/FigureBed\" target=\"_blank\" rel=\"noopener\">https://github.com/nnngu/FigureBed</a></p>\n<p>2.<a href=\"https://blog.csdn.net/yefcion/article/details/88412025\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yefcion/article/details/88412025</a></p>\n<p>3.另外一款图床工具感觉也不错。<a href=\"https://github.com/xiebruce/PicUploader\" target=\"_blank\" rel=\"noopener\">https://github.com/xiebruce/PicUploader</a></p>"},{"title":"CentOS7下搭建FTP","date":"2019-05-11T15:25:54.000Z","_content":"\n\n环境：\n\n- 百度云服务器Cent OS 7\n- 使用客户端win 10\n\n<!--more-->\n\n## 安装并启动 FTP 服务\n\n### 安装 VSFTPD\n\n使用 `yum` 安装 `vsftpd`\n\n```shell\nyum install -y vsftpd\n```\n\n### 启动 VSFTPD\n\n安装完成后，启动 FTP 服务：\n\n```bash\nservice vsftpd start\n# CentOS 7使用下面的命令启动服务\nsystemctl start vsftpd.service\n# 开机自启\nsystemctl enable vsftpd\n```\n\n启动后，可以看到系统已经监听了 21 端口：\n\n```shell\nnetstat -nltp | grep 21\n```\n\n此时，访问 ftp://192.168.1.170 可浏览机器上的 /var/ftp目录了。\n\n## 配置 FTP 权限\n\n### 了解 VSFTP 配置\n\nvsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：\n\n- vsftpd.conf 为主要配置文件\n- ftpusers 配置禁止访问 FTP 服务器的用户列表\n- user_list 配置用户访问控制\n\n### 阻止匿名访问和切换根目录\n\n匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。\n\n编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：\n\n```xml\n# 禁用匿名用户  12 YES 改为NO\nanonymous_enable=NO\n\n# 禁止切换根目录 101 行 删除#\nchroot_local_user=YES\n```\n\n编辑完成后保存配置，重新启动 FTP 服务\n\n```bash\nservice vsftpd restart\n# CentOS 7\nsystemctl restart vsftpd.service\n```\n\n\n\nvsftpd.conf配置文件\n\n```properties\n# 是否允许匿名登录\nanonymous_enable=YES\n# 是否允许本地用户登录\nlocal_enable=YES\n# 是否允许本地用户对FTP服务器文件具有写权限\nwrite_enable=YES\n# 本地用户主目录\nlocal_root=/var/ftp\n# 匿名用户主目录\nanon_root=/var/ftp/pub\n# 是否允许匿名用户上传文件，如允许，须将全局的write_enable=YES\nanon_upload_enable=YES\n# 是否允许匿名用户创建新文件夹\nanon_mkdir_write_enable=YES\n# 容许匿名用户除了新建和上传外的其他权限\nanon_other_write_enable=YES\n# 本地用户掩码\nlocal_umask=022\n# 设置匿名登入者新增或上传档案时的umask值\nanon_umask=022\n# 是否激活目录欢迎信息功能\ndirmessage_enable=YES\nxferlog_enable=YES\n# 主动模式数据传输20端口\nconnect_from_port_20=NO\nxferlog_std_format=YES\n# 是否监听ipv4\nlisten=YES\n# listen_ipv6=YES\n\npam_service_name=vsftpd\nuserlist_enable=YES\ntcp_wrappers=YES\n\n# 是否设置被动模式\npasv_enable=YES\n\n# 被动模式传输使用端口\npasv_min_port=20020\npasv_max_port=20020\n\n# 被动模式返回给客户端的ip地址(服务器内网穿透时使用)\npasv_address=0.0.0.0( 服务器外网ip )\n\n# 设置用户访问目录，默认只允许用户自己的ftp目录\n# 需要同时设置allow_writeable_chroot，允许受限用户的写权限，不然会报错\nchroot_local_user=YES\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd/chroot_list\nallow_writeable_chroot=YES\n```\n\n\n\n|                            | chroot_local_user=YES                                        | chroot_local_user=NO                                         |\n| -------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **chroot_list_enable=YES** | 1.所有用户都被限制在其主目录下 <br/>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，不受限制 | 1.所有用户都不被限制其主目录下 <br/>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，受到限制 |\n| **chroot_list_enable=NO**  | 1.所有用户都被限制在其主目录下<br/> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户 | 1.所有用户都不被限制其主目录下<br/> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户 |\n\n\n\n### 创建 FTP 用户\n\n创建一个用户 `ftpuser`\n\n```bash\nuseradd ftpuser\n```\n\n为用户 ftpuser 设置密码\n\n```bash\necho \"pwd\" | passwd ftpuser --stdin\n```\n\n### 限制该用户仅能通过 FTP 访问\n\n限制用户 `ftpuser`只能通过 FTP 访问服务器，而不能直接登录服务器：\n\n```bash\nusermod -s /sbin/nologin ftpuser\n\n```\n\n### 为用户分配主目录\n\n因安全问题，vsftpd不允许匿名用户在ftp主目录上传，可以新建一个子目录，然后设置权限为777\n\n为用户 `ftpuser`创建主目录并约定：\n\n`/data/ftp` 为主目录, 该目录不可上传文件 \n`/data/ftp/pub` 文件只能上传到该目录下\n\n在`/data`中创建相关的目录\n\n```bash\nmkdir -p /data/ftp/pub\n\n```\n\n#### 创建登录欢迎文件\n\n```bash\necho \"Welcome to use FTP service.\" > /data/ftp/welcome.txt\n\n```\n\n设置访问权限\n\n```bash\nchmod a-w /data/ftp && chmod 777 -R /data/ftp/pub\n\n```\n\n这里去掉了ftp目录写入的权限\n\n设置为用户的主目录：\n\n```bash\nusermod -d /data/ftp ftpuser\n\n```\n\n\n\n注意：记得关闭防火墙或者开放FTP默认端口(21)\n\n```bash\n# 关闭SELinux服务\nsetenforce 0 \n# 关闭防火墙\niptables -F \n\n```\n\n\n\nbase: https://www.linuxidc.com/Linux/2017-11/148518.htm\n\n\n\n## FTP的连接方式\n\n> FTP是仅基于TCP的服务，不支持UDP。与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）\n\n> 主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。\n\n> 主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。\n\n> 被动模式只需要服务器端开放端口给客户端连接就行了。\n\n\n\n### 主动模式(PORT)\n\nPORT是主动模式，在建立数据通道时，服务端去连接别人\n\n工作过程：\n\n1. 客户端从一个任意的非特权端口N（N大于1024）连接到FTP服务器的命令端口(21端口)\n2. 客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器\n3. 服务器会主动从数据端口（20）连接到客户端指定的数据端口（N+1）\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223643.png)\n\n**命令连接：客户端 （大于1024端口） ->  服务器 21端口 **\n\n**数据连接：服务器 20端口 ->  客户端（大于1024的端口**\n\n\n\n### 被动模式(PASV)\n\nPASV是被动模式，在建立数据通道时，服务端被别人连接。当客户端通知服务器它处于被动模式时才启用\n\n在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题\n\n工作过程：\n\n1. 客户端打开两个任意的非特权本地端口（N 大于 1024和N+1）。第一个端口连接服务器的21端口，然后向服务器发送PASV命令，通知服务端自己处于被动状态（主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口）\n2. 服务端收到命令后，会开启一个任意的非特权端口（P大于 1024），并发送PORT P命令给客户端，通知自己的数据端口是P。\n3. 客户端收到命令后，通过N+1端口连接服务器的端口P, 用来传送数据\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223749.png)\n\n**命令连接：客户端大于1024端口 -> 服务器 21端口**\n\n**数据连接：客户端大于1024端口 -> 服务器大于1024端口**\n\n\n\n有些ftp客户端默认就是使用PASV被动模式来连接ftp服务器的，如果我们的ftp服务器只支持主动模式，就会造成客户端可以进行用户验证，但无法列目录，也无法进行数据传送，并提示“你没有权限”这样的550返回错误\n\n\n\n### 主动模式与被动模式的优缺点\n\n- 主动FTP - 对FTP`服务器`的管理有利\n\n  优点：服务端配置简单，利于服务器安全管理，服务器只需要开放21端口\n\n  缺点：如果客户端开启了防火墙，或客户端处于内网（NAT网关之后）， 那么服务器对客户端端口发起的连接可能会失败\n\n- 被动FTP - 对FTP`客户端`的管理有利\n\n  缺点：服务器配置管理稍显复杂，不利于安全，服务器需要开放随机高位端口以便客户端可以连接，因此大多数FTP服务软件都可以手动配置被动端口的范围\n\n  优点：对客户端网络环境没有要求\n\n\n\n### 常用方案\n\n被动模式下，在FTP服务端设置被动模式下开放的随机端口范围，然后设置服务器防火墙规则，开放服务器端对应的端口\n\n```properties\npasv_enable=YES   //开启PASV模式\npasv_min_port=40000   //最小端口号\npasv_max_port=40000   //最大端口号\npasv_promiscuous=YES\n\n```\n\n\n\n## DOS环境下FTP常用命令\n\n```bash\n# 与服务器建立连接\nopen/ftp ...\n# 切换目录\ncd\n# 切换本地目录\nlcd\n# 下载文件 / 下载多个文件\nget / wget\n# 上传文件\nsend / put\n# 断开连接\nbye\n# 关闭交互模式\nprompt off\n# 切换主动/被动模式\nquote PORT / PASV\n```\n\n","source":"_posts/20190511-CentOS7下搭建FTP.md","raw":"---\ntitle: CentOS7下搭建FTP\ndate: 2019-05-11 23:25:54\ntags: FTP\ncategory: \n- 技术\n- 服务端\n---\n\n\n环境：\n\n- 百度云服务器Cent OS 7\n- 使用客户端win 10\n\n<!--more-->\n\n## 安装并启动 FTP 服务\n\n### 安装 VSFTPD\n\n使用 `yum` 安装 `vsftpd`\n\n```shell\nyum install -y vsftpd\n```\n\n### 启动 VSFTPD\n\n安装完成后，启动 FTP 服务：\n\n```bash\nservice vsftpd start\n# CentOS 7使用下面的命令启动服务\nsystemctl start vsftpd.service\n# 开机自启\nsystemctl enable vsftpd\n```\n\n启动后，可以看到系统已经监听了 21 端口：\n\n```shell\nnetstat -nltp | grep 21\n```\n\n此时，访问 ftp://192.168.1.170 可浏览机器上的 /var/ftp目录了。\n\n## 配置 FTP 权限\n\n### 了解 VSFTP 配置\n\nvsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：\n\n- vsftpd.conf 为主要配置文件\n- ftpusers 配置禁止访问 FTP 服务器的用户列表\n- user_list 配置用户访问控制\n\n### 阻止匿名访问和切换根目录\n\n匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。\n\n编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：\n\n```xml\n# 禁用匿名用户  12 YES 改为NO\nanonymous_enable=NO\n\n# 禁止切换根目录 101 行 删除#\nchroot_local_user=YES\n```\n\n编辑完成后保存配置，重新启动 FTP 服务\n\n```bash\nservice vsftpd restart\n# CentOS 7\nsystemctl restart vsftpd.service\n```\n\n\n\nvsftpd.conf配置文件\n\n```properties\n# 是否允许匿名登录\nanonymous_enable=YES\n# 是否允许本地用户登录\nlocal_enable=YES\n# 是否允许本地用户对FTP服务器文件具有写权限\nwrite_enable=YES\n# 本地用户主目录\nlocal_root=/var/ftp\n# 匿名用户主目录\nanon_root=/var/ftp/pub\n# 是否允许匿名用户上传文件，如允许，须将全局的write_enable=YES\nanon_upload_enable=YES\n# 是否允许匿名用户创建新文件夹\nanon_mkdir_write_enable=YES\n# 容许匿名用户除了新建和上传外的其他权限\nanon_other_write_enable=YES\n# 本地用户掩码\nlocal_umask=022\n# 设置匿名登入者新增或上传档案时的umask值\nanon_umask=022\n# 是否激活目录欢迎信息功能\ndirmessage_enable=YES\nxferlog_enable=YES\n# 主动模式数据传输20端口\nconnect_from_port_20=NO\nxferlog_std_format=YES\n# 是否监听ipv4\nlisten=YES\n# listen_ipv6=YES\n\npam_service_name=vsftpd\nuserlist_enable=YES\ntcp_wrappers=YES\n\n# 是否设置被动模式\npasv_enable=YES\n\n# 被动模式传输使用端口\npasv_min_port=20020\npasv_max_port=20020\n\n# 被动模式返回给客户端的ip地址(服务器内网穿透时使用)\npasv_address=0.0.0.0( 服务器外网ip )\n\n# 设置用户访问目录，默认只允许用户自己的ftp目录\n# 需要同时设置allow_writeable_chroot，允许受限用户的写权限，不然会报错\nchroot_local_user=YES\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd/chroot_list\nallow_writeable_chroot=YES\n```\n\n\n\n|                            | chroot_local_user=YES                                        | chroot_local_user=NO                                         |\n| -------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **chroot_list_enable=YES** | 1.所有用户都被限制在其主目录下 <br/>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，不受限制 | 1.所有用户都不被限制其主目录下 <br/>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，受到限制 |\n| **chroot_list_enable=NO**  | 1.所有用户都被限制在其主目录下<br/> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户 | 1.所有用户都不被限制其主目录下<br/> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户 |\n\n\n\n### 创建 FTP 用户\n\n创建一个用户 `ftpuser`\n\n```bash\nuseradd ftpuser\n```\n\n为用户 ftpuser 设置密码\n\n```bash\necho \"pwd\" | passwd ftpuser --stdin\n```\n\n### 限制该用户仅能通过 FTP 访问\n\n限制用户 `ftpuser`只能通过 FTP 访问服务器，而不能直接登录服务器：\n\n```bash\nusermod -s /sbin/nologin ftpuser\n\n```\n\n### 为用户分配主目录\n\n因安全问题，vsftpd不允许匿名用户在ftp主目录上传，可以新建一个子目录，然后设置权限为777\n\n为用户 `ftpuser`创建主目录并约定：\n\n`/data/ftp` 为主目录, 该目录不可上传文件 \n`/data/ftp/pub` 文件只能上传到该目录下\n\n在`/data`中创建相关的目录\n\n```bash\nmkdir -p /data/ftp/pub\n\n```\n\n#### 创建登录欢迎文件\n\n```bash\necho \"Welcome to use FTP service.\" > /data/ftp/welcome.txt\n\n```\n\n设置访问权限\n\n```bash\nchmod a-w /data/ftp && chmod 777 -R /data/ftp/pub\n\n```\n\n这里去掉了ftp目录写入的权限\n\n设置为用户的主目录：\n\n```bash\nusermod -d /data/ftp ftpuser\n\n```\n\n\n\n注意：记得关闭防火墙或者开放FTP默认端口(21)\n\n```bash\n# 关闭SELinux服务\nsetenforce 0 \n# 关闭防火墙\niptables -F \n\n```\n\n\n\nbase: https://www.linuxidc.com/Linux/2017-11/148518.htm\n\n\n\n## FTP的连接方式\n\n> FTP是仅基于TCP的服务，不支持UDP。与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）\n\n> 主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。\n\n> 主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。\n\n> 被动模式只需要服务器端开放端口给客户端连接就行了。\n\n\n\n### 主动模式(PORT)\n\nPORT是主动模式，在建立数据通道时，服务端去连接别人\n\n工作过程：\n\n1. 客户端从一个任意的非特权端口N（N大于1024）连接到FTP服务器的命令端口(21端口)\n2. 客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器\n3. 服务器会主动从数据端口（20）连接到客户端指定的数据端口（N+1）\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223643.png)\n\n**命令连接：客户端 （大于1024端口） ->  服务器 21端口 **\n\n**数据连接：服务器 20端口 ->  客户端（大于1024的端口**\n\n\n\n### 被动模式(PASV)\n\nPASV是被动模式，在建立数据通道时，服务端被别人连接。当客户端通知服务器它处于被动模式时才启用\n\n在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题\n\n工作过程：\n\n1. 客户端打开两个任意的非特权本地端口（N 大于 1024和N+1）。第一个端口连接服务器的21端口，然后向服务器发送PASV命令，通知服务端自己处于被动状态（主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口）\n2. 服务端收到命令后，会开启一个任意的非特权端口（P大于 1024），并发送PORT P命令给客户端，通知自己的数据端口是P。\n3. 客户端收到命令后，通过N+1端口连接服务器的端口P, 用来传送数据\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223749.png)\n\n**命令连接：客户端大于1024端口 -> 服务器 21端口**\n\n**数据连接：客户端大于1024端口 -> 服务器大于1024端口**\n\n\n\n有些ftp客户端默认就是使用PASV被动模式来连接ftp服务器的，如果我们的ftp服务器只支持主动模式，就会造成客户端可以进行用户验证，但无法列目录，也无法进行数据传送，并提示“你没有权限”这样的550返回错误\n\n\n\n### 主动模式与被动模式的优缺点\n\n- 主动FTP - 对FTP`服务器`的管理有利\n\n  优点：服务端配置简单，利于服务器安全管理，服务器只需要开放21端口\n\n  缺点：如果客户端开启了防火墙，或客户端处于内网（NAT网关之后）， 那么服务器对客户端端口发起的连接可能会失败\n\n- 被动FTP - 对FTP`客户端`的管理有利\n\n  缺点：服务器配置管理稍显复杂，不利于安全，服务器需要开放随机高位端口以便客户端可以连接，因此大多数FTP服务软件都可以手动配置被动端口的范围\n\n  优点：对客户端网络环境没有要求\n\n\n\n### 常用方案\n\n被动模式下，在FTP服务端设置被动模式下开放的随机端口范围，然后设置服务器防火墙规则，开放服务器端对应的端口\n\n```properties\npasv_enable=YES   //开启PASV模式\npasv_min_port=40000   //最小端口号\npasv_max_port=40000   //最大端口号\npasv_promiscuous=YES\n\n```\n\n\n\n## DOS环境下FTP常用命令\n\n```bash\n# 与服务器建立连接\nopen/ftp ...\n# 切换目录\ncd\n# 切换本地目录\nlcd\n# 下载文件 / 下载多个文件\nget / wget\n# 上传文件\nsend / put\n# 断开连接\nbye\n# 关闭交互模式\nprompt off\n# 切换主动/被动模式\nquote PORT / PASV\n```\n\n","slug":"CentOS7下搭建FTP","published":1,"updated":"2019-10-27T13:01:49.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxckp0009d4kpac182d5q","content":"<p>环境：</p>\n<ul>\n<li>百度云服务器Cent OS 7</li>\n<li>使用客户端win 10</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"安装并启动-FTP-服务\"><a href=\"#安装并启动-FTP-服务\" class=\"headerlink\" title=\"安装并启动 FTP 服务\"></a>安装并启动 FTP 服务</h2><h3 id=\"安装-VSFTPD\"><a href=\"#安装-VSFTPD\" class=\"headerlink\" title=\"安装 VSFTPD\"></a>安装 VSFTPD</h3><p>使用 <code>yum</code> 安装 <code>vsftpd</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y vsftpd</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-VSFTPD\"><a href=\"#启动-VSFTPD\" class=\"headerlink\" title=\"启动 VSFTPD\"></a>启动 VSFTPD</h3><p>安装完成后，启动 FTP 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br><span class=\"line\"><span class=\"comment\"># CentOS 7使用下面的命令启动服务</span></span><br><span class=\"line\">systemctl start vsftpd.service</span><br><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> vsftpd</span><br></pre></td></tr></table></figure>\n<p>启动后，可以看到系统已经监听了 21 端口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nltp | grep 21</span><br></pre></td></tr></table></figure>\n<p>此时，访问 <a href=\"ftp://192.168.1.170\" target=\"_blank\" rel=\"noopener\">ftp://192.168.1.170</a> 可浏览机器上的 /var/ftp目录了。</p>\n<h2 id=\"配置-FTP-权限\"><a href=\"#配置-FTP-权限\" class=\"headerlink\" title=\"配置 FTP 权限\"></a>配置 FTP 权限</h2><h3 id=\"了解-VSFTP-配置\"><a href=\"#了解-VSFTP-配置\" class=\"headerlink\" title=\"了解 VSFTP 配置\"></a>了解 VSFTP 配置</h3><p>vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：</p>\n<ul>\n<li>vsftpd.conf 为主要配置文件</li>\n<li>ftpusers 配置禁止访问 FTP 服务器的用户列表</li>\n<li>user_list 配置用户访问控制</li>\n</ul>\n<h3 id=\"阻止匿名访问和切换根目录\"><a href=\"#阻止匿名访问和切换根目录\" class=\"headerlink\" title=\"阻止匿名访问和切换根目录\"></a>阻止匿名访问和切换根目录</h3><p>匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。</p>\n<p>编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 禁用匿名用户  12 YES 改为NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"># 禁止切换根目录 101 行 删除#</span><br><span class=\"line\">chroot_local_user=YES</span><br></pre></td></tr></table></figure>\n<p>编辑完成后保存配置，重新启动 FTP 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br><span class=\"line\"><span class=\"comment\"># CentOS 7</span></span><br><span class=\"line\">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure>\n<p>vsftpd.conf配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 是否允许匿名登录</span><br><span class=\"line\">anonymous_enable=YES</span><br><span class=\"line\"># 是否允许本地用户登录</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"># 是否允许本地用户对FTP服务器文件具有写权限</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"># 本地用户主目录</span><br><span class=\"line\">local_root=/var/ftp</span><br><span class=\"line\"># 匿名用户主目录</span><br><span class=\"line\">anon_root=/var/ftp/pub</span><br><span class=\"line\"># 是否允许匿名用户上传文件，如允许，须将全局的write_enable=YES</span><br><span class=\"line\">anon_upload_enable=YES</span><br><span class=\"line\"># 是否允许匿名用户创建新文件夹</span><br><span class=\"line\">anon_mkdir_write_enable=YES</span><br><span class=\"line\"># 容许匿名用户除了新建和上传外的其他权限</span><br><span class=\"line\">anon_other_write_enable=YES</span><br><span class=\"line\"># 本地用户掩码</span><br><span class=\"line\">local_umask=022</span><br><span class=\"line\"># 设置匿名登入者新增或上传档案时的umask值</span><br><span class=\"line\">anon_umask=022</span><br><span class=\"line\"># 是否激活目录欢迎信息功能</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"># 主动模式数据传输20端口</span><br><span class=\"line\">connect_from_port_20=NO</span><br><span class=\"line\">xferlog_std_format=YES</span><br><span class=\"line\"># 是否监听ipv4</span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"># listen_ipv6=YES</span><br><span class=\"line\"></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">userlist_enable=YES</span><br><span class=\"line\">tcp_wrappers=YES</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否设置被动模式</span><br><span class=\"line\">pasv_enable=YES</span><br><span class=\"line\"></span><br><span class=\"line\"># 被动模式传输使用端口</span><br><span class=\"line\">pasv_min_port=20020</span><br><span class=\"line\">pasv_max_port=20020</span><br><span class=\"line\"></span><br><span class=\"line\"># 被动模式返回给客户端的ip地址(服务器内网穿透时使用)</span><br><span class=\"line\">pasv_address=0.0.0.0( 服务器外网ip )</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置用户访问目录，默认只允许用户自己的ftp目录</span><br><span class=\"line\"># 需要同时设置allow_writeable_chroot，允许受限用户的写权限，不然会报错</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\">chroot_list_enable=YES</span><br><span class=\"line\">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class=\"line\">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>chroot_local_user=YES</th>\n<th>chroot_local_user=NO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>chroot_list_enable=YES</strong></td>\n<td>1.所有用户都被限制在其主目录下 <br>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，不受限制</td>\n<td>1.所有用户都不被限制其主目录下 <br>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，受到限制</td>\n</tr>\n<tr>\n<td><strong>chroot_list_enable=NO</strong></td>\n<td>1.所有用户都被限制在其主目录下<br> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户</td>\n<td>1.所有用户都不被限制其主目录下<br> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"创建-FTP-用户\"><a href=\"#创建-FTP-用户\" class=\"headerlink\" title=\"创建 FTP 用户\"></a>创建 FTP 用户</h3><p>创建一个用户 <code>ftpuser</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd ftpuser</span><br></pre></td></tr></table></figure>\n<p>为用户 ftpuser 设置密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"pwd\"</span> | passwd ftpuser --stdin</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制该用户仅能通过-FTP-访问\"><a href=\"#限制该用户仅能通过-FTP-访问\" class=\"headerlink\" title=\"限制该用户仅能通过 FTP 访问\"></a>限制该用户仅能通过 FTP 访问</h3><p>限制用户 <code>ftpuser</code>只能通过 FTP 访问服务器，而不能直接登录服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure>\n<h3 id=\"为用户分配主目录\"><a href=\"#为用户分配主目录\" class=\"headerlink\" title=\"为用户分配主目录\"></a>为用户分配主目录</h3><p>因安全问题，vsftpd不允许匿名用户在ftp主目录上传，可以新建一个子目录，然后设置权限为777</p>\n<p>为用户 <code>ftpuser</code>创建主目录并约定：</p>\n<p><code>/data/ftp</code> 为主目录, 该目录不可上传文件<br><code>/data/ftp/pub</code> 文件只能上传到该目录下</p>\n<p>在<code>/data</code>中创建相关的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/ftp/pub</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建登录欢迎文件\"><a href=\"#创建登录欢迎文件\" class=\"headerlink\" title=\"创建登录欢迎文件\"></a>创建登录欢迎文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Welcome to use FTP service.\"</span> &gt; /data/ftp/welcome.txt</span><br></pre></td></tr></table></figure>\n<p>设置访问权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</span><br></pre></td></tr></table></figure>\n<p>这里去掉了ftp目录写入的权限</p>\n<p>设置为用户的主目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -d /data/ftp ftpuser</span><br></pre></td></tr></table></figure>\n<p>注意：记得关闭防火墙或者开放FTP默认端口(21)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭SELinux服务</span></span><br><span class=\"line\">setenforce 0 </span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">iptables -F</span><br></pre></td></tr></table></figure>\n<p>base: <a href=\"https://www.linuxidc.com/Linux/2017-11/148518.htm\" target=\"_blank\" rel=\"noopener\">https://www.linuxidc.com/Linux/2017-11/148518.htm</a></p>\n<h2 id=\"FTP的连接方式\"><a href=\"#FTP的连接方式\" class=\"headerlink\" title=\"FTP的连接方式\"></a>FTP的连接方式</h2><blockquote>\n<p>FTP是仅基于TCP的服务，不支持UDP。与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）</p>\n</blockquote>\n<blockquote>\n<p>主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。</p>\n</blockquote>\n<blockquote>\n<p>主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。</p>\n</blockquote>\n<blockquote>\n<p>被动模式只需要服务器端开放端口给客户端连接就行了。</p>\n</blockquote>\n<h3 id=\"主动模式-PORT\"><a href=\"#主动模式-PORT\" class=\"headerlink\" title=\"主动模式(PORT)\"></a>主动模式(PORT)</h3><p>PORT是主动模式，在建立数据通道时，服务端去连接别人</p>\n<p>工作过程：</p>\n<ol>\n<li>客户端从一个任意的非特权端口N（N大于1024）连接到FTP服务器的命令端口(21端口)</li>\n<li>客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器</li>\n<li>服务器会主动从数据端口（20）连接到客户端指定的数据端口（N+1）</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223643.png\" alt></p>\n<p><strong>命令连接：客户端 （大于1024端口） -&gt;  服务器 21端口 </strong></p>\n<p><strong>数据连接：服务器 20端口 -&gt;  客户端（大于1024的端口</strong></p>\n<h3 id=\"被动模式-PASV\"><a href=\"#被动模式-PASV\" class=\"headerlink\" title=\"被动模式(PASV)\"></a>被动模式(PASV)</h3><p>PASV是被动模式，在建立数据通道时，服务端被别人连接。当客户端通知服务器它处于被动模式时才启用</p>\n<p>在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题</p>\n<p>工作过程：</p>\n<ol>\n<li>客户端打开两个任意的非特权本地端口（N 大于 1024和N+1）。第一个端口连接服务器的21端口，然后向服务器发送PASV命令，通知服务端自己处于被动状态（主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口）</li>\n<li>服务端收到命令后，会开启一个任意的非特权端口（P大于 1024），并发送PORT P命令给客户端，通知自己的数据端口是P。</li>\n<li>客户端收到命令后，通过N+1端口连接服务器的端口P, 用来传送数据</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223749.png\" alt></p>\n<p><strong>命令连接：客户端大于1024端口 -&gt; 服务器 21端口</strong></p>\n<p><strong>数据连接：客户端大于1024端口 -&gt; 服务器大于1024端口</strong></p>\n<p>有些ftp客户端默认就是使用PASV被动模式来连接ftp服务器的，如果我们的ftp服务器只支持主动模式，就会造成客户端可以进行用户验证，但无法列目录，也无法进行数据传送，并提示“你没有权限”这样的550返回错误</p>\n<h3 id=\"主动模式与被动模式的优缺点\"><a href=\"#主动模式与被动模式的优缺点\" class=\"headerlink\" title=\"主动模式与被动模式的优缺点\"></a>主动模式与被动模式的优缺点</h3><ul>\n<li><p>主动FTP - 对FTP<code>服务器</code>的管理有利</p>\n<p>优点：服务端配置简单，利于服务器安全管理，服务器只需要开放21端口</p>\n<p>缺点：如果客户端开启了防火墙，或客户端处于内网（NAT网关之后）， 那么服务器对客户端端口发起的连接可能会失败</p>\n</li>\n<li><p>被动FTP - 对FTP<code>客户端</code>的管理有利</p>\n<p>缺点：服务器配置管理稍显复杂，不利于安全，服务器需要开放随机高位端口以便客户端可以连接，因此大多数FTP服务软件都可以手动配置被动端口的范围</p>\n<p>优点：对客户端网络环境没有要求</p>\n</li>\n</ul>\n<h3 id=\"常用方案\"><a href=\"#常用方案\" class=\"headerlink\" title=\"常用方案\"></a>常用方案</h3><p>被动模式下，在FTP服务端设置被动模式下开放的随机端口范围，然后设置服务器防火墙规则，开放服务器端对应的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pasv_enable=YES   //开启PASV模式</span><br><span class=\"line\">pasv_min_port=40000   //最小端口号</span><br><span class=\"line\">pasv_max_port=40000   //最大端口号</span><br><span class=\"line\">pasv_promiscuous=YES</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOS环境下FTP常用命令\"><a href=\"#DOS环境下FTP常用命令\" class=\"headerlink\" title=\"DOS环境下FTP常用命令\"></a>DOS环境下FTP常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 与服务器建立连接</span></span><br><span class=\"line\">open/ftp ...</span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\"><span class=\"comment\"># 切换本地目录</span></span><br><span class=\"line\">lcd</span><br><span class=\"line\"><span class=\"comment\"># 下载文件 / 下载多个文件</span></span><br><span class=\"line\">get / wget</span><br><span class=\"line\"><span class=\"comment\"># 上传文件</span></span><br><span class=\"line\">send / put</span><br><span class=\"line\"><span class=\"comment\"># 断开连接</span></span><br><span class=\"line\"><span class=\"built_in\">bye</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭交互模式</span></span><br><span class=\"line\">prompt off</span><br><span class=\"line\"><span class=\"comment\"># 切换主动/被动模式</span></span><br><span class=\"line\">quote PORT / PASV</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":3992,"excerpt":"<p>环境：</p>\n<ul>\n<li>百度云服务器Cent OS 7</li>\n<li>使用客户端win 10</li>\n</ul>","more":"<h2 id=\"安装并启动-FTP-服务\"><a href=\"#安装并启动-FTP-服务\" class=\"headerlink\" title=\"安装并启动 FTP 服务\"></a>安装并启动 FTP 服务</h2><h3 id=\"安装-VSFTPD\"><a href=\"#安装-VSFTPD\" class=\"headerlink\" title=\"安装 VSFTPD\"></a>安装 VSFTPD</h3><p>使用 <code>yum</code> 安装 <code>vsftpd</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y vsftpd</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-VSFTPD\"><a href=\"#启动-VSFTPD\" class=\"headerlink\" title=\"启动 VSFTPD\"></a>启动 VSFTPD</h3><p>安装完成后，启动 FTP 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br><span class=\"line\"><span class=\"comment\"># CentOS 7使用下面的命令启动服务</span></span><br><span class=\"line\">systemctl start vsftpd.service</span><br><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> vsftpd</span><br></pre></td></tr></table></figure>\n<p>启动后，可以看到系统已经监听了 21 端口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -nltp | grep 21</span><br></pre></td></tr></table></figure>\n<p>此时，访问 <a href=\"ftp://192.168.1.170\" target=\"_blank\" rel=\"noopener\">ftp://192.168.1.170</a> 可浏览机器上的 /var/ftp目录了。</p>\n<h2 id=\"配置-FTP-权限\"><a href=\"#配置-FTP-权限\" class=\"headerlink\" title=\"配置 FTP 权限\"></a>配置 FTP 权限</h2><h3 id=\"了解-VSFTP-配置\"><a href=\"#了解-VSFTP-配置\" class=\"headerlink\" title=\"了解 VSFTP 配置\"></a>了解 VSFTP 配置</h3><p>vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：</p>\n<ul>\n<li>vsftpd.conf 为主要配置文件</li>\n<li>ftpusers 配置禁止访问 FTP 服务器的用户列表</li>\n<li>user_list 配置用户访问控制</li>\n</ul>\n<h3 id=\"阻止匿名访问和切换根目录\"><a href=\"#阻止匿名访问和切换根目录\" class=\"headerlink\" title=\"阻止匿名访问和切换根目录\"></a>阻止匿名访问和切换根目录</h3><p>匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。</p>\n<p>编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 禁用匿名用户  12 YES 改为NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"># 禁止切换根目录 101 行 删除#</span><br><span class=\"line\">chroot_local_user=YES</span><br></pre></td></tr></table></figure>\n<p>编辑完成后保存配置，重新启动 FTP 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br><span class=\"line\"><span class=\"comment\"># CentOS 7</span></span><br><span class=\"line\">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure>\n<p>vsftpd.conf配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 是否允许匿名登录</span><br><span class=\"line\">anonymous_enable=YES</span><br><span class=\"line\"># 是否允许本地用户登录</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"># 是否允许本地用户对FTP服务器文件具有写权限</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"># 本地用户主目录</span><br><span class=\"line\">local_root=/var/ftp</span><br><span class=\"line\"># 匿名用户主目录</span><br><span class=\"line\">anon_root=/var/ftp/pub</span><br><span class=\"line\"># 是否允许匿名用户上传文件，如允许，须将全局的write_enable=YES</span><br><span class=\"line\">anon_upload_enable=YES</span><br><span class=\"line\"># 是否允许匿名用户创建新文件夹</span><br><span class=\"line\">anon_mkdir_write_enable=YES</span><br><span class=\"line\"># 容许匿名用户除了新建和上传外的其他权限</span><br><span class=\"line\">anon_other_write_enable=YES</span><br><span class=\"line\"># 本地用户掩码</span><br><span class=\"line\">local_umask=022</span><br><span class=\"line\"># 设置匿名登入者新增或上传档案时的umask值</span><br><span class=\"line\">anon_umask=022</span><br><span class=\"line\"># 是否激活目录欢迎信息功能</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"># 主动模式数据传输20端口</span><br><span class=\"line\">connect_from_port_20=NO</span><br><span class=\"line\">xferlog_std_format=YES</span><br><span class=\"line\"># 是否监听ipv4</span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"># listen_ipv6=YES</span><br><span class=\"line\"></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">userlist_enable=YES</span><br><span class=\"line\">tcp_wrappers=YES</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否设置被动模式</span><br><span class=\"line\">pasv_enable=YES</span><br><span class=\"line\"></span><br><span class=\"line\"># 被动模式传输使用端口</span><br><span class=\"line\">pasv_min_port=20020</span><br><span class=\"line\">pasv_max_port=20020</span><br><span class=\"line\"></span><br><span class=\"line\"># 被动模式返回给客户端的ip地址(服务器内网穿透时使用)</span><br><span class=\"line\">pasv_address=0.0.0.0( 服务器外网ip )</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置用户访问目录，默认只允许用户自己的ftp目录</span><br><span class=\"line\"># 需要同时设置allow_writeable_chroot，允许受限用户的写权限，不然会报错</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\">chroot_list_enable=YES</span><br><span class=\"line\">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class=\"line\">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>chroot_local_user=YES</th>\n<th>chroot_local_user=NO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>chroot_list_enable=YES</strong></td>\n<td>1.所有用户都被限制在其主目录下 <br>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，不受限制</td>\n<td>1.所有用户都不被限制其主目录下 <br>2.使用chroot_list_file指定的用户列表，这些用户作为“例外”，受到限制</td>\n</tr>\n<tr>\n<td><strong>chroot_list_enable=NO</strong></td>\n<td>1.所有用户都被限制在其主目录下<br> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户</td>\n<td>1.所有用户都不被限制其主目录下<br> 2.不使用chroot_list_file指定的用户列表，没有任何“例外”用户</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"创建-FTP-用户\"><a href=\"#创建-FTP-用户\" class=\"headerlink\" title=\"创建 FTP 用户\"></a>创建 FTP 用户</h3><p>创建一个用户 <code>ftpuser</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd ftpuser</span><br></pre></td></tr></table></figure>\n<p>为用户 ftpuser 设置密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"pwd\"</span> | passwd ftpuser --stdin</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制该用户仅能通过-FTP-访问\"><a href=\"#限制该用户仅能通过-FTP-访问\" class=\"headerlink\" title=\"限制该用户仅能通过 FTP 访问\"></a>限制该用户仅能通过 FTP 访问</h3><p>限制用户 <code>ftpuser</code>只能通过 FTP 访问服务器，而不能直接登录服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure>\n<h3 id=\"为用户分配主目录\"><a href=\"#为用户分配主目录\" class=\"headerlink\" title=\"为用户分配主目录\"></a>为用户分配主目录</h3><p>因安全问题，vsftpd不允许匿名用户在ftp主目录上传，可以新建一个子目录，然后设置权限为777</p>\n<p>为用户 <code>ftpuser</code>创建主目录并约定：</p>\n<p><code>/data/ftp</code> 为主目录, 该目录不可上传文件<br><code>/data/ftp/pub</code> 文件只能上传到该目录下</p>\n<p>在<code>/data</code>中创建相关的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/ftp/pub</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建登录欢迎文件\"><a href=\"#创建登录欢迎文件\" class=\"headerlink\" title=\"创建登录欢迎文件\"></a>创建登录欢迎文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Welcome to use FTP service.\"</span> &gt; /data/ftp/welcome.txt</span><br></pre></td></tr></table></figure>\n<p>设置访问权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</span><br></pre></td></tr></table></figure>\n<p>这里去掉了ftp目录写入的权限</p>\n<p>设置为用户的主目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -d /data/ftp ftpuser</span><br></pre></td></tr></table></figure>\n<p>注意：记得关闭防火墙或者开放FTP默认端口(21)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭SELinux服务</span></span><br><span class=\"line\">setenforce 0 </span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">iptables -F</span><br></pre></td></tr></table></figure>\n<p>base: <a href=\"https://www.linuxidc.com/Linux/2017-11/148518.htm\" target=\"_blank\" rel=\"noopener\">https://www.linuxidc.com/Linux/2017-11/148518.htm</a></p>\n<h2 id=\"FTP的连接方式\"><a href=\"#FTP的连接方式\" class=\"headerlink\" title=\"FTP的连接方式\"></a>FTP的连接方式</h2><blockquote>\n<p>FTP是仅基于TCP的服务，不支持UDP。与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）</p>\n</blockquote>\n<blockquote>\n<p>主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。</p>\n</blockquote>\n<blockquote>\n<p>主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。</p>\n</blockquote>\n<blockquote>\n<p>被动模式只需要服务器端开放端口给客户端连接就行了。</p>\n</blockquote>\n<h3 id=\"主动模式-PORT\"><a href=\"#主动模式-PORT\" class=\"headerlink\" title=\"主动模式(PORT)\"></a>主动模式(PORT)</h3><p>PORT是主动模式，在建立数据通道时，服务端去连接别人</p>\n<p>工作过程：</p>\n<ol>\n<li>客户端从一个任意的非特权端口N（N大于1024）连接到FTP服务器的命令端口(21端口)</li>\n<li>客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器</li>\n<li>服务器会主动从数据端口（20）连接到客户端指定的数据端口（N+1）</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223643.png\" alt></p>\n<p><strong>命令连接：客户端 （大于1024端口） -&gt;  服务器 21端口 </strong></p>\n<p><strong>数据连接：服务器 20端口 -&gt;  客户端（大于1024的端口</strong></p>\n<h3 id=\"被动模式-PASV\"><a href=\"#被动模式-PASV\" class=\"headerlink\" title=\"被动模式(PASV)\"></a>被动模式(PASV)</h3><p>PASV是被动模式，在建立数据通道时，服务端被别人连接。当客户端通知服务器它处于被动模式时才启用</p>\n<p>在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题</p>\n<p>工作过程：</p>\n<ol>\n<li>客户端打开两个任意的非特权本地端口（N 大于 1024和N+1）。第一个端口连接服务器的21端口，然后向服务器发送PASV命令，通知服务端自己处于被动状态（主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口）</li>\n<li>服务端收到命令后，会开启一个任意的非特权端口（P大于 1024），并发送PORT P命令给客户端，通知自己的数据端口是P。</li>\n<li>客户端收到命令后，通过N+1端口连接服务器的端口P, 用来传送数据</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/05/20190509223749.png\" alt></p>\n<p><strong>命令连接：客户端大于1024端口 -&gt; 服务器 21端口</strong></p>\n<p><strong>数据连接：客户端大于1024端口 -&gt; 服务器大于1024端口</strong></p>\n<p>有些ftp客户端默认就是使用PASV被动模式来连接ftp服务器的，如果我们的ftp服务器只支持主动模式，就会造成客户端可以进行用户验证，但无法列目录，也无法进行数据传送，并提示“你没有权限”这样的550返回错误</p>\n<h3 id=\"主动模式与被动模式的优缺点\"><a href=\"#主动模式与被动模式的优缺点\" class=\"headerlink\" title=\"主动模式与被动模式的优缺点\"></a>主动模式与被动模式的优缺点</h3><ul>\n<li><p>主动FTP - 对FTP<code>服务器</code>的管理有利</p>\n<p>优点：服务端配置简单，利于服务器安全管理，服务器只需要开放21端口</p>\n<p>缺点：如果客户端开启了防火墙，或客户端处于内网（NAT网关之后）， 那么服务器对客户端端口发起的连接可能会失败</p>\n</li>\n<li><p>被动FTP - 对FTP<code>客户端</code>的管理有利</p>\n<p>缺点：服务器配置管理稍显复杂，不利于安全，服务器需要开放随机高位端口以便客户端可以连接，因此大多数FTP服务软件都可以手动配置被动端口的范围</p>\n<p>优点：对客户端网络环境没有要求</p>\n</li>\n</ul>\n<h3 id=\"常用方案\"><a href=\"#常用方案\" class=\"headerlink\" title=\"常用方案\"></a>常用方案</h3><p>被动模式下，在FTP服务端设置被动模式下开放的随机端口范围，然后设置服务器防火墙规则，开放服务器端对应的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pasv_enable=YES   //开启PASV模式</span><br><span class=\"line\">pasv_min_port=40000   //最小端口号</span><br><span class=\"line\">pasv_max_port=40000   //最大端口号</span><br><span class=\"line\">pasv_promiscuous=YES</span><br></pre></td></tr></table></figure>\n<h2 id=\"DOS环境下FTP常用命令\"><a href=\"#DOS环境下FTP常用命令\" class=\"headerlink\" title=\"DOS环境下FTP常用命令\"></a>DOS环境下FTP常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 与服务器建立连接</span></span><br><span class=\"line\">open/ftp ...</span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\"><span class=\"comment\"># 切换本地目录</span></span><br><span class=\"line\">lcd</span><br><span class=\"line\"><span class=\"comment\"># 下载文件 / 下载多个文件</span></span><br><span class=\"line\">get / wget</span><br><span class=\"line\"><span class=\"comment\"># 上传文件</span></span><br><span class=\"line\">send / put</span><br><span class=\"line\"><span class=\"comment\"># 断开连接</span></span><br><span class=\"line\"><span class=\"built_in\">bye</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭交互模式</span></span><br><span class=\"line\">prompt off</span><br><span class=\"line\"><span class=\"comment\"># 切换主动/被动模式</span></span><br><span class=\"line\">quote PORT / PASV</span><br></pre></td></tr></table></figure>"},{"title":"mockjs新手入门","date":"2019-12-04T15:20:24.000Z","_content":"\n\n\n[Mock.js](http://mockjs.com/) 是一款前端开发中拦截`Ajax`请求再生成随机数据响应的工具.可以用来模拟服务器响应. 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.\n\n<!--more-->\n\n## 安装\n\n使用npm安装\n\n```shell\nnpm install mockjs\n```\n\n或者引入`js`\n\n```html\n<script src=\"http://mockjs.com/dist/mock.js\"></script>\n```\n\n**使用**\n\n```javascript\n// 使用 Mock\nvar Mock = require('mockjs')\nvar data = Mock.mock({\n    // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n    'list|1-10': [{\n        // 属性 id 是一个自增数，起始值为 1，每次增 1\n        'id|+1': 1\n    }]\n})\n// 输出结果\nconsole.log(JSON.stringify(data, null, 4))\n```\n\n## 语法规范\n\nMock.js 的语法规范包括两部分：\n\n1. 数据模板定义规范`（Data Template Definition，DTD）`\n2. 数据占位符定义规范`（Data Placeholder Definition，DPD）`\n\n### DTD\n\n数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值\n\n```xml\n'name|rule': value\n\n属性名|生成规则: 属性值\n```\n\n**注意：**\n\n- *属性名* 和 *生成规则* 之间用竖线 `|` 分隔。\n\n- *生成规则* 是可选的。\n\n- 生成规则\n\n  有 7 种格式：\n\n  1. `'name|min-max': value`\n  2. `'name|count': value`\n  3. `'name|min-max.dmin-dmax': value`\n  4. `'name|min-max.dcount': value`\n  5. `'name|count.dmin-dmax': value`\n  6. `'name|count.dcount': value`\n  7. `'name|+step': value`\n\n- **生成规则 的 含义 需要依赖 属性值的类型 才能确定。**\n\n- *属性值* 中可以含有 `@占位符`。\n\n- *属性值* 还指定了最终值的初始值和类型。\n\n**示例**\n\n**String**\n\n```xml\n// 重复string, 重复次数[min, max]\n'name|min-max': string\n// 重复次数count\n'name|count': string\n```\n\n**Number**\n\n```xml\n// 属性值自动加 1，初始值为 number\n'name|+1': number\n// 生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型\n'name|min-max': number\n// 生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位\n'name|min-max.dmin-dmax': number\n\nMock.mock({\n    'number1|1-100.1-10': 1,\n    'number2|123.1-10': 1,\n    'number3|123.3': 1,\n    'number4|123.10': 1.123\n})\n// =>\n{\n    \"number1\": 12.92,\n    \"number2\": 123.51,\n    \"number3\": 123.777,\n    \"number4\": 123.1231091814\n}\n```\n\n**Boolean**\n\n```xml\n// true or false 各50%\n'name|1': boolean\n// 值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)\n'name|min-max': value\n```\n\n**Object**\n\n```xml\n// 属性值 object 中随机选取 count 个属性\n'name|count': object\n// 从属性值 object 中随机选取 min 到 max 个属性\n'name|min-max': object\n```\n\n**Array**\n\n```xml\n// array中随机取1个\n'name|1': array\n// array 中顺序选取 1 个元素\n'name|+1': array\n// 重复属性值 array, 次数[min,max]\n'name|min-max': array\n// 重复属性值 array, 次数count\n'name|count': array\n```\n\n**Function**\n\n```xml\n// 执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 'name' 所在的对象\n'name': function\n```\n\n**RegExp**\n\n```xml\n// 正则\n'name': regexp\n\nMock.mock({\n    'regexp1': /[a-z][A-Z][0-9]/,\n    'regexp2': /\\w\\W\\s\\S\\d\\D/,\n    'regexp3': /\\d{5,10}/\n})\n// =>\n{\n    \"regexp1\": \"pJ7\",\n    \"regexp2\": \"F)\\fp1G\",\n    \"regexp3\": \"561659409\"\n}\n```\n\n\n### DPD\n\n*占位符* 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符格式：\n\n```xml\n@占位符\n@占位符(参数 [, 参数])\n```\n\n**注意：**\n\n1. 用 `@` 来标识其后的字符串是 *占位符*。\n2. *占位符* 引用的是 `Mock.Random` 中的方法。\n3. 通过 `Mock.Random.extend()` 来扩展自定义占位符。\n4. *占位符* 也可以引用 *数据模板* 中的属性。\n5. *占位符* 会优先引用 *数据模板* 中的属性。\n6. *占位符* 支持 *相对路径* 和 *绝对路径*。\n\n```xml\nMock.mock({\n    name: {\n        first: '@FIRST',\n        middle: '@MIDDLE',\n        last: '@LAST',\n        full: '@first @middle @last'\n    }\n})\n// =>\n{\n    \"name\": {\n        \"first\": \"Charles\",\n        \"middle\": \"Brenda\",\n        \"last\": \"Lopez\",\n        \"full\": \"Charles Brenda Lopez\"\n    }\n}\n```\n\n## Mock.mock()\n\n1. Mock.mock( rurl?, rtype?, template|function( options ) )\n\n根据数据模板生成模拟数据。\n\n2. Mock.mock( template )\n\n根据数据模板生成模拟数据。\n\n3. Mock.mock( rurl, template )\n\n记录数据模板。当拦截到匹配 `rurl` 的 Ajax 请求时，将根据数据模板 `template` 生成模拟数据，并作为响应数据返回。\n\n4. Mock.mock( rurl, function( options ) )\n\n记录用于生成响应数据的函数。当拦截到匹配 `rurl` 的 Ajax 请求时，函数 `function(options)` 将被执行，并把执行结果作为响应数据返回。\n\n5. Mock.mock( rurl, rtype, template )\n\n记录数据模板。当拦截到匹配 `rurl` 和 `rtype` 的 Ajax 请求时，将根据数据模板 `template` 生成模拟数据，并作为响应数据返回。\n\n6. Mock.mock( rurl, rtype, function( options ) )\n\n记录用于生成响应数据的函数。当拦截到匹配 `rurl` 和 `rtype` 的 Ajax 请求时，函数 `function(options)` 将被执行，并把执行结果作为响应数据返回。\n\n7. rurl\n\n可选。\n\n表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 `/\\/domain\\/list\\.json/`、`'/domian/list.json'`。\n\n8. rtype\n\n可选。\n\n表示需要拦截的 Ajax 请求类型。例如 `GET`、`POST`、`PUT`、`DELETE` 等。\n\n9. template\n\n可选。\n\n表示数据模板，可以是对象或字符串。例如 `{ 'data|1-10':[{}] }`、`'@EMAIL'`。\n\n10. function(options)\n\n可选。\n\n表示用于生成响应数据的函数。\n\n11. options\n\n指向本次请求的 Ajax 选项集，含有 `url`、`type` 和 `body` 三个属性，\n\n## Mock设置\n\n指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 `400`，表示 400 毫秒 后才会返回响应内容；也可以是横杠 `'-'` 风格的字符串，例如 `'200-600'`，表示响应时间介于 200 和 600 毫秒之间。默认值是`'10-100'`\n\n```xml\nMock.setup({\n    timeout: 400\n})\nMock.setup({\n    timeout: '200-600'\n})\n```\n\n## Mock.Random\n\nMock.Random 是一个工具类，用于生成各种随机数据\n\n**Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数])** \n\n```xml\n\nvar Random = Mock.Random\nRandom.email()\n// => \"n.clark@miller.io\"\nMock.mock('@email')\n// => \"y.lee@lewis.org\"\nMock.mock( { email: '@email' } )\n// => { email: \"v.lewis@hall.gov\" }\n\n```\n\n### 方法\n\nMock.Random 提供的完整方法（占位符）如下：\n\n| Type          | Method                                                       |\n| ------------- | ------------------------------------------------------------ |\n| Basic         | boolean, natural, integer, float, character, string, range, date, time, datetime, now |\n| Image         | image, dataImage                                             |\n| Color         | color                                                        |\n| Text          | paragraph, sentence, word, title, cparagraph, csentence, cword, ctitle |\n| Name          | first, last, name, cfirst, clast, cname                      |\n| Web           | url, domain, email, ip, tld                                  |\n| Address       | area, region                                                 |\n| Helper        | capitalize, upper, lower, pick, shuffle                      |\n| Miscellaneous | guid, id                                                     |\n\n**扩展**\n\n```xml\nRandom.extend({\n    constellation: function(date) {\n        var constellations = ['白羊座', '金牛座', '双子座', '巨蟹座', '狮子座', '处女座', '天秤座', '天蝎座', '射手座', '摩羯座', '水瓶座', '双鱼座']\n        return this.pick(constellations)\n    }\n})\nRandom.constellation()\n// => \"水瓶座\"\nMock.mock('@CONSTELLATION')\n// => \"天蝎座\"\nMock.mock({\n    constellation: '@CONSTELLATION'\n})\n// => { constellation: \"射手座\" }\n```\n\n### Basic\n\n```xml\n// 1. 返回一个随机的布尔值\nRandom.boolean( min?, max?, current? )\nRandom.boolean()\n// => true\nRandom.boolean(1, 9, true)\n// => false\n\n// 2. 返回一个随机的自然数（大于等于 0 的整数）\nRandom.natural( min?, max? )\n\n// 3. 返回一个随机的整数\nRandom.integer( min?, max? )\n\n// 4. 返回一个随机的浮点数,min/max证书部分最值，dmin,dmax小数部分位数最值\nRandom.float( min?, max?, dmin?, dmax? )\nRandom.float(60, 100, 3, 5)\n// => 70.6849\n\n// 5. 返回一个随机字符\nRandom.character( pool? )\n果传入了 'lower' 或 'upper'、'number'、'symbol'，表示从内置的字符池从选取\n{\n    lower: \"abcdefghijklmnopqrstuvwxyz\",\n    upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    number: \"0123456789\",\n    symbol: \"!@#$%^&*()[]\"\n}\n\n// 6. 返回一个随机字符串\nRandom.string( pool?, min?, max? )\n\n// 7. 返回一个整型数组\nRandom.range( start?, stop, step? )\nRandom.range(10)\n// => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nRandom.range(3, 7)\n// => [3, 4, 5, 6]\nRandom.range(1, 10, 2)\n// => [1, 3, 5, 7, 9]\n```\n\n### Date\n\n```xml\n// 返回一个随机的日期字符串\nRandom.date( format? )\n\n// 返回一个随机的时间字符串\nRandom.time( format? )\n\n// 返回一个随机的日期和时间字符串,默认值为 yyyy-MM-dd HH:mm:ss\nRandom.datetime( format? )\n\n// 返回当前的日期和时间字符串。\nRandom.now( unit?, format? )\n```\n\n指示生成的日期字符串的格式。默认值为 `yyyy-MM-dd`\n\n| Format | Description                                              | Example      |\n| ------ | -------------------------------------------------------- | ------------ |\n| yyyy   | A full numeric representation of a year, 4 digits        | 1999 or 2003 |\n| yy     | A two digit representation of a year                     | 99 or 03     |\n| y      | A two digit representation of a year                     | 99 or 03     |\n| MM     | Numeric representation of a month, with leading zeros    | 01 to 12     |\n| M      | Numeric representation of a month, without leading zeros | 1 to 12      |\n| dd     | Day of the month, 2 digits with leading zeros            | 01 to 31     |\n| d      | Day of the month without leading zeros                   | 1 to 31      |\n| HH     | 24-hour format of an hour with leading zeros             | 00 to 23     |\n| H      | 24-hour format of an hour without leading zeros          | 0 to 23      |\n| hh     | 12-hour format of an hour without leading zeros          | 1 to 12      |\n| h      | 12-hour format of an hour with leading zeros             | 01 to 12     |\n| mm     | Minutes, with leading zeros                              | 00 to 59     |\n| m      | Minutes, without leading zeros                           | 0 to 59      |\n| ss     | Seconds, with leading zeros                              | 00 to 59     |\n| s      | Seconds, without leading zeros                           | 0 to 59      |\n| SS     | Milliseconds, with leading zeros                         | 000 to 999   |\n| S      | Milliseconds, without leading zeros                      | 0 to 999     |\n| A      | Uppercase Ante meridiem and Post meridiem                | AM or PM     |\n| a      | Lowercase Ante meridiem and Post meridiem                | am or pm     |\n| T      | Milliseconds, since 1970-1-1 00:00:00 UTC                | 759883437303 |\n\n```xml\n// 示例\nRandom.date()\n// => \"2002-10-23\"\nRandom.date('yyyy-MM-dd')\n// => \"1983-01-29\"\n\nRandom.time('HH:mm:ss')\n// => \"03:57:53\"\n\nRandom.datetime('yyyy-MM-dd A HH:mm:ss')\n// => \"1976-04-24 AM 03:48:25\n\nRandom.now('yyyy-MM-dd HH:mm:ss SS')\n// => \"2014-04-29 20:08:38 157\"\n```\n\n### Image\n\n```xml\n// 生成一个随机的图片地址\n// Random.image() 用于生成高度自定义的图片地址，一般情况下，应该使用更简单的 Random.dataImage()\nRandom.image( size?, background?, foreground?, format?, text? )\nRandom.image()\nRandom.image( size )\nRandom.image( size, background )\nRandom.image( size, background, text )\nRandom.image( size, background, foreground, text )\nRandom.image( size, background, foreground, format, text )\n\n// 生成一段随机的 Base64 图片编码\nRandom.dataImage( size?, text? )\nRandom.dataImage()\nRandom.dataImage( size )\nRandom.dataImage( size, text )\n\n```\n\n### Color\n\n```xml\nRandom.color()\n// => \"#3538B2\"\nRandom.hex()\n// => \"#3538B2\"\nRandom.rgb()\n// => \"rgb(242, 198, 121)\"\nRandom.rgba()\n// => \"rgba(242, 198, 121, 0.13)\"\nRandom.hsl()\n// => \"hsl(345, 82, 71)\"\n```\n\n### Text\n\n```xml\n// 随机生成一段文本\nRandom.paragraph( min?, max? )\nRandom.paragraph()\nRandom.paragraph( len )\nRandom.paragraph( min, max )\n\n// 随机生成一段中文文本\nRandom.cparagraph( min?, max? )\nRandom.cparagraph()\nRandom.cparagraph( len )\nRandom.cparagraph( min, max )\n\n// 随机生成一个句子，第一个单词的首字母大写\nRandom.sentence( min?, max? )\nRandom.sentence()\nRandom.sentence( len )\nRandom.sentence( min, max )\n\n// 随机生成一段中文文本\nRandom.csentence( min?, max? )\nRandom.csentence()\nRandom.csentence( len )\nRandom.csentence( min, max )\n\n// 随机生成一个单词\nRandom.word( min?, max? )\nRandom.word()\nRandom.word( len )\nRandom.word( min, max )\n\n// 随机生成一个汉字\nRandom.cword( pool?, min?, max? )\nRandom.cword()\nRandom.cword( pool )\nRandom.cword( length )\nRandom.cword( pool, length )\nRandom.cword( min, max )\nRandom.cword( pool, min, max )\n\n// 随机生成一句标题，其中每个单词的首字母大写\nRandom.title( min?, max? )\n\n// 随机生成一句中文标题\nRandom.ctitle( min?, max? )\n```\n\n\n\n### Name\n\n```xml\nRandom.first()\nRandom.last()\nRandom.name( middle? )\n\nRandom.cfirst()\nRandom.clast()\nRandom.cname()\n```\n\n\n\n  ### Web\n\n```xml\nRandom.url( protocol?, host? )\nRandom.url()\n// => \"mid://axmg.bg/bhyq\"\nRandom.url('http')\n// => \"http://splap.yu/qxzkyoubp\"\nRandom.url('http', 'nuysoft.com')\n// => \"http://nuysoft.com/ewacecjhe\"\n\nRandom.protocol()\n// => \"ftp\"\nRandom.domain()\n// => \"kozfnb.org\"\nRandom.tld()\n// => \"net\"\nRandom.email()\n// => \"x.davis@jackson.edu\"\nRandom.email('nuysoft.com')\n// => \"h.pqpneix@nuysoft.com\"\n\nRandom.ip()\n// => \"34.206.109.169\"\n```\n\n\n\n### Address\n\n```xml\nRandom.region()\n// => \"华北\"\nRandom.province()\n// => \"黑龙江省\"\nRandom.city()\n// => \"唐山市\"\nRandom.city(true)\n// => \"福建省 漳州市\"\nRandom.county()\n// => \"上杭县\"\nRandom.county(true)\n// => \"甘肃省 白银市 会宁县\"\nRandom.zip()\n// => \"908812\"\n```\n\n### Helper\n\n```xml\n\nRandom.capitalize('hello')\n// => \"Hello\"\nRandom.upper('hello')\n// => \"HELLO\"\nRandom.lower('HELLO')\n// => \"hello\"\nRandom.pick(['a', 'e', 'i', 'o', 'u'])\n// => \"o\"\nRandom.shuffle(['a', 'e', 'i', 'o', 'u'])\n// => [\"o\", \"u\", \"e\", \"i\", \"a\"]\n```\n\n### Miscellaneous\n\n```xml\nRandom.guid()\n// => \"662C63B4-FD43-66F4-3328-C54E3FF0D56E\"\nRandom.id()\n// => \"420000200710091854\" 身份证\nRandom.increment()\n// => 1\nRandom.increment(100)\n// => 101\nRandom.increment(1000)\n// => 1101\n```\n\n## Mock.valid()\n\n用来校验真实数据`data`是否与数据模板`template`匹配\n\n```xml\n\nMock.valid( template, data )\n\nvar template = {\n    name: 'value1'\n}\nvar data = {\n    name: 'value2'\n}\nMock.valid(template, data)\n// =>\n[\n    {\n        \"path\": [\n            \"data\",\n            \"name\"\n        ],\n        \"type\": \"value\",\n        \"actual\": \"value2\",\n        \"expected\": \"value1\",\n        \"action\": \"equal to\",\n        \"message\": \"[VALUE] Expect ROOT.name'value is equal to value1, but is value2\"\n    }\n]\n\n```\n\n## Mock.toJSONSchema()\n\n把 Mock.js 风格的数据模板 template 转换成 JSON Schema\n\n\n\n## Vue项目中使用mock\n\n1. 安装\n\n```shell\nnpm install --save-dev mockjs\n```\n\n2. 引入\n\n在main.js， 引入mockjs\n\n```xml\nprocess.env === 'development' && require('@/mock')\n```\n\n3. 创建mock\n\n在src目录下创建mock目录，添加index.js文件，这里建议给每类api使用单独的mock文件\n\n`mock/index.js`\n\n```javascript\n// 将所有的mock文件引入\nrequire('@/mock/usermock')\nrequire('@/mock/wxmock')\n\n// 在这里可以做一些通用的配置\nconst Mock = require(\"mockjs\")\n// 设置所有ajax请求的超时时间，模拟网络传输耗时\nMock.setup({\n    timeout: 0-300\n})\n```\n\nmock/usermock.js\n\n```javascript\nimport ApiPath from \"@/api/ApiPath\"\nconst Mock = require(\"mockjs\")\n\nMock.mock(ApiPath.user.getUserInfo, \"get\", {\n    \"code\": 0,\n    \"data\": {\n      \"fullName\": \"@CNAME\", // 随机生成中文人名\n      \"userId\": 1000234234001,\n      \"username\": \"zhangsan\"\n    },\n    \"msg\": \"success\"\n})\n```\n\n## 常用Mock\n\n```javascript\n\nMock.mock({\n    login_id: Mock.Random.integer(11),\n    name: Mock.Random.cname(),\n    enable: Mock.Random.integer(0, 1),\n    gmt_create: Mock.Random.datetime('yyyy-MM-dd HH:mm:ss')\n})\n\n```\n\n\n\n## 参考文章\n\n- [Mock.js使用](<https://segmentfault.com/a/1190000008839142>)","source":"_posts/20191204-mockjs新手入门.md","raw":"---\ntitle: mockjs新手入门\ndate: 2019-12-04 23:20:24\ntags: mock.js\ncategories: \n - 技术\n - 测试\n---\n\n\n\n[Mock.js](http://mockjs.com/) 是一款前端开发中拦截`Ajax`请求再生成随机数据响应的工具.可以用来模拟服务器响应. 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.\n\n<!--more-->\n\n## 安装\n\n使用npm安装\n\n```shell\nnpm install mockjs\n```\n\n或者引入`js`\n\n```html\n<script src=\"http://mockjs.com/dist/mock.js\"></script>\n```\n\n**使用**\n\n```javascript\n// 使用 Mock\nvar Mock = require('mockjs')\nvar data = Mock.mock({\n    // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n    'list|1-10': [{\n        // 属性 id 是一个自增数，起始值为 1，每次增 1\n        'id|+1': 1\n    }]\n})\n// 输出结果\nconsole.log(JSON.stringify(data, null, 4))\n```\n\n## 语法规范\n\nMock.js 的语法规范包括两部分：\n\n1. 数据模板定义规范`（Data Template Definition，DTD）`\n2. 数据占位符定义规范`（Data Placeholder Definition，DPD）`\n\n### DTD\n\n数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值\n\n```xml\n'name|rule': value\n\n属性名|生成规则: 属性值\n```\n\n**注意：**\n\n- *属性名* 和 *生成规则* 之间用竖线 `|` 分隔。\n\n- *生成规则* 是可选的。\n\n- 生成规则\n\n  有 7 种格式：\n\n  1. `'name|min-max': value`\n  2. `'name|count': value`\n  3. `'name|min-max.dmin-dmax': value`\n  4. `'name|min-max.dcount': value`\n  5. `'name|count.dmin-dmax': value`\n  6. `'name|count.dcount': value`\n  7. `'name|+step': value`\n\n- **生成规则 的 含义 需要依赖 属性值的类型 才能确定。**\n\n- *属性值* 中可以含有 `@占位符`。\n\n- *属性值* 还指定了最终值的初始值和类型。\n\n**示例**\n\n**String**\n\n```xml\n// 重复string, 重复次数[min, max]\n'name|min-max': string\n// 重复次数count\n'name|count': string\n```\n\n**Number**\n\n```xml\n// 属性值自动加 1，初始值为 number\n'name|+1': number\n// 生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型\n'name|min-max': number\n// 生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位\n'name|min-max.dmin-dmax': number\n\nMock.mock({\n    'number1|1-100.1-10': 1,\n    'number2|123.1-10': 1,\n    'number3|123.3': 1,\n    'number4|123.10': 1.123\n})\n// =>\n{\n    \"number1\": 12.92,\n    \"number2\": 123.51,\n    \"number3\": 123.777,\n    \"number4\": 123.1231091814\n}\n```\n\n**Boolean**\n\n```xml\n// true or false 各50%\n'name|1': boolean\n// 值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)\n'name|min-max': value\n```\n\n**Object**\n\n```xml\n// 属性值 object 中随机选取 count 个属性\n'name|count': object\n// 从属性值 object 中随机选取 min 到 max 个属性\n'name|min-max': object\n```\n\n**Array**\n\n```xml\n// array中随机取1个\n'name|1': array\n// array 中顺序选取 1 个元素\n'name|+1': array\n// 重复属性值 array, 次数[min,max]\n'name|min-max': array\n// 重复属性值 array, 次数count\n'name|count': array\n```\n\n**Function**\n\n```xml\n// 执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 'name' 所在的对象\n'name': function\n```\n\n**RegExp**\n\n```xml\n// 正则\n'name': regexp\n\nMock.mock({\n    'regexp1': /[a-z][A-Z][0-9]/,\n    'regexp2': /\\w\\W\\s\\S\\d\\D/,\n    'regexp3': /\\d{5,10}/\n})\n// =>\n{\n    \"regexp1\": \"pJ7\",\n    \"regexp2\": \"F)\\fp1G\",\n    \"regexp3\": \"561659409\"\n}\n```\n\n\n### DPD\n\n*占位符* 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符格式：\n\n```xml\n@占位符\n@占位符(参数 [, 参数])\n```\n\n**注意：**\n\n1. 用 `@` 来标识其后的字符串是 *占位符*。\n2. *占位符* 引用的是 `Mock.Random` 中的方法。\n3. 通过 `Mock.Random.extend()` 来扩展自定义占位符。\n4. *占位符* 也可以引用 *数据模板* 中的属性。\n5. *占位符* 会优先引用 *数据模板* 中的属性。\n6. *占位符* 支持 *相对路径* 和 *绝对路径*。\n\n```xml\nMock.mock({\n    name: {\n        first: '@FIRST',\n        middle: '@MIDDLE',\n        last: '@LAST',\n        full: '@first @middle @last'\n    }\n})\n// =>\n{\n    \"name\": {\n        \"first\": \"Charles\",\n        \"middle\": \"Brenda\",\n        \"last\": \"Lopez\",\n        \"full\": \"Charles Brenda Lopez\"\n    }\n}\n```\n\n## Mock.mock()\n\n1. Mock.mock( rurl?, rtype?, template|function( options ) )\n\n根据数据模板生成模拟数据。\n\n2. Mock.mock( template )\n\n根据数据模板生成模拟数据。\n\n3. Mock.mock( rurl, template )\n\n记录数据模板。当拦截到匹配 `rurl` 的 Ajax 请求时，将根据数据模板 `template` 生成模拟数据，并作为响应数据返回。\n\n4. Mock.mock( rurl, function( options ) )\n\n记录用于生成响应数据的函数。当拦截到匹配 `rurl` 的 Ajax 请求时，函数 `function(options)` 将被执行，并把执行结果作为响应数据返回。\n\n5. Mock.mock( rurl, rtype, template )\n\n记录数据模板。当拦截到匹配 `rurl` 和 `rtype` 的 Ajax 请求时，将根据数据模板 `template` 生成模拟数据，并作为响应数据返回。\n\n6. Mock.mock( rurl, rtype, function( options ) )\n\n记录用于生成响应数据的函数。当拦截到匹配 `rurl` 和 `rtype` 的 Ajax 请求时，函数 `function(options)` 将被执行，并把执行结果作为响应数据返回。\n\n7. rurl\n\n可选。\n\n表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 `/\\/domain\\/list\\.json/`、`'/domian/list.json'`。\n\n8. rtype\n\n可选。\n\n表示需要拦截的 Ajax 请求类型。例如 `GET`、`POST`、`PUT`、`DELETE` 等。\n\n9. template\n\n可选。\n\n表示数据模板，可以是对象或字符串。例如 `{ 'data|1-10':[{}] }`、`'@EMAIL'`。\n\n10. function(options)\n\n可选。\n\n表示用于生成响应数据的函数。\n\n11. options\n\n指向本次请求的 Ajax 选项集，含有 `url`、`type` 和 `body` 三个属性，\n\n## Mock设置\n\n指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 `400`，表示 400 毫秒 后才会返回响应内容；也可以是横杠 `'-'` 风格的字符串，例如 `'200-600'`，表示响应时间介于 200 和 600 毫秒之间。默认值是`'10-100'`\n\n```xml\nMock.setup({\n    timeout: 400\n})\nMock.setup({\n    timeout: '200-600'\n})\n```\n\n## Mock.Random\n\nMock.Random 是一个工具类，用于生成各种随机数据\n\n**Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数])** \n\n```xml\n\nvar Random = Mock.Random\nRandom.email()\n// => \"n.clark@miller.io\"\nMock.mock('@email')\n// => \"y.lee@lewis.org\"\nMock.mock( { email: '@email' } )\n// => { email: \"v.lewis@hall.gov\" }\n\n```\n\n### 方法\n\nMock.Random 提供的完整方法（占位符）如下：\n\n| Type          | Method                                                       |\n| ------------- | ------------------------------------------------------------ |\n| Basic         | boolean, natural, integer, float, character, string, range, date, time, datetime, now |\n| Image         | image, dataImage                                             |\n| Color         | color                                                        |\n| Text          | paragraph, sentence, word, title, cparagraph, csentence, cword, ctitle |\n| Name          | first, last, name, cfirst, clast, cname                      |\n| Web           | url, domain, email, ip, tld                                  |\n| Address       | area, region                                                 |\n| Helper        | capitalize, upper, lower, pick, shuffle                      |\n| Miscellaneous | guid, id                                                     |\n\n**扩展**\n\n```xml\nRandom.extend({\n    constellation: function(date) {\n        var constellations = ['白羊座', '金牛座', '双子座', '巨蟹座', '狮子座', '处女座', '天秤座', '天蝎座', '射手座', '摩羯座', '水瓶座', '双鱼座']\n        return this.pick(constellations)\n    }\n})\nRandom.constellation()\n// => \"水瓶座\"\nMock.mock('@CONSTELLATION')\n// => \"天蝎座\"\nMock.mock({\n    constellation: '@CONSTELLATION'\n})\n// => { constellation: \"射手座\" }\n```\n\n### Basic\n\n```xml\n// 1. 返回一个随机的布尔值\nRandom.boolean( min?, max?, current? )\nRandom.boolean()\n// => true\nRandom.boolean(1, 9, true)\n// => false\n\n// 2. 返回一个随机的自然数（大于等于 0 的整数）\nRandom.natural( min?, max? )\n\n// 3. 返回一个随机的整数\nRandom.integer( min?, max? )\n\n// 4. 返回一个随机的浮点数,min/max证书部分最值，dmin,dmax小数部分位数最值\nRandom.float( min?, max?, dmin?, dmax? )\nRandom.float(60, 100, 3, 5)\n// => 70.6849\n\n// 5. 返回一个随机字符\nRandom.character( pool? )\n果传入了 'lower' 或 'upper'、'number'、'symbol'，表示从内置的字符池从选取\n{\n    lower: \"abcdefghijklmnopqrstuvwxyz\",\n    upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    number: \"0123456789\",\n    symbol: \"!@#$%^&*()[]\"\n}\n\n// 6. 返回一个随机字符串\nRandom.string( pool?, min?, max? )\n\n// 7. 返回一个整型数组\nRandom.range( start?, stop, step? )\nRandom.range(10)\n// => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nRandom.range(3, 7)\n// => [3, 4, 5, 6]\nRandom.range(1, 10, 2)\n// => [1, 3, 5, 7, 9]\n```\n\n### Date\n\n```xml\n// 返回一个随机的日期字符串\nRandom.date( format? )\n\n// 返回一个随机的时间字符串\nRandom.time( format? )\n\n// 返回一个随机的日期和时间字符串,默认值为 yyyy-MM-dd HH:mm:ss\nRandom.datetime( format? )\n\n// 返回当前的日期和时间字符串。\nRandom.now( unit?, format? )\n```\n\n指示生成的日期字符串的格式。默认值为 `yyyy-MM-dd`\n\n| Format | Description                                              | Example      |\n| ------ | -------------------------------------------------------- | ------------ |\n| yyyy   | A full numeric representation of a year, 4 digits        | 1999 or 2003 |\n| yy     | A two digit representation of a year                     | 99 or 03     |\n| y      | A two digit representation of a year                     | 99 or 03     |\n| MM     | Numeric representation of a month, with leading zeros    | 01 to 12     |\n| M      | Numeric representation of a month, without leading zeros | 1 to 12      |\n| dd     | Day of the month, 2 digits with leading zeros            | 01 to 31     |\n| d      | Day of the month without leading zeros                   | 1 to 31      |\n| HH     | 24-hour format of an hour with leading zeros             | 00 to 23     |\n| H      | 24-hour format of an hour without leading zeros          | 0 to 23      |\n| hh     | 12-hour format of an hour without leading zeros          | 1 to 12      |\n| h      | 12-hour format of an hour with leading zeros             | 01 to 12     |\n| mm     | Minutes, with leading zeros                              | 00 to 59     |\n| m      | Minutes, without leading zeros                           | 0 to 59      |\n| ss     | Seconds, with leading zeros                              | 00 to 59     |\n| s      | Seconds, without leading zeros                           | 0 to 59      |\n| SS     | Milliseconds, with leading zeros                         | 000 to 999   |\n| S      | Milliseconds, without leading zeros                      | 0 to 999     |\n| A      | Uppercase Ante meridiem and Post meridiem                | AM or PM     |\n| a      | Lowercase Ante meridiem and Post meridiem                | am or pm     |\n| T      | Milliseconds, since 1970-1-1 00:00:00 UTC                | 759883437303 |\n\n```xml\n// 示例\nRandom.date()\n// => \"2002-10-23\"\nRandom.date('yyyy-MM-dd')\n// => \"1983-01-29\"\n\nRandom.time('HH:mm:ss')\n// => \"03:57:53\"\n\nRandom.datetime('yyyy-MM-dd A HH:mm:ss')\n// => \"1976-04-24 AM 03:48:25\n\nRandom.now('yyyy-MM-dd HH:mm:ss SS')\n// => \"2014-04-29 20:08:38 157\"\n```\n\n### Image\n\n```xml\n// 生成一个随机的图片地址\n// Random.image() 用于生成高度自定义的图片地址，一般情况下，应该使用更简单的 Random.dataImage()\nRandom.image( size?, background?, foreground?, format?, text? )\nRandom.image()\nRandom.image( size )\nRandom.image( size, background )\nRandom.image( size, background, text )\nRandom.image( size, background, foreground, text )\nRandom.image( size, background, foreground, format, text )\n\n// 生成一段随机的 Base64 图片编码\nRandom.dataImage( size?, text? )\nRandom.dataImage()\nRandom.dataImage( size )\nRandom.dataImage( size, text )\n\n```\n\n### Color\n\n```xml\nRandom.color()\n// => \"#3538B2\"\nRandom.hex()\n// => \"#3538B2\"\nRandom.rgb()\n// => \"rgb(242, 198, 121)\"\nRandom.rgba()\n// => \"rgba(242, 198, 121, 0.13)\"\nRandom.hsl()\n// => \"hsl(345, 82, 71)\"\n```\n\n### Text\n\n```xml\n// 随机生成一段文本\nRandom.paragraph( min?, max? )\nRandom.paragraph()\nRandom.paragraph( len )\nRandom.paragraph( min, max )\n\n// 随机生成一段中文文本\nRandom.cparagraph( min?, max? )\nRandom.cparagraph()\nRandom.cparagraph( len )\nRandom.cparagraph( min, max )\n\n// 随机生成一个句子，第一个单词的首字母大写\nRandom.sentence( min?, max? )\nRandom.sentence()\nRandom.sentence( len )\nRandom.sentence( min, max )\n\n// 随机生成一段中文文本\nRandom.csentence( min?, max? )\nRandom.csentence()\nRandom.csentence( len )\nRandom.csentence( min, max )\n\n// 随机生成一个单词\nRandom.word( min?, max? )\nRandom.word()\nRandom.word( len )\nRandom.word( min, max )\n\n// 随机生成一个汉字\nRandom.cword( pool?, min?, max? )\nRandom.cword()\nRandom.cword( pool )\nRandom.cword( length )\nRandom.cword( pool, length )\nRandom.cword( min, max )\nRandom.cword( pool, min, max )\n\n// 随机生成一句标题，其中每个单词的首字母大写\nRandom.title( min?, max? )\n\n// 随机生成一句中文标题\nRandom.ctitle( min?, max? )\n```\n\n\n\n### Name\n\n```xml\nRandom.first()\nRandom.last()\nRandom.name( middle? )\n\nRandom.cfirst()\nRandom.clast()\nRandom.cname()\n```\n\n\n\n  ### Web\n\n```xml\nRandom.url( protocol?, host? )\nRandom.url()\n// => \"mid://axmg.bg/bhyq\"\nRandom.url('http')\n// => \"http://splap.yu/qxzkyoubp\"\nRandom.url('http', 'nuysoft.com')\n// => \"http://nuysoft.com/ewacecjhe\"\n\nRandom.protocol()\n// => \"ftp\"\nRandom.domain()\n// => \"kozfnb.org\"\nRandom.tld()\n// => \"net\"\nRandom.email()\n// => \"x.davis@jackson.edu\"\nRandom.email('nuysoft.com')\n// => \"h.pqpneix@nuysoft.com\"\n\nRandom.ip()\n// => \"34.206.109.169\"\n```\n\n\n\n### Address\n\n```xml\nRandom.region()\n// => \"华北\"\nRandom.province()\n// => \"黑龙江省\"\nRandom.city()\n// => \"唐山市\"\nRandom.city(true)\n// => \"福建省 漳州市\"\nRandom.county()\n// => \"上杭县\"\nRandom.county(true)\n// => \"甘肃省 白银市 会宁县\"\nRandom.zip()\n// => \"908812\"\n```\n\n### Helper\n\n```xml\n\nRandom.capitalize('hello')\n// => \"Hello\"\nRandom.upper('hello')\n// => \"HELLO\"\nRandom.lower('HELLO')\n// => \"hello\"\nRandom.pick(['a', 'e', 'i', 'o', 'u'])\n// => \"o\"\nRandom.shuffle(['a', 'e', 'i', 'o', 'u'])\n// => [\"o\", \"u\", \"e\", \"i\", \"a\"]\n```\n\n### Miscellaneous\n\n```xml\nRandom.guid()\n// => \"662C63B4-FD43-66F4-3328-C54E3FF0D56E\"\nRandom.id()\n// => \"420000200710091854\" 身份证\nRandom.increment()\n// => 1\nRandom.increment(100)\n// => 101\nRandom.increment(1000)\n// => 1101\n```\n\n## Mock.valid()\n\n用来校验真实数据`data`是否与数据模板`template`匹配\n\n```xml\n\nMock.valid( template, data )\n\nvar template = {\n    name: 'value1'\n}\nvar data = {\n    name: 'value2'\n}\nMock.valid(template, data)\n// =>\n[\n    {\n        \"path\": [\n            \"data\",\n            \"name\"\n        ],\n        \"type\": \"value\",\n        \"actual\": \"value2\",\n        \"expected\": \"value1\",\n        \"action\": \"equal to\",\n        \"message\": \"[VALUE] Expect ROOT.name'value is equal to value1, but is value2\"\n    }\n]\n\n```\n\n## Mock.toJSONSchema()\n\n把 Mock.js 风格的数据模板 template 转换成 JSON Schema\n\n\n\n## Vue项目中使用mock\n\n1. 安装\n\n```shell\nnpm install --save-dev mockjs\n```\n\n2. 引入\n\n在main.js， 引入mockjs\n\n```xml\nprocess.env === 'development' && require('@/mock')\n```\n\n3. 创建mock\n\n在src目录下创建mock目录，添加index.js文件，这里建议给每类api使用单独的mock文件\n\n`mock/index.js`\n\n```javascript\n// 将所有的mock文件引入\nrequire('@/mock/usermock')\nrequire('@/mock/wxmock')\n\n// 在这里可以做一些通用的配置\nconst Mock = require(\"mockjs\")\n// 设置所有ajax请求的超时时间，模拟网络传输耗时\nMock.setup({\n    timeout: 0-300\n})\n```\n\nmock/usermock.js\n\n```javascript\nimport ApiPath from \"@/api/ApiPath\"\nconst Mock = require(\"mockjs\")\n\nMock.mock(ApiPath.user.getUserInfo, \"get\", {\n    \"code\": 0,\n    \"data\": {\n      \"fullName\": \"@CNAME\", // 随机生成中文人名\n      \"userId\": 1000234234001,\n      \"username\": \"zhangsan\"\n    },\n    \"msg\": \"success\"\n})\n```\n\n## 常用Mock\n\n```javascript\n\nMock.mock({\n    login_id: Mock.Random.integer(11),\n    name: Mock.Random.cname(),\n    enable: Mock.Random.integer(0, 1),\n    gmt_create: Mock.Random.datetime('yyyy-MM-dd HH:mm:ss')\n})\n\n```\n\n\n\n## 参考文章\n\n- [Mock.js使用](<https://segmentfault.com/a/1190000008839142>)","slug":"mockjs新手入门","published":1,"updated":"2019-12-04T15:22:27.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxckt000dd4kps5nmum4o","content":"<p><a href=\"http://mockjs.com/\" target=\"_blank\" rel=\"noopener\">Mock.js</a> 是一款前端开发中拦截<code>Ajax</code>请求再生成随机数据响应的工具.可以用来模拟服务器响应. 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用npm安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mockjs</span><br></pre></td></tr></table></figure>\n<p>或者引入<code>js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://mockjs.com/dist/mock.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Mock</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">'mockjs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class=\"line\">    <span class=\"string\">'list|1-10'</span>: [&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class=\"line\">        <span class=\"string\">'id|+1'</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法规范\"><a href=\"#语法规范\" class=\"headerlink\" title=\"语法规范\"></a>语法规范</h2><p>Mock.js 的语法规范包括两部分：</p>\n<ol>\n<li>数据模板定义规范<code>（Data Template Definition，DTD）</code></li>\n<li>数据占位符定义规范<code>（Data Placeholder Definition，DPD）</code></li>\n</ol>\n<h3 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h3><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'name|rule': value</span><br><span class=\"line\"></span><br><span class=\"line\">属性名|生成规则: 属性值</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li><p><em>属性名</em> 和 <em>生成规则</em> 之间用竖线 <code>|</code> 分隔。</p>\n</li>\n<li><p><em>生成规则</em> 是可选的。</p>\n</li>\n<li><p>生成规则</p>\n<p>有 7 种格式：</p>\n<ol>\n<li><code>&#39;name|min-max&#39;: value</code></li>\n<li><code>&#39;name|count&#39;: value</code></li>\n<li><code>&#39;name|min-max.dmin-dmax&#39;: value</code></li>\n<li><code>&#39;name|min-max.dcount&#39;: value</code></li>\n<li><code>&#39;name|count.dmin-dmax&#39;: value</code></li>\n<li><code>&#39;name|count.dcount&#39;: value</code></li>\n<li><code>&#39;name|+step&#39;: value</code></li>\n</ol>\n</li>\n<li><p><strong>生成规则 的 含义 需要依赖 属性值的类型 才能确定。</strong></p>\n</li>\n<li><p><em>属性值</em> 中可以含有 <code>@占位符</code>。</p>\n</li>\n<li><p><em>属性值</em> 还指定了最终值的初始值和类型。</p>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<p><strong>String</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重复string, 重复次数[min, max]</span><br><span class=\"line\">'name|min-max': string</span><br><span class=\"line\">// 重复次数count</span><br><span class=\"line\">'name|count': string</span><br></pre></td></tr></table></figure>\n<p><strong>Number</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 属性值自动加 1，初始值为 number</span><br><span class=\"line\">'name|+1': number</span><br><span class=\"line\">// 生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型</span><br><span class=\"line\">'name|min-max': number</span><br><span class=\"line\">// 生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位</span><br><span class=\"line\">'name|min-max.dmin-dmax': number</span><br><span class=\"line\"></span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    'number1|1-100.1-10': 1,</span><br><span class=\"line\">    'number2|123.1-10': 1,</span><br><span class=\"line\">    'number3|123.3': 1,</span><br><span class=\"line\">    'number4|123.10': 1.123</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"number1\": 12.92,</span><br><span class=\"line\">    \"number2\": 123.51,</span><br><span class=\"line\">    \"number3\": 123.777,</span><br><span class=\"line\">    \"number4\": 123.1231091814</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Boolean</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// true or false 各50%</span><br><span class=\"line\">'name|1': boolean</span><br><span class=\"line\">// 值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)</span><br><span class=\"line\">'name|min-max': value</span><br></pre></td></tr></table></figure>\n<p><strong>Object</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 属性值 object 中随机选取 count 个属性</span><br><span class=\"line\">'name|count': object</span><br><span class=\"line\">// 从属性值 object 中随机选取 min 到 max 个属性</span><br><span class=\"line\">'name|min-max': object</span><br></pre></td></tr></table></figure>\n<p><strong>Array</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// array中随机取1个</span><br><span class=\"line\">'name|1': array</span><br><span class=\"line\">// array 中顺序选取 1 个元素</span><br><span class=\"line\">'name|+1': array</span><br><span class=\"line\">// 重复属性值 array, 次数[min,max]</span><br><span class=\"line\">'name|min-max': array</span><br><span class=\"line\">// 重复属性值 array, 次数count</span><br><span class=\"line\">'name|count': array</span><br></pre></td></tr></table></figure>\n<p><strong>Function</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 'name' 所在的对象</span><br><span class=\"line\">'name': function</span><br></pre></td></tr></table></figure>\n<p><strong>RegExp</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正则</span><br><span class=\"line\">'name': regexp</span><br><span class=\"line\"></span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    'regexp1': /[a-z][A-Z][0-9]/,</span><br><span class=\"line\">    'regexp2': /\\w\\W\\s\\S\\d\\D/,</span><br><span class=\"line\">    'regexp3': /\\d&#123;5,10&#125;/</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"regexp1\": \"pJ7\",</span><br><span class=\"line\">    \"regexp2\": \"F)\\fp1G\",</span><br><span class=\"line\">    \"regexp3\": \"561659409\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DPD\"><a href=\"#DPD\" class=\"headerlink\" title=\"DPD\"></a>DPD</h3><p><em>占位符</em> 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@占位符</span><br><span class=\"line\">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li>用 <code>@</code> 来标识其后的字符串是 <em>占位符</em>。</li>\n<li><em>占位符</em> 引用的是 <code>Mock.Random</code> 中的方法。</li>\n<li>通过 <code>Mock.Random.extend()</code> 来扩展自定义占位符。</li>\n<li><em>占位符</em> 也可以引用 <em>数据模板</em> 中的属性。</li>\n<li><em>占位符</em> 会优先引用 <em>数据模板</em> 中的属性。</li>\n<li><em>占位符</em> 支持 <em>相对路径</em> 和 <em>绝对路径</em>。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        first: '@FIRST',</span><br><span class=\"line\">        middle: '@MIDDLE',</span><br><span class=\"line\">        last: '@LAST',</span><br><span class=\"line\">        full: '@first @middle @last'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"name\": &#123;</span><br><span class=\"line\">        \"first\": \"Charles\",</span><br><span class=\"line\">        \"middle\": \"Brenda\",</span><br><span class=\"line\">        \"last\": \"Lopez\",</span><br><span class=\"line\">        \"full\": \"Charles Brenda Lopez\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-mock\"><a href=\"#Mock-mock\" class=\"headerlink\" title=\"Mock.mock()\"></a>Mock.mock()</h2><ol>\n<li>Mock.mock( rurl?, rtype?, template|function( options ) )</li>\n</ol>\n<p>根据数据模板生成模拟数据。</p>\n<ol start=\"2\">\n<li>Mock.mock( template )</li>\n</ol>\n<p>根据数据模板生成模拟数据。</p>\n<ol start=\"3\">\n<li>Mock.mock( rurl, template )</li>\n</ol>\n<p>记录数据模板。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p>\n<ol start=\"4\">\n<li>Mock.mock( rurl, function( options ) )</li>\n</ol>\n<p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p>\n<ol start=\"5\">\n<li>Mock.mock( rurl, rtype, template )</li>\n</ol>\n<p>记录数据模板。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p>\n<ol start=\"6\">\n<li>Mock.mock( rurl, rtype, function( options ) )</li>\n</ol>\n<p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p>\n<ol start=\"7\">\n<li>rurl</li>\n</ol>\n<p>可选。</p>\n<p>表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 <code>/\\/domain\\/list\\.json/</code>、<code>&#39;/domian/list.json&#39;</code>。</p>\n<ol start=\"8\">\n<li>rtype</li>\n</ol>\n<p>可选。</p>\n<p>表示需要拦截的 Ajax 请求类型。例如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等。</p>\n<ol start=\"9\">\n<li>template</li>\n</ol>\n<p>可选。</p>\n<p>表示数据模板，可以是对象或字符串。例如 <code>{ &#39;data|1-10&#39;:[{}] }</code>、<code>&#39;@EMAIL&#39;</code>。</p>\n<ol start=\"10\">\n<li>function(options)</li>\n</ol>\n<p>可选。</p>\n<p>表示用于生成响应数据的函数。</p>\n<ol start=\"11\">\n<li>options</li>\n</ol>\n<p>指向本次请求的 Ajax 选项集，含有 <code>url</code>、<code>type</code> 和 <code>body</code> 三个属性，</p>\n<h2 id=\"Mock设置\"><a href=\"#Mock设置\" class=\"headerlink\" title=\"Mock设置\"></a>Mock设置</h2><p>指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 <code>400</code>，表示 400 毫秒 后才会返回响应内容；也可以是横杠 <code>&#39;-&#39;</code> 风格的字符串，例如 <code>&#39;200-600&#39;</code>，表示响应时间介于 200 和 600 毫秒之间。默认值是<code>&#39;10-100&#39;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mock.setup(&#123;</span><br><span class=\"line\">    timeout: 400</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Mock.setup(&#123;</span><br><span class=\"line\">    timeout: '200-600'</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-Random\"><a href=\"#Mock-Random\" class=\"headerlink\" title=\"Mock.Random\"></a>Mock.Random</h2><p>Mock.Random 是一个工具类，用于生成各种随机数据</p>\n<p><strong>Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数])</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var Random = Mock.Random</span><br><span class=\"line\">Random.email()</span><br><span class=\"line\">// =&gt; \"n.clark@miller.io\"</span><br><span class=\"line\">Mock.mock('@email')</span><br><span class=\"line\">// =&gt; \"y.lee@lewis.org\"</span><br><span class=\"line\">Mock.mock( &#123; email: '@email' &#125; )</span><br><span class=\"line\">// =&gt; &#123; email: \"v.lewis@hall.gov\" &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>Mock.Random 提供的完整方法（占位符）如下：</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Basic</td>\n<td>boolean, natural, integer, float, character, string, range, date, time, datetime, now</td>\n</tr>\n<tr>\n<td>Image</td>\n<td>image, dataImage</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>color</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>paragraph, sentence, word, title, cparagraph, csentence, cword, ctitle</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>first, last, name, cfirst, clast, cname</td>\n</tr>\n<tr>\n<td>Web</td>\n<td>url, domain, email, ip, tld</td>\n</tr>\n<tr>\n<td>Address</td>\n<td>area, region</td>\n</tr>\n<tr>\n<td>Helper</td>\n<td>capitalize, upper, lower, pick, shuffle</td>\n</tr>\n<tr>\n<td>Miscellaneous</td>\n<td>guid, id</td>\n</tr>\n</tbody>\n</table>\n<p><strong>扩展</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.extend(&#123;</span><br><span class=\"line\">    constellation: function(date) &#123;</span><br><span class=\"line\">        var constellations = ['白羊座', '金牛座', '双子座', '巨蟹座', '狮子座', '处女座', '天秤座', '天蝎座', '射手座', '摩羯座', '水瓶座', '双鱼座']</span><br><span class=\"line\">        return this.pick(constellations)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Random.constellation()</span><br><span class=\"line\">// =&gt; \"水瓶座\"</span><br><span class=\"line\">Mock.mock('@CONSTELLATION')</span><br><span class=\"line\">// =&gt; \"天蝎座\"</span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    constellation: '@CONSTELLATION'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt; &#123; constellation: \"射手座\" &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 返回一个随机的布尔值</span><br><span class=\"line\">Random.boolean( min?, max?, current? )</span><br><span class=\"line\">Random.boolean()</span><br><span class=\"line\">// =&gt; true</span><br><span class=\"line\">Random.boolean(1, 9, true)</span><br><span class=\"line\">// =&gt; false</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 返回一个随机的自然数（大于等于 0 的整数）</span><br><span class=\"line\">Random.natural( min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 返回一个随机的整数</span><br><span class=\"line\">Random.integer( min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 返回一个随机的浮点数,min/max证书部分最值，dmin,dmax小数部分位数最值</span><br><span class=\"line\">Random.float( min?, max?, dmin?, dmax? )</span><br><span class=\"line\">Random.float(60, 100, 3, 5)</span><br><span class=\"line\">// =&gt; 70.6849</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. 返回一个随机字符</span><br><span class=\"line\">Random.character( pool? )</span><br><span class=\"line\">果传入了 'lower' 或 'upper'、'number'、'symbol'，表示从内置的字符池从选取</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lower: \"abcdefghijklmnopqrstuvwxyz\",</span><br><span class=\"line\">    upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",</span><br><span class=\"line\">    number: \"0123456789\",</span><br><span class=\"line\">    symbol: \"!@#$%^&amp;*()[]\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 6. 返回一个随机字符串</span><br><span class=\"line\">Random.string( pool?, min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 7. 返回一个整型数组</span><br><span class=\"line\">Random.range( start?, stop, step? )</span><br><span class=\"line\">Random.range(10)</span><br><span class=\"line\">// =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">Random.range(3, 7)</span><br><span class=\"line\">// =&gt; [3, 4, 5, 6]</span><br><span class=\"line\">Random.range(1, 10, 2)</span><br><span class=\"line\">// =&gt; [1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回一个随机的日期字符串</span><br><span class=\"line\">Random.date( format? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个随机的时间字符串</span><br><span class=\"line\">Random.time( format? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个随机的日期和时间字符串,默认值为 yyyy-MM-dd HH:mm:ss</span><br><span class=\"line\">Random.datetime( format? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回当前的日期和时间字符串。</span><br><span class=\"line\">Random.now( unit?, format? )</span><br></pre></td></tr></table></figure>\n<p>指示生成的日期字符串的格式。默认值为 <code>yyyy-MM-dd</code></p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>yyyy</td>\n<td>A full numeric representation of a year, 4 digits</td>\n<td>1999 or 2003</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>A two digit representation of a year</td>\n<td>99 or 03</td>\n</tr>\n<tr>\n<td>y</td>\n<td>A two digit representation of a year</td>\n<td>99 or 03</td>\n</tr>\n<tr>\n<td>MM</td>\n<td>Numeric representation of a month, with leading zeros</td>\n<td>01 to 12</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Numeric representation of a month, without leading zeros</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>Day of the month, 2 digits with leading zeros</td>\n<td>01 to 31</td>\n</tr>\n<tr>\n<td>d</td>\n<td>Day of the month without leading zeros</td>\n<td>1 to 31</td>\n</tr>\n<tr>\n<td>HH</td>\n<td>24-hour format of an hour with leading zeros</td>\n<td>00 to 23</td>\n</tr>\n<tr>\n<td>H</td>\n<td>24-hour format of an hour without leading zeros</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td>hh</td>\n<td>12-hour format of an hour without leading zeros</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td>h</td>\n<td>12-hour format of an hour with leading zeros</td>\n<td>01 to 12</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>Minutes, with leading zeros</td>\n<td>00 to 59</td>\n</tr>\n<tr>\n<td>m</td>\n<td>Minutes, without leading zeros</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>Seconds, with leading zeros</td>\n<td>00 to 59</td>\n</tr>\n<tr>\n<td>s</td>\n<td>Seconds, without leading zeros</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td>SS</td>\n<td>Milliseconds, with leading zeros</td>\n<td>000 to 999</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Milliseconds, without leading zeros</td>\n<td>0 to 999</td>\n</tr>\n<tr>\n<td>A</td>\n<td>Uppercase Ante meridiem and Post meridiem</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td>a</td>\n<td>Lowercase Ante meridiem and Post meridiem</td>\n<td>am or pm</td>\n</tr>\n<tr>\n<td>T</td>\n<td>Milliseconds, since 1970-1-1 00:00:00 UTC</td>\n<td>759883437303</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例</span><br><span class=\"line\">Random.date()</span><br><span class=\"line\">// =&gt; \"2002-10-23\"</span><br><span class=\"line\">Random.date('yyyy-MM-dd')</span><br><span class=\"line\">// =&gt; \"1983-01-29\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.time('HH:mm:ss')</span><br><span class=\"line\">// =&gt; \"03:57:53\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.datetime('yyyy-MM-dd A HH:mm:ss')</span><br><span class=\"line\">// =&gt; \"1976-04-24 AM 03:48:25</span><br><span class=\"line\"></span><br><span class=\"line\">Random.now('yyyy-MM-dd HH:mm:ss SS')</span><br><span class=\"line\">// =&gt; \"2014-04-29 20:08:38 157\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生成一个随机的图片地址</span><br><span class=\"line\">// Random.image() 用于生成高度自定义的图片地址，一般情况下，应该使用更简单的 Random.dataImage()</span><br><span class=\"line\">Random.image( size?, background?, foreground?, format?, text? )</span><br><span class=\"line\">Random.image()</span><br><span class=\"line\">Random.image( size )</span><br><span class=\"line\">Random.image( size, background )</span><br><span class=\"line\">Random.image( size, background, text )</span><br><span class=\"line\">Random.image( size, background, foreground, text )</span><br><span class=\"line\">Random.image( size, background, foreground, format, text )</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成一段随机的 Base64 图片编码</span><br><span class=\"line\">Random.dataImage( size?, text? )</span><br><span class=\"line\">Random.dataImage()</span><br><span class=\"line\">Random.dataImage( size )</span><br><span class=\"line\">Random.dataImage( size, text )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Color\"><a href=\"#Color\" class=\"headerlink\" title=\"Color\"></a>Color</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.color()</span><br><span class=\"line\">// =&gt; \"#3538B2\"</span><br><span class=\"line\">Random.hex()</span><br><span class=\"line\">// =&gt; \"#3538B2\"</span><br><span class=\"line\">Random.rgb()</span><br><span class=\"line\">// =&gt; \"rgb(242, 198, 121)\"</span><br><span class=\"line\">Random.rgba()</span><br><span class=\"line\">// =&gt; \"rgba(242, 198, 121, 0.13)\"</span><br><span class=\"line\">Random.hsl()</span><br><span class=\"line\">// =&gt; \"hsl(345, 82, 71)\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 随机生成一段文本</span><br><span class=\"line\">Random.paragraph( min?, max? )</span><br><span class=\"line\">Random.paragraph()</span><br><span class=\"line\">Random.paragraph( len )</span><br><span class=\"line\">Random.paragraph( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一段中文文本</span><br><span class=\"line\">Random.cparagraph( min?, max? )</span><br><span class=\"line\">Random.cparagraph()</span><br><span class=\"line\">Random.cparagraph( len )</span><br><span class=\"line\">Random.cparagraph( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一个句子，第一个单词的首字母大写</span><br><span class=\"line\">Random.sentence( min?, max? )</span><br><span class=\"line\">Random.sentence()</span><br><span class=\"line\">Random.sentence( len )</span><br><span class=\"line\">Random.sentence( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一段中文文本</span><br><span class=\"line\">Random.csentence( min?, max? )</span><br><span class=\"line\">Random.csentence()</span><br><span class=\"line\">Random.csentence( len )</span><br><span class=\"line\">Random.csentence( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一个单词</span><br><span class=\"line\">Random.word( min?, max? )</span><br><span class=\"line\">Random.word()</span><br><span class=\"line\">Random.word( len )</span><br><span class=\"line\">Random.word( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一个汉字</span><br><span class=\"line\">Random.cword( pool?, min?, max? )</span><br><span class=\"line\">Random.cword()</span><br><span class=\"line\">Random.cword( pool )</span><br><span class=\"line\">Random.cword( length )</span><br><span class=\"line\">Random.cword( pool, length )</span><br><span class=\"line\">Random.cword( min, max )</span><br><span class=\"line\">Random.cword( pool, min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一句标题，其中每个单词的首字母大写</span><br><span class=\"line\">Random.title( min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一句中文标题</span><br><span class=\"line\">Random.ctitle( min?, max? )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name\"></a>Name</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.first()</span><br><span class=\"line\">Random.last()</span><br><span class=\"line\">Random.name( middle? )</span><br><span class=\"line\"></span><br><span class=\"line\">Random.cfirst()</span><br><span class=\"line\">Random.clast()</span><br><span class=\"line\">Random.cname()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.url( protocol?, host? )</span><br><span class=\"line\">Random.url()</span><br><span class=\"line\">// =&gt; \"mid://axmg.bg/bhyq\"</span><br><span class=\"line\">Random.url('http')</span><br><span class=\"line\">// =&gt; \"http://splap.yu/qxzkyoubp\"</span><br><span class=\"line\">Random.url('http', 'nuysoft.com')</span><br><span class=\"line\">// =&gt; \"http://nuysoft.com/ewacecjhe\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.protocol()</span><br><span class=\"line\">// =&gt; \"ftp\"</span><br><span class=\"line\">Random.domain()</span><br><span class=\"line\">// =&gt; \"kozfnb.org\"</span><br><span class=\"line\">Random.tld()</span><br><span class=\"line\">// =&gt; \"net\"</span><br><span class=\"line\">Random.email()</span><br><span class=\"line\">// =&gt; \"x.davis@jackson.edu\"</span><br><span class=\"line\">Random.email('nuysoft.com')</span><br><span class=\"line\">// =&gt; \"h.pqpneix@nuysoft.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.ip()</span><br><span class=\"line\">// =&gt; \"34.206.109.169\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Address\"><a href=\"#Address\" class=\"headerlink\" title=\"Address\"></a>Address</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.region()</span><br><span class=\"line\">// =&gt; \"华北\"</span><br><span class=\"line\">Random.province()</span><br><span class=\"line\">// =&gt; \"黑龙江省\"</span><br><span class=\"line\">Random.city()</span><br><span class=\"line\">// =&gt; \"唐山市\"</span><br><span class=\"line\">Random.city(true)</span><br><span class=\"line\">// =&gt; \"福建省 漳州市\"</span><br><span class=\"line\">Random.county()</span><br><span class=\"line\">// =&gt; \"上杭县\"</span><br><span class=\"line\">Random.county(true)</span><br><span class=\"line\">// =&gt; \"甘肃省 白银市 会宁县\"</span><br><span class=\"line\">Random.zip()</span><br><span class=\"line\">// =&gt; \"908812\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Helper\"><a href=\"#Helper\" class=\"headerlink\" title=\"Helper\"></a>Helper</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Random.capitalize('hello')</span><br><span class=\"line\">// =&gt; \"Hello\"</span><br><span class=\"line\">Random.upper('hello')</span><br><span class=\"line\">// =&gt; \"HELLO\"</span><br><span class=\"line\">Random.lower('HELLO')</span><br><span class=\"line\">// =&gt; \"hello\"</span><br><span class=\"line\">Random.pick(['a', 'e', 'i', 'o', 'u'])</span><br><span class=\"line\">// =&gt; \"o\"</span><br><span class=\"line\">Random.shuffle(['a', 'e', 'i', 'o', 'u'])</span><br><span class=\"line\">// =&gt; [\"o\", \"u\", \"e\", \"i\", \"a\"]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.guid()</span><br><span class=\"line\">// =&gt; \"662C63B4-FD43-66F4-3328-C54E3FF0D56E\"</span><br><span class=\"line\">Random.id()</span><br><span class=\"line\">// =&gt; \"420000200710091854\" 身份证</span><br><span class=\"line\">Random.increment()</span><br><span class=\"line\">// =&gt; 1</span><br><span class=\"line\">Random.increment(100)</span><br><span class=\"line\">// =&gt; 101</span><br><span class=\"line\">Random.increment(1000)</span><br><span class=\"line\">// =&gt; 1101</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-valid\"><a href=\"#Mock-valid\" class=\"headerlink\" title=\"Mock.valid()\"></a>Mock.valid()</h2><p>用来校验真实数据<code>data</code>是否与数据模板<code>template</code>匹配</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mock.valid( template, data )</span><br><span class=\"line\"></span><br><span class=\"line\">var template = &#123;</span><br><span class=\"line\">    name: 'value1'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var data = &#123;</span><br><span class=\"line\">    name: 'value2'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Mock.valid(template, data)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        \"path\": [</span><br><span class=\"line\">            \"data\",</span><br><span class=\"line\">            \"name\"</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"type\": \"value\",</span><br><span class=\"line\">        \"actual\": \"value2\",</span><br><span class=\"line\">        \"expected\": \"value1\",</span><br><span class=\"line\">        \"action\": \"equal to\",</span><br><span class=\"line\">        \"message\": \"[VALUE] Expect ROOT.name'value is equal to value1, but is value2\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-toJSONSchema\"><a href=\"#Mock-toJSONSchema\" class=\"headerlink\" title=\"Mock.toJSONSchema()\"></a>Mock.toJSONSchema()</h2><p>把 Mock.js 风格的数据模板 template 转换成 JSON Schema</p>\n<h2 id=\"Vue项目中使用mock\"><a href=\"#Vue项目中使用mock\" class=\"headerlink\" title=\"Vue项目中使用mock\"></a>Vue项目中使用mock</h2><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev mockjs</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入</li>\n</ol>\n<p>在main.js， 引入mockjs</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.env === 'development' &amp;&amp; require('@/mock')</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建mock</li>\n</ol>\n<p>在src目录下创建mock目录，添加index.js文件，这里建议给每类api使用单独的mock文件</p>\n<p><code>mock/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将所有的mock文件引入</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'@/mock/usermock'</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'@/mock/wxmock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里可以做一些通用的配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">\"mockjs\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 设置所有ajax请求的超时时间，模拟网络传输耗时</span></span><br><span class=\"line\">Mock.setup(&#123;</span><br><span class=\"line\">    timeout: <span class=\"number\">0</span><span class=\"number\">-300</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>mock/usermock.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ApiPath <span class=\"keyword\">from</span> <span class=\"string\">\"@/api/ApiPath\"</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">\"mockjs\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Mock.mock(ApiPath.user.getUserInfo, <span class=\"string\">\"get\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"fullName\"</span>: <span class=\"string\">\"@CNAME\"</span>, <span class=\"comment\">// 随机生成中文人名</span></span><br><span class=\"line\">      <span class=\"string\">\"userId\"</span>: <span class=\"number\">1000234234001</span>,</span><br><span class=\"line\">      <span class=\"string\">\"username\"</span>: <span class=\"string\">\"zhangsan\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"success\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用Mock\"><a href=\"#常用Mock\" class=\"headerlink\" title=\"常用Mock\"></a>常用Mock</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    login_id: Mock.Random.integer(<span class=\"number\">11</span>),</span><br><span class=\"line\">    name: Mock.Random.cname(),</span><br><span class=\"line\">    enable: Mock.Random.integer(<span class=\"number\">0</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    gmt_create: Mock.Random.datetime(<span class=\"string\">'yyyy-MM-dd HH:mm:ss'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000008839142\" target=\"_blank\" rel=\"noopener\">Mock.js使用</a></li>\n</ul>\n","site":{"data":{}},"length":10616,"excerpt":"<p><a href=\"http://mockjs.com/\" target=\"_blank\" rel=\"noopener\">Mock.js</a> 是一款前端开发中拦截<code>Ajax</code>请求再生成随机数据响应的工具.可以用来模拟服务器响应. 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用npm安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mockjs</span><br></pre></td></tr></table></figure>\n<p>或者引入<code>js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://mockjs.com/dist/mock.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Mock</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">'mockjs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class=\"line\">    <span class=\"string\">'list|1-10'</span>: [&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class=\"line\">        <span class=\"string\">'id|+1'</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法规范\"><a href=\"#语法规范\" class=\"headerlink\" title=\"语法规范\"></a>语法规范</h2><p>Mock.js 的语法规范包括两部分：</p>\n<ol>\n<li>数据模板定义规范<code>（Data Template Definition，DTD）</code></li>\n<li>数据占位符定义规范<code>（Data Placeholder Definition，DPD）</code></li>\n</ol>\n<h3 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h3><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'name|rule': value</span><br><span class=\"line\"></span><br><span class=\"line\">属性名|生成规则: 属性值</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li><p><em>属性名</em> 和 <em>生成规则</em> 之间用竖线 <code>|</code> 分隔。</p>\n</li>\n<li><p><em>生成规则</em> 是可选的。</p>\n</li>\n<li><p>生成规则</p>\n<p>有 7 种格式：</p>\n<ol>\n<li><code>&#39;name|min-max&#39;: value</code></li>\n<li><code>&#39;name|count&#39;: value</code></li>\n<li><code>&#39;name|min-max.dmin-dmax&#39;: value</code></li>\n<li><code>&#39;name|min-max.dcount&#39;: value</code></li>\n<li><code>&#39;name|count.dmin-dmax&#39;: value</code></li>\n<li><code>&#39;name|count.dcount&#39;: value</code></li>\n<li><code>&#39;name|+step&#39;: value</code></li>\n</ol>\n</li>\n<li><p><strong>生成规则 的 含义 需要依赖 属性值的类型 才能确定。</strong></p>\n</li>\n<li><p><em>属性值</em> 中可以含有 <code>@占位符</code>。</p>\n</li>\n<li><p><em>属性值</em> 还指定了最终值的初始值和类型。</p>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<p><strong>String</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重复string, 重复次数[min, max]</span><br><span class=\"line\">'name|min-max': string</span><br><span class=\"line\">// 重复次数count</span><br><span class=\"line\">'name|count': string</span><br></pre></td></tr></table></figure>\n<p><strong>Number</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 属性值自动加 1，初始值为 number</span><br><span class=\"line\">'name|+1': number</span><br><span class=\"line\">// 生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型</span><br><span class=\"line\">'name|min-max': number</span><br><span class=\"line\">// 生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位</span><br><span class=\"line\">'name|min-max.dmin-dmax': number</span><br><span class=\"line\"></span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    'number1|1-100.1-10': 1,</span><br><span class=\"line\">    'number2|123.1-10': 1,</span><br><span class=\"line\">    'number3|123.3': 1,</span><br><span class=\"line\">    'number4|123.10': 1.123</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"number1\": 12.92,</span><br><span class=\"line\">    \"number2\": 123.51,</span><br><span class=\"line\">    \"number3\": 123.777,</span><br><span class=\"line\">    \"number4\": 123.1231091814</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Boolean</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// true or false 各50%</span><br><span class=\"line\">'name|1': boolean</span><br><span class=\"line\">// 值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)</span><br><span class=\"line\">'name|min-max': value</span><br></pre></td></tr></table></figure>\n<p><strong>Object</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 属性值 object 中随机选取 count 个属性</span><br><span class=\"line\">'name|count': object</span><br><span class=\"line\">// 从属性值 object 中随机选取 min 到 max 个属性</span><br><span class=\"line\">'name|min-max': object</span><br></pre></td></tr></table></figure>\n<p><strong>Array</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// array中随机取1个</span><br><span class=\"line\">'name|1': array</span><br><span class=\"line\">// array 中顺序选取 1 个元素</span><br><span class=\"line\">'name|+1': array</span><br><span class=\"line\">// 重复属性值 array, 次数[min,max]</span><br><span class=\"line\">'name|min-max': array</span><br><span class=\"line\">// 重复属性值 array, 次数count</span><br><span class=\"line\">'name|count': array</span><br></pre></td></tr></table></figure>\n<p><strong>Function</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 'name' 所在的对象</span><br><span class=\"line\">'name': function</span><br></pre></td></tr></table></figure>\n<p><strong>RegExp</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正则</span><br><span class=\"line\">'name': regexp</span><br><span class=\"line\"></span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    'regexp1': /[a-z][A-Z][0-9]/,</span><br><span class=\"line\">    'regexp2': /\\w\\W\\s\\S\\d\\D/,</span><br><span class=\"line\">    'regexp3': /\\d&#123;5,10&#125;/</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"regexp1\": \"pJ7\",</span><br><span class=\"line\">    \"regexp2\": \"F)\\fp1G\",</span><br><span class=\"line\">    \"regexp3\": \"561659409\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DPD\"><a href=\"#DPD\" class=\"headerlink\" title=\"DPD\"></a>DPD</h3><p><em>占位符</em> 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@占位符</span><br><span class=\"line\">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li>用 <code>@</code> 来标识其后的字符串是 <em>占位符</em>。</li>\n<li><em>占位符</em> 引用的是 <code>Mock.Random</code> 中的方法。</li>\n<li>通过 <code>Mock.Random.extend()</code> 来扩展自定义占位符。</li>\n<li><em>占位符</em> 也可以引用 <em>数据模板</em> 中的属性。</li>\n<li><em>占位符</em> 会优先引用 <em>数据模板</em> 中的属性。</li>\n<li><em>占位符</em> 支持 <em>相对路径</em> 和 <em>绝对路径</em>。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        first: '@FIRST',</span><br><span class=\"line\">        middle: '@MIDDLE',</span><br><span class=\"line\">        last: '@LAST',</span><br><span class=\"line\">        full: '@first @middle @last'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"name\": &#123;</span><br><span class=\"line\">        \"first\": \"Charles\",</span><br><span class=\"line\">        \"middle\": \"Brenda\",</span><br><span class=\"line\">        \"last\": \"Lopez\",</span><br><span class=\"line\">        \"full\": \"Charles Brenda Lopez\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-mock\"><a href=\"#Mock-mock\" class=\"headerlink\" title=\"Mock.mock()\"></a>Mock.mock()</h2><ol>\n<li>Mock.mock( rurl?, rtype?, template|function( options ) )</li>\n</ol>\n<p>根据数据模板生成模拟数据。</p>\n<ol start=\"2\">\n<li>Mock.mock( template )</li>\n</ol>\n<p>根据数据模板生成模拟数据。</p>\n<ol start=\"3\">\n<li>Mock.mock( rurl, template )</li>\n</ol>\n<p>记录数据模板。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p>\n<ol start=\"4\">\n<li>Mock.mock( rurl, function( options ) )</li>\n</ol>\n<p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p>\n<ol start=\"5\">\n<li>Mock.mock( rurl, rtype, template )</li>\n</ol>\n<p>记录数据模板。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p>\n<ol start=\"6\">\n<li>Mock.mock( rurl, rtype, function( options ) )</li>\n</ol>\n<p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p>\n<ol start=\"7\">\n<li>rurl</li>\n</ol>\n<p>可选。</p>\n<p>表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 <code>/\\/domain\\/list\\.json/</code>、<code>&#39;/domian/list.json&#39;</code>。</p>\n<ol start=\"8\">\n<li>rtype</li>\n</ol>\n<p>可选。</p>\n<p>表示需要拦截的 Ajax 请求类型。例如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等。</p>\n<ol start=\"9\">\n<li>template</li>\n</ol>\n<p>可选。</p>\n<p>表示数据模板，可以是对象或字符串。例如 <code>{ &#39;data|1-10&#39;:[{}] }</code>、<code>&#39;@EMAIL&#39;</code>。</p>\n<ol start=\"10\">\n<li>function(options)</li>\n</ol>\n<p>可选。</p>\n<p>表示用于生成响应数据的函数。</p>\n<ol start=\"11\">\n<li>options</li>\n</ol>\n<p>指向本次请求的 Ajax 选项集，含有 <code>url</code>、<code>type</code> 和 <code>body</code> 三个属性，</p>\n<h2 id=\"Mock设置\"><a href=\"#Mock设置\" class=\"headerlink\" title=\"Mock设置\"></a>Mock设置</h2><p>指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 <code>400</code>，表示 400 毫秒 后才会返回响应内容；也可以是横杠 <code>&#39;-&#39;</code> 风格的字符串，例如 <code>&#39;200-600&#39;</code>，表示响应时间介于 200 和 600 毫秒之间。默认值是<code>&#39;10-100&#39;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mock.setup(&#123;</span><br><span class=\"line\">    timeout: 400</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Mock.setup(&#123;</span><br><span class=\"line\">    timeout: '200-600'</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-Random\"><a href=\"#Mock-Random\" class=\"headerlink\" title=\"Mock.Random\"></a>Mock.Random</h2><p>Mock.Random 是一个工具类，用于生成各种随机数据</p>\n<p><strong>Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数])</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var Random = Mock.Random</span><br><span class=\"line\">Random.email()</span><br><span class=\"line\">// =&gt; \"n.clark@miller.io\"</span><br><span class=\"line\">Mock.mock('@email')</span><br><span class=\"line\">// =&gt; \"y.lee@lewis.org\"</span><br><span class=\"line\">Mock.mock( &#123; email: '@email' &#125; )</span><br><span class=\"line\">// =&gt; &#123; email: \"v.lewis@hall.gov\" &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>Mock.Random 提供的完整方法（占位符）如下：</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Basic</td>\n<td>boolean, natural, integer, float, character, string, range, date, time, datetime, now</td>\n</tr>\n<tr>\n<td>Image</td>\n<td>image, dataImage</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>color</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>paragraph, sentence, word, title, cparagraph, csentence, cword, ctitle</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>first, last, name, cfirst, clast, cname</td>\n</tr>\n<tr>\n<td>Web</td>\n<td>url, domain, email, ip, tld</td>\n</tr>\n<tr>\n<td>Address</td>\n<td>area, region</td>\n</tr>\n<tr>\n<td>Helper</td>\n<td>capitalize, upper, lower, pick, shuffle</td>\n</tr>\n<tr>\n<td>Miscellaneous</td>\n<td>guid, id</td>\n</tr>\n</tbody>\n</table>\n<p><strong>扩展</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.extend(&#123;</span><br><span class=\"line\">    constellation: function(date) &#123;</span><br><span class=\"line\">        var constellations = ['白羊座', '金牛座', '双子座', '巨蟹座', '狮子座', '处女座', '天秤座', '天蝎座', '射手座', '摩羯座', '水瓶座', '双鱼座']</span><br><span class=\"line\">        return this.pick(constellations)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Random.constellation()</span><br><span class=\"line\">// =&gt; \"水瓶座\"</span><br><span class=\"line\">Mock.mock('@CONSTELLATION')</span><br><span class=\"line\">// =&gt; \"天蝎座\"</span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    constellation: '@CONSTELLATION'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt; &#123; constellation: \"射手座\" &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 返回一个随机的布尔值</span><br><span class=\"line\">Random.boolean( min?, max?, current? )</span><br><span class=\"line\">Random.boolean()</span><br><span class=\"line\">// =&gt; true</span><br><span class=\"line\">Random.boolean(1, 9, true)</span><br><span class=\"line\">// =&gt; false</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 返回一个随机的自然数（大于等于 0 的整数）</span><br><span class=\"line\">Random.natural( min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 返回一个随机的整数</span><br><span class=\"line\">Random.integer( min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 返回一个随机的浮点数,min/max证书部分最值，dmin,dmax小数部分位数最值</span><br><span class=\"line\">Random.float( min?, max?, dmin?, dmax? )</span><br><span class=\"line\">Random.float(60, 100, 3, 5)</span><br><span class=\"line\">// =&gt; 70.6849</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. 返回一个随机字符</span><br><span class=\"line\">Random.character( pool? )</span><br><span class=\"line\">果传入了 'lower' 或 'upper'、'number'、'symbol'，表示从内置的字符池从选取</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lower: \"abcdefghijklmnopqrstuvwxyz\",</span><br><span class=\"line\">    upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",</span><br><span class=\"line\">    number: \"0123456789\",</span><br><span class=\"line\">    symbol: \"!@#$%^&amp;*()[]\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 6. 返回一个随机字符串</span><br><span class=\"line\">Random.string( pool?, min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 7. 返回一个整型数组</span><br><span class=\"line\">Random.range( start?, stop, step? )</span><br><span class=\"line\">Random.range(10)</span><br><span class=\"line\">// =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">Random.range(3, 7)</span><br><span class=\"line\">// =&gt; [3, 4, 5, 6]</span><br><span class=\"line\">Random.range(1, 10, 2)</span><br><span class=\"line\">// =&gt; [1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回一个随机的日期字符串</span><br><span class=\"line\">Random.date( format? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个随机的时间字符串</span><br><span class=\"line\">Random.time( format? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个随机的日期和时间字符串,默认值为 yyyy-MM-dd HH:mm:ss</span><br><span class=\"line\">Random.datetime( format? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回当前的日期和时间字符串。</span><br><span class=\"line\">Random.now( unit?, format? )</span><br></pre></td></tr></table></figure>\n<p>指示生成的日期字符串的格式。默认值为 <code>yyyy-MM-dd</code></p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>yyyy</td>\n<td>A full numeric representation of a year, 4 digits</td>\n<td>1999 or 2003</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>A two digit representation of a year</td>\n<td>99 or 03</td>\n</tr>\n<tr>\n<td>y</td>\n<td>A two digit representation of a year</td>\n<td>99 or 03</td>\n</tr>\n<tr>\n<td>MM</td>\n<td>Numeric representation of a month, with leading zeros</td>\n<td>01 to 12</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Numeric representation of a month, without leading zeros</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>Day of the month, 2 digits with leading zeros</td>\n<td>01 to 31</td>\n</tr>\n<tr>\n<td>d</td>\n<td>Day of the month without leading zeros</td>\n<td>1 to 31</td>\n</tr>\n<tr>\n<td>HH</td>\n<td>24-hour format of an hour with leading zeros</td>\n<td>00 to 23</td>\n</tr>\n<tr>\n<td>H</td>\n<td>24-hour format of an hour without leading zeros</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td>hh</td>\n<td>12-hour format of an hour without leading zeros</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td>h</td>\n<td>12-hour format of an hour with leading zeros</td>\n<td>01 to 12</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>Minutes, with leading zeros</td>\n<td>00 to 59</td>\n</tr>\n<tr>\n<td>m</td>\n<td>Minutes, without leading zeros</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>Seconds, with leading zeros</td>\n<td>00 to 59</td>\n</tr>\n<tr>\n<td>s</td>\n<td>Seconds, without leading zeros</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td>SS</td>\n<td>Milliseconds, with leading zeros</td>\n<td>000 to 999</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Milliseconds, without leading zeros</td>\n<td>0 to 999</td>\n</tr>\n<tr>\n<td>A</td>\n<td>Uppercase Ante meridiem and Post meridiem</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td>a</td>\n<td>Lowercase Ante meridiem and Post meridiem</td>\n<td>am or pm</td>\n</tr>\n<tr>\n<td>T</td>\n<td>Milliseconds, since 1970-1-1 00:00:00 UTC</td>\n<td>759883437303</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例</span><br><span class=\"line\">Random.date()</span><br><span class=\"line\">// =&gt; \"2002-10-23\"</span><br><span class=\"line\">Random.date('yyyy-MM-dd')</span><br><span class=\"line\">// =&gt; \"1983-01-29\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.time('HH:mm:ss')</span><br><span class=\"line\">// =&gt; \"03:57:53\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.datetime('yyyy-MM-dd A HH:mm:ss')</span><br><span class=\"line\">// =&gt; \"1976-04-24 AM 03:48:25</span><br><span class=\"line\"></span><br><span class=\"line\">Random.now('yyyy-MM-dd HH:mm:ss SS')</span><br><span class=\"line\">// =&gt; \"2014-04-29 20:08:38 157\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生成一个随机的图片地址</span><br><span class=\"line\">// Random.image() 用于生成高度自定义的图片地址，一般情况下，应该使用更简单的 Random.dataImage()</span><br><span class=\"line\">Random.image( size?, background?, foreground?, format?, text? )</span><br><span class=\"line\">Random.image()</span><br><span class=\"line\">Random.image( size )</span><br><span class=\"line\">Random.image( size, background )</span><br><span class=\"line\">Random.image( size, background, text )</span><br><span class=\"line\">Random.image( size, background, foreground, text )</span><br><span class=\"line\">Random.image( size, background, foreground, format, text )</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成一段随机的 Base64 图片编码</span><br><span class=\"line\">Random.dataImage( size?, text? )</span><br><span class=\"line\">Random.dataImage()</span><br><span class=\"line\">Random.dataImage( size )</span><br><span class=\"line\">Random.dataImage( size, text )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Color\"><a href=\"#Color\" class=\"headerlink\" title=\"Color\"></a>Color</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.color()</span><br><span class=\"line\">// =&gt; \"#3538B2\"</span><br><span class=\"line\">Random.hex()</span><br><span class=\"line\">// =&gt; \"#3538B2\"</span><br><span class=\"line\">Random.rgb()</span><br><span class=\"line\">// =&gt; \"rgb(242, 198, 121)\"</span><br><span class=\"line\">Random.rgba()</span><br><span class=\"line\">// =&gt; \"rgba(242, 198, 121, 0.13)\"</span><br><span class=\"line\">Random.hsl()</span><br><span class=\"line\">// =&gt; \"hsl(345, 82, 71)\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 随机生成一段文本</span><br><span class=\"line\">Random.paragraph( min?, max? )</span><br><span class=\"line\">Random.paragraph()</span><br><span class=\"line\">Random.paragraph( len )</span><br><span class=\"line\">Random.paragraph( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一段中文文本</span><br><span class=\"line\">Random.cparagraph( min?, max? )</span><br><span class=\"line\">Random.cparagraph()</span><br><span class=\"line\">Random.cparagraph( len )</span><br><span class=\"line\">Random.cparagraph( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一个句子，第一个单词的首字母大写</span><br><span class=\"line\">Random.sentence( min?, max? )</span><br><span class=\"line\">Random.sentence()</span><br><span class=\"line\">Random.sentence( len )</span><br><span class=\"line\">Random.sentence( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一段中文文本</span><br><span class=\"line\">Random.csentence( min?, max? )</span><br><span class=\"line\">Random.csentence()</span><br><span class=\"line\">Random.csentence( len )</span><br><span class=\"line\">Random.csentence( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一个单词</span><br><span class=\"line\">Random.word( min?, max? )</span><br><span class=\"line\">Random.word()</span><br><span class=\"line\">Random.word( len )</span><br><span class=\"line\">Random.word( min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一个汉字</span><br><span class=\"line\">Random.cword( pool?, min?, max? )</span><br><span class=\"line\">Random.cword()</span><br><span class=\"line\">Random.cword( pool )</span><br><span class=\"line\">Random.cword( length )</span><br><span class=\"line\">Random.cword( pool, length )</span><br><span class=\"line\">Random.cword( min, max )</span><br><span class=\"line\">Random.cword( pool, min, max )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一句标题，其中每个单词的首字母大写</span><br><span class=\"line\">Random.title( min?, max? )</span><br><span class=\"line\"></span><br><span class=\"line\">// 随机生成一句中文标题</span><br><span class=\"line\">Random.ctitle( min?, max? )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name\"></a>Name</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.first()</span><br><span class=\"line\">Random.last()</span><br><span class=\"line\">Random.name( middle? )</span><br><span class=\"line\"></span><br><span class=\"line\">Random.cfirst()</span><br><span class=\"line\">Random.clast()</span><br><span class=\"line\">Random.cname()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.url( protocol?, host? )</span><br><span class=\"line\">Random.url()</span><br><span class=\"line\">// =&gt; \"mid://axmg.bg/bhyq\"</span><br><span class=\"line\">Random.url('http')</span><br><span class=\"line\">// =&gt; \"http://splap.yu/qxzkyoubp\"</span><br><span class=\"line\">Random.url('http', 'nuysoft.com')</span><br><span class=\"line\">// =&gt; \"http://nuysoft.com/ewacecjhe\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.protocol()</span><br><span class=\"line\">// =&gt; \"ftp\"</span><br><span class=\"line\">Random.domain()</span><br><span class=\"line\">// =&gt; \"kozfnb.org\"</span><br><span class=\"line\">Random.tld()</span><br><span class=\"line\">// =&gt; \"net\"</span><br><span class=\"line\">Random.email()</span><br><span class=\"line\">// =&gt; \"x.davis@jackson.edu\"</span><br><span class=\"line\">Random.email('nuysoft.com')</span><br><span class=\"line\">// =&gt; \"h.pqpneix@nuysoft.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">Random.ip()</span><br><span class=\"line\">// =&gt; \"34.206.109.169\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Address\"><a href=\"#Address\" class=\"headerlink\" title=\"Address\"></a>Address</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.region()</span><br><span class=\"line\">// =&gt; \"华北\"</span><br><span class=\"line\">Random.province()</span><br><span class=\"line\">// =&gt; \"黑龙江省\"</span><br><span class=\"line\">Random.city()</span><br><span class=\"line\">// =&gt; \"唐山市\"</span><br><span class=\"line\">Random.city(true)</span><br><span class=\"line\">// =&gt; \"福建省 漳州市\"</span><br><span class=\"line\">Random.county()</span><br><span class=\"line\">// =&gt; \"上杭县\"</span><br><span class=\"line\">Random.county(true)</span><br><span class=\"line\">// =&gt; \"甘肃省 白银市 会宁县\"</span><br><span class=\"line\">Random.zip()</span><br><span class=\"line\">// =&gt; \"908812\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Helper\"><a href=\"#Helper\" class=\"headerlink\" title=\"Helper\"></a>Helper</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Random.capitalize('hello')</span><br><span class=\"line\">// =&gt; \"Hello\"</span><br><span class=\"line\">Random.upper('hello')</span><br><span class=\"line\">// =&gt; \"HELLO\"</span><br><span class=\"line\">Random.lower('HELLO')</span><br><span class=\"line\">// =&gt; \"hello\"</span><br><span class=\"line\">Random.pick(['a', 'e', 'i', 'o', 'u'])</span><br><span class=\"line\">// =&gt; \"o\"</span><br><span class=\"line\">Random.shuffle(['a', 'e', 'i', 'o', 'u'])</span><br><span class=\"line\">// =&gt; [\"o\", \"u\", \"e\", \"i\", \"a\"]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random.guid()</span><br><span class=\"line\">// =&gt; \"662C63B4-FD43-66F4-3328-C54E3FF0D56E\"</span><br><span class=\"line\">Random.id()</span><br><span class=\"line\">// =&gt; \"420000200710091854\" 身份证</span><br><span class=\"line\">Random.increment()</span><br><span class=\"line\">// =&gt; 1</span><br><span class=\"line\">Random.increment(100)</span><br><span class=\"line\">// =&gt; 101</span><br><span class=\"line\">Random.increment(1000)</span><br><span class=\"line\">// =&gt; 1101</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-valid\"><a href=\"#Mock-valid\" class=\"headerlink\" title=\"Mock.valid()\"></a>Mock.valid()</h2><p>用来校验真实数据<code>data</code>是否与数据模板<code>template</code>匹配</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mock.valid( template, data )</span><br><span class=\"line\"></span><br><span class=\"line\">var template = &#123;</span><br><span class=\"line\">    name: 'value1'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var data = &#123;</span><br><span class=\"line\">    name: 'value2'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Mock.valid(template, data)</span><br><span class=\"line\">// =&gt;</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        \"path\": [</span><br><span class=\"line\">            \"data\",</span><br><span class=\"line\">            \"name\"</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"type\": \"value\",</span><br><span class=\"line\">        \"actual\": \"value2\",</span><br><span class=\"line\">        \"expected\": \"value1\",</span><br><span class=\"line\">        \"action\": \"equal to\",</span><br><span class=\"line\">        \"message\": \"[VALUE] Expect ROOT.name'value is equal to value1, but is value2\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mock-toJSONSchema\"><a href=\"#Mock-toJSONSchema\" class=\"headerlink\" title=\"Mock.toJSONSchema()\"></a>Mock.toJSONSchema()</h2><p>把 Mock.js 风格的数据模板 template 转换成 JSON Schema</p>\n<h2 id=\"Vue项目中使用mock\"><a href=\"#Vue项目中使用mock\" class=\"headerlink\" title=\"Vue项目中使用mock\"></a>Vue项目中使用mock</h2><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev mockjs</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入</li>\n</ol>\n<p>在main.js， 引入mockjs</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.env === 'development' &amp;&amp; require('@/mock')</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建mock</li>\n</ol>\n<p>在src目录下创建mock目录，添加index.js文件，这里建议给每类api使用单独的mock文件</p>\n<p><code>mock/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将所有的mock文件引入</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'@/mock/usermock'</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'@/mock/wxmock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里可以做一些通用的配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">\"mockjs\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 设置所有ajax请求的超时时间，模拟网络传输耗时</span></span><br><span class=\"line\">Mock.setup(&#123;</span><br><span class=\"line\">    timeout: <span class=\"number\">0</span><span class=\"number\">-300</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>mock/usermock.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ApiPath <span class=\"keyword\">from</span> <span class=\"string\">\"@/api/ApiPath\"</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">\"mockjs\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Mock.mock(ApiPath.user.getUserInfo, <span class=\"string\">\"get\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"fullName\"</span>: <span class=\"string\">\"@CNAME\"</span>, <span class=\"comment\">// 随机生成中文人名</span></span><br><span class=\"line\">      <span class=\"string\">\"userId\"</span>: <span class=\"number\">1000234234001</span>,</span><br><span class=\"line\">      <span class=\"string\">\"username\"</span>: <span class=\"string\">\"zhangsan\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"success\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用Mock\"><a href=\"#常用Mock\" class=\"headerlink\" title=\"常用Mock\"></a>常用Mock</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mock.mock(&#123;</span><br><span class=\"line\">    login_id: Mock.Random.integer(<span class=\"number\">11</span>),</span><br><span class=\"line\">    name: Mock.Random.cname(),</span><br><span class=\"line\">    enable: Mock.Random.integer(<span class=\"number\">0</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    gmt_create: Mock.Random.datetime(<span class=\"string\">'yyyy-MM-dd HH:mm:ss'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000008839142\" target=\"_blank\" rel=\"noopener\">Mock.js使用</a></li>\n</ul>"},{"title":"记一次事务不起作用的排错历程","date":"2019-06-11T14:04:03.000Z","_content":"\n## 问题描述\n\n服务端接口需提供接口，在web端将某个终端调为在线模式时，同时需要更新内存中在线的终端数据。 在更新终端状态成功之后，立刻查询数据库处于在线状态的终端数据,然后内存中的数据。更新状态与更新内存数据在同一个事务，查询操作需要保证能够读取到还未提交的更新操作。\n\n<!--more-->\n\n想到这应该是设计到事务的隔离性这块，因为之前对事务处理这块认识比较不足，就决定来科普下事务相关的知识点。\n\n但出门的第一步就跌了个大跟头，代码里的事务根本不起作用，@Transactional注解形同虚设，于是开始排错。\n\n代码是这样的(项目整合了SpringBoot+MyBatisPlus+Druid+Shiro)\n\nController层\n\n```java\n@RequestMapping(value = \"/switchstatus\", method = RequestMethod.POST)\n@RequiresPermissions(\"oilset:intelligentterminal:update\")\npublic ResponseResult switchStatus(String uid, Integer status) {\n    if (StrUtils.isEmpty(uid) || status == null) return ResponseResult.error(ResponseCode.requiredParamNotFound);\n    IntelligentterminalEntity entity = intelligentterminalService.selectById(uid);\n    if (entity == null) {\n        return ResponseResult.error(ResponseCode.recordNotFound);\n    } else if (entity.getStatus() == status) {\n        return ResponseResult.error(ResponseCode.requestParamInvalid);\n    }\n    boolean success = intelligentterminalService.switchStatus(uid, status);\n    return success ? ResponseResult.ok() : ResponseResult.error();\n}\n```\n\nService层\n\n```java\n@Override\n@Transactional\npublic boolean switchStatus(String uid, Integer status) {\n    boolean success = false;\n    success = this.updateById(new IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());\n    if (success) {\n        throw new RuntimeException();\n    }\n    return success;\n}\n```\n\n尝试手动rollback,事务可以回滚\n\n```java\n@Autowired\nprivate DataSourceTransactionManager transactionManager;\n\n\n@Override\n@Transactional\npublic boolean switchStatus(String uid, Integer status) {\n    DefaultTransactionDefinition def = new DefaultTransactionDefinition();\n    def.setName(\"text-transaction\");\n    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n    TransactionStatus tsStatus = transactionManager.getTransaction(def);\n\n    boolean success = false;\n    try {\n        success = this.updateById(new IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());\n        if (success){\n            throw new RuntimeException();\n        }\n    } catch (RuntimeException e) {\n        transactionManager.rollback(tsStatus);\n        throw e;\n    }\n    return success;\n}\n```\n\n启动类加入了\n\n```xml\n@EnableTransactionManagement\n```\n\napplication.properties加入了\n\n```xml\nspring.transaction.rollback-on-commit-failure=true\n```\n\n本来想的是，本次更新应该不会成功，可数据库偏偏就更新了，事务根本就没有回滚。\n\n## 分析\n\n- 事务用法不对，对@Transactional的用法存在问题\n- 项目搭建/配置存在问题，导致整个项目事务不起作用\n- 框架之间整合不兼容，导致事务不起作用\n\n### 排错之一：SpringBoot事务管理用法错误\n\n经过查阅各种资料，SpringBoot中声明式事务注意点有以下几点：\n\n- @Transactional 只能应用到 public 方法才有效\n- 正确的设置@Transactional 的 rollbackFor 属性。默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外，Spring 不会回滚事务。如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor\n- 正确的设置@Transactional 的 propagation 属性\n- 避免 Spring 的 AOP 的自调用问题。在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有@Transactional 注解的方法内部调用有@Transactional 注解的方法，有@Transactional 注解的方法的事务被忽略，不会发生回滚。\n- 抛出的异常不能被catch,或者catch后抛出其他异常\n\n检查代码后，所有这些条件都符合，可是就是没有生效呢。于是只能换个思路走走\n\n### 排错之二：数据库引擎类型不支持\n\n数据库引擎要支持事务，如果是MySQL，注意表要使用支持事务的引擎，比如innodb，如果是myisam，事务是不起作用的。可检查发现表引擎确实是innodb。为了确认表引擎支持事务，我还重新在另一个项目里测试了表确实支持事务。那这到底是为啥呢，别的项目里可以，目前这个项目里就是不生效。于是怀疑是项目各框架之间整合出了问题。\n\n### 排错之三：框架整合冲突\n\n第一步：\n我重新建一张测试表, 然后操作这张表，其他代码与原代码一致。见证奇迹的时候到了,事务回滚了，欣喜若狂。代码如下\n\nController层\n\n```java\n@RequestMapping(\"/update\")\npublic ResponseResult update(String id, String name) {\n    areaService.updateAreaById(id, name);\n    return ResponseResult.ok();\n}\n```\n\nService层\n\n```java\n@Override\n@Transactional\npublic boolean updateAreaById(String id, String name) {\n        AreaEntity entity = new AreaEntity();\n        entity.setAreaId(Integer.parseInt(id));\n        entity.setAreaName(name);\n        Integer integer = this.baseMapper.updateById(entity);\n        if (integer > 0) {\n            throw new RuntimeException();\n        }\n    return true;\n}\n```\n\n这就奇怪了,项目整合没啥问题,怎么操作终端的就是不回滚呢。好吧，我开始怀疑人生了。。。\n于是我又用同样的操作，测试了用户更新，果然不负所望，跟操作终端的update一样的效果。我先冷静会。。。后来我各种神测试，在终端的Controller层调用Area的Service层，在终端Service层调用Area的Service层。突然，原来的测试Area的事务也不回滚了，这下彻底无解了。\n\n这期间实在头疼，脑子里各种回忆还有那种可能。好像项目中还有比较影响的就是Shiro了，于是灵机一动，百度一下\"Shiro 使注解无效\"。果然，有大牛给出了答案。[Spring Boot整合shiro后导致@Cacheable、@Transactional等注解失效的问题](https://blog.csdn.net/gnail_oug/article/details/80706205)\n\n参考:\nstackoverflow网站上的一些文章认为，Shiro框架初始化比Spring框架的某些部件早，导致使用@Autowire注入Shiro框架的某些类不能被Spring正确初始化。\n[文章链接](https://stackoverflow.com/questions/21512791/spring-service-with-cacheable-methods-gets-initialized-without-cache-when-autowi)\n\n原来是shiro框架与spring框架的BeanFactory有所冲突，导致注入shiro框架的类不能被spring正确初始化。\n于是修改了MyShiroRealm中的代码加入懒加载@Lazy\n\n```java\n@Lazy\n@Autowired\nprivate SysUserService userService;\n```\n\n终于，奇迹发生了，事务回滚了，我欣喜若狂。但回头想想，不对呀，Realm只注入了SysUserService，怎么会影响终端的Service,于是又开始各种寻找，果然SysUserService里注入了B，B又注入了终端的Service，这就是一环套一环啊，之前测试Area也解释通了，我在终端Service注入了AreaService，导致也被带跑偏了。\n\n终于这个找了2天的问题终于得到了解答。\n\n\n\n## 补充知识点\n\n[转自https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/](https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/)\n\nSpring 事务管理分为编码式和声明式的两种方式。编程式事务指的是通过编码方式实现事务；声明式事务基于 AOP,将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多\n\n### @Transactional注解实现事务管理的步骤\n\n#### 事务配置信息\n\n```xml\n<tx:annotation-driven />\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n```\n\n或者使用 **@EnableTransactionManagement** 注解\n\n#### 将@Transactional 注解添加到合适的方法上，并设置合适的属性信息。\n\n@Transactional 注解的属性信息\n\n|     属性名      | 说明                                                         |\n| :-------------: | :----------------------------------------------------------- |\n|      name       | 当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器 |\n|   propagation   | 事务的传播行为，默认值为 REQUIRED                            |\n|    isolation    | 事务的隔离度，默认值采用 DEFAULT                             |\n|     timeout     | 事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务 |\n|    read-only    | 指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true |\n|  rollback-for   | 用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔 |\n| no-rollback-for | 抛出 no-rollback-for 指定的异常类型，不回滚事务              |\n\n除此以外，@Transactional 注解也可以添加到类级别上。当把@Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。见清单 2，EmployeeService 的所有方法都支持事务并且是只读。当类级别配置了@Transactional，方法级别也配置了@Transactional，应用程序会以方法级别的事务属性信息来管理事务，换言之，方法级别的事务属性信息会覆盖类级别的相关配置信息\n\n**read-only使用场景**\n\n从这一点设置的时间点开始（时间点a）到这个事务结束的过程中，其他事务所提交的数据，该事务将看不见！（查询中不会出现别人在时间点a之后提交的数据）\n\n如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； \n如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。\n【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】\n\n在将事务设置成只读后，相当于将数据库设置成只读数据库，此时若要进行写的操作，会出现错误\n\n### Spring 的注解方式的事务实现机制\n\n在应用系统调用声明@Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，在代码运行时生成一个代理对象，根据@Transactional 的属性配置信息，这个代理对象决定该声明@Transactional 的目标方法是否由拦截器 TransactionInterceptor 来使用拦截，在 TransactionInterceptor 拦截时，会在在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器\n\n![image](D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/01Spring%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.jpg)\n\nSpring AOP 代理有 CglibAopProxy 和 JdkDynamicAopProxy 两种，上图 是以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 DynamicAdvisedInterceptor 的 intercept 方法。对于 JdkDynamicAopProxy，需要调用其 invoke 方法。\n\n正如上文提到的，事务管理的框架是由抽象事务管理器 AbstractPlatformTransactionManager 来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。不同的事务管理器管理不同的数据资源 DataSource，比如 DataSourceTransactionManager 管理 JDBC 的 Connection。\n\nPlatformTransactionManager，AbstractPlatformTransactionManager 及具体实现类关系下图所示\n\n![image](D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/02TransactionManager%E7%B1%BB%E7%BB%93%E6%9E%84.jpg)\n\n### Spring事务7种传播行为\n\n所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。\n\n- **PROPAGATION.REQUIRED**：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。**Spring默认的传播行为**\n- **PROPAGATION.SUPPORTS**：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。\n- **PROPAGATION.MANDATORY**：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常\n- **PROPAGATION.REQUIRES_NEW**：创建新事务，无论当前存不存在事务，都创建新事务\n- **PROPAGATION.NOT_SUPPORTED**：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起\n- **PROPAGATION.NEVER**：以非事务方式执行，如果当前存在事务，则抛出异常\n- **PROPAGATION.NESTED**：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作\n\n### Spring事务隔离性\n\n[示例地址](https://www.cnblogs.com/huanongying/p/7021555.html)\n\n隔离级别是指若干个并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读取、重复读、幻读。\n\n- DEFAULT ：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是： READ_COMMITTED 。 MyAQL查询(SELECT @@tx_isolation)\n- READ_UNCOMMITTED ：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。 \n- READ_COMMITTED ：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。 \n- REPEATABLE_READ ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。 \n- SERIALIZABLE ：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。 \n\n指定方法：通过使用 isolation 属性设置，例如：@Transactional(isolation = Isolation.DEFAULT)/\n\n**丢失更新**：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。\n**脏读（Dirty reads）**：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。\n**不可重复读（Non-repeatable reads）**：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。\n**幻读（Phantom reads）**：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。\n注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。","source":"_posts/20190611-记一次事务不起作用的排错历程.md","raw":"---\ntitle: 记一次事务不起作用的排错历程\ndate: 2019-06-11 22:04:03\ntags: '经验总结'\ncategories: \n- 技术\n- Lesson-Learned\n---\n\n## 问题描述\n\n服务端接口需提供接口，在web端将某个终端调为在线模式时，同时需要更新内存中在线的终端数据。 在更新终端状态成功之后，立刻查询数据库处于在线状态的终端数据,然后内存中的数据。更新状态与更新内存数据在同一个事务，查询操作需要保证能够读取到还未提交的更新操作。\n\n<!--more-->\n\n想到这应该是设计到事务的隔离性这块，因为之前对事务处理这块认识比较不足，就决定来科普下事务相关的知识点。\n\n但出门的第一步就跌了个大跟头，代码里的事务根本不起作用，@Transactional注解形同虚设，于是开始排错。\n\n代码是这样的(项目整合了SpringBoot+MyBatisPlus+Druid+Shiro)\n\nController层\n\n```java\n@RequestMapping(value = \"/switchstatus\", method = RequestMethod.POST)\n@RequiresPermissions(\"oilset:intelligentterminal:update\")\npublic ResponseResult switchStatus(String uid, Integer status) {\n    if (StrUtils.isEmpty(uid) || status == null) return ResponseResult.error(ResponseCode.requiredParamNotFound);\n    IntelligentterminalEntity entity = intelligentterminalService.selectById(uid);\n    if (entity == null) {\n        return ResponseResult.error(ResponseCode.recordNotFound);\n    } else if (entity.getStatus() == status) {\n        return ResponseResult.error(ResponseCode.requestParamInvalid);\n    }\n    boolean success = intelligentterminalService.switchStatus(uid, status);\n    return success ? ResponseResult.ok() : ResponseResult.error();\n}\n```\n\nService层\n\n```java\n@Override\n@Transactional\npublic boolean switchStatus(String uid, Integer status) {\n    boolean success = false;\n    success = this.updateById(new IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());\n    if (success) {\n        throw new RuntimeException();\n    }\n    return success;\n}\n```\n\n尝试手动rollback,事务可以回滚\n\n```java\n@Autowired\nprivate DataSourceTransactionManager transactionManager;\n\n\n@Override\n@Transactional\npublic boolean switchStatus(String uid, Integer status) {\n    DefaultTransactionDefinition def = new DefaultTransactionDefinition();\n    def.setName(\"text-transaction\");\n    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n    TransactionStatus tsStatus = transactionManager.getTransaction(def);\n\n    boolean success = false;\n    try {\n        success = this.updateById(new IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());\n        if (success){\n            throw new RuntimeException();\n        }\n    } catch (RuntimeException e) {\n        transactionManager.rollback(tsStatus);\n        throw e;\n    }\n    return success;\n}\n```\n\n启动类加入了\n\n```xml\n@EnableTransactionManagement\n```\n\napplication.properties加入了\n\n```xml\nspring.transaction.rollback-on-commit-failure=true\n```\n\n本来想的是，本次更新应该不会成功，可数据库偏偏就更新了，事务根本就没有回滚。\n\n## 分析\n\n- 事务用法不对，对@Transactional的用法存在问题\n- 项目搭建/配置存在问题，导致整个项目事务不起作用\n- 框架之间整合不兼容，导致事务不起作用\n\n### 排错之一：SpringBoot事务管理用法错误\n\n经过查阅各种资料，SpringBoot中声明式事务注意点有以下几点：\n\n- @Transactional 只能应用到 public 方法才有效\n- 正确的设置@Transactional 的 rollbackFor 属性。默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外，Spring 不会回滚事务。如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor\n- 正确的设置@Transactional 的 propagation 属性\n- 避免 Spring 的 AOP 的自调用问题。在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有@Transactional 注解的方法内部调用有@Transactional 注解的方法，有@Transactional 注解的方法的事务被忽略，不会发生回滚。\n- 抛出的异常不能被catch,或者catch后抛出其他异常\n\n检查代码后，所有这些条件都符合，可是就是没有生效呢。于是只能换个思路走走\n\n### 排错之二：数据库引擎类型不支持\n\n数据库引擎要支持事务，如果是MySQL，注意表要使用支持事务的引擎，比如innodb，如果是myisam，事务是不起作用的。可检查发现表引擎确实是innodb。为了确认表引擎支持事务，我还重新在另一个项目里测试了表确实支持事务。那这到底是为啥呢，别的项目里可以，目前这个项目里就是不生效。于是怀疑是项目各框架之间整合出了问题。\n\n### 排错之三：框架整合冲突\n\n第一步：\n我重新建一张测试表, 然后操作这张表，其他代码与原代码一致。见证奇迹的时候到了,事务回滚了，欣喜若狂。代码如下\n\nController层\n\n```java\n@RequestMapping(\"/update\")\npublic ResponseResult update(String id, String name) {\n    areaService.updateAreaById(id, name);\n    return ResponseResult.ok();\n}\n```\n\nService层\n\n```java\n@Override\n@Transactional\npublic boolean updateAreaById(String id, String name) {\n        AreaEntity entity = new AreaEntity();\n        entity.setAreaId(Integer.parseInt(id));\n        entity.setAreaName(name);\n        Integer integer = this.baseMapper.updateById(entity);\n        if (integer > 0) {\n            throw new RuntimeException();\n        }\n    return true;\n}\n```\n\n这就奇怪了,项目整合没啥问题,怎么操作终端的就是不回滚呢。好吧，我开始怀疑人生了。。。\n于是我又用同样的操作，测试了用户更新，果然不负所望，跟操作终端的update一样的效果。我先冷静会。。。后来我各种神测试，在终端的Controller层调用Area的Service层，在终端Service层调用Area的Service层。突然，原来的测试Area的事务也不回滚了，这下彻底无解了。\n\n这期间实在头疼，脑子里各种回忆还有那种可能。好像项目中还有比较影响的就是Shiro了，于是灵机一动，百度一下\"Shiro 使注解无效\"。果然，有大牛给出了答案。[Spring Boot整合shiro后导致@Cacheable、@Transactional等注解失效的问题](https://blog.csdn.net/gnail_oug/article/details/80706205)\n\n参考:\nstackoverflow网站上的一些文章认为，Shiro框架初始化比Spring框架的某些部件早，导致使用@Autowire注入Shiro框架的某些类不能被Spring正确初始化。\n[文章链接](https://stackoverflow.com/questions/21512791/spring-service-with-cacheable-methods-gets-initialized-without-cache-when-autowi)\n\n原来是shiro框架与spring框架的BeanFactory有所冲突，导致注入shiro框架的类不能被spring正确初始化。\n于是修改了MyShiroRealm中的代码加入懒加载@Lazy\n\n```java\n@Lazy\n@Autowired\nprivate SysUserService userService;\n```\n\n终于，奇迹发生了，事务回滚了，我欣喜若狂。但回头想想，不对呀，Realm只注入了SysUserService，怎么会影响终端的Service,于是又开始各种寻找，果然SysUserService里注入了B，B又注入了终端的Service，这就是一环套一环啊，之前测试Area也解释通了，我在终端Service注入了AreaService，导致也被带跑偏了。\n\n终于这个找了2天的问题终于得到了解答。\n\n\n\n## 补充知识点\n\n[转自https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/](https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/)\n\nSpring 事务管理分为编码式和声明式的两种方式。编程式事务指的是通过编码方式实现事务；声明式事务基于 AOP,将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多\n\n### @Transactional注解实现事务管理的步骤\n\n#### 事务配置信息\n\n```xml\n<tx:annotation-driven />\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n```\n\n或者使用 **@EnableTransactionManagement** 注解\n\n#### 将@Transactional 注解添加到合适的方法上，并设置合适的属性信息。\n\n@Transactional 注解的属性信息\n\n|     属性名      | 说明                                                         |\n| :-------------: | :----------------------------------------------------------- |\n|      name       | 当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器 |\n|   propagation   | 事务的传播行为，默认值为 REQUIRED                            |\n|    isolation    | 事务的隔离度，默认值采用 DEFAULT                             |\n|     timeout     | 事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务 |\n|    read-only    | 指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true |\n|  rollback-for   | 用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔 |\n| no-rollback-for | 抛出 no-rollback-for 指定的异常类型，不回滚事务              |\n\n除此以外，@Transactional 注解也可以添加到类级别上。当把@Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。见清单 2，EmployeeService 的所有方法都支持事务并且是只读。当类级别配置了@Transactional，方法级别也配置了@Transactional，应用程序会以方法级别的事务属性信息来管理事务，换言之，方法级别的事务属性信息会覆盖类级别的相关配置信息\n\n**read-only使用场景**\n\n从这一点设置的时间点开始（时间点a）到这个事务结束的过程中，其他事务所提交的数据，该事务将看不见！（查询中不会出现别人在时间点a之后提交的数据）\n\n如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； \n如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。\n【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】\n\n在将事务设置成只读后，相当于将数据库设置成只读数据库，此时若要进行写的操作，会出现错误\n\n### Spring 的注解方式的事务实现机制\n\n在应用系统调用声明@Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，在代码运行时生成一个代理对象，根据@Transactional 的属性配置信息，这个代理对象决定该声明@Transactional 的目标方法是否由拦截器 TransactionInterceptor 来使用拦截，在 TransactionInterceptor 拦截时，会在在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器\n\n![image](D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/01Spring%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.jpg)\n\nSpring AOP 代理有 CglibAopProxy 和 JdkDynamicAopProxy 两种，上图 是以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 DynamicAdvisedInterceptor 的 intercept 方法。对于 JdkDynamicAopProxy，需要调用其 invoke 方法。\n\n正如上文提到的，事务管理的框架是由抽象事务管理器 AbstractPlatformTransactionManager 来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。不同的事务管理器管理不同的数据资源 DataSource，比如 DataSourceTransactionManager 管理 JDBC 的 Connection。\n\nPlatformTransactionManager，AbstractPlatformTransactionManager 及具体实现类关系下图所示\n\n![image](D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/02TransactionManager%E7%B1%BB%E7%BB%93%E6%9E%84.jpg)\n\n### Spring事务7种传播行为\n\n所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。\n\n- **PROPAGATION.REQUIRED**：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。**Spring默认的传播行为**\n- **PROPAGATION.SUPPORTS**：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。\n- **PROPAGATION.MANDATORY**：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常\n- **PROPAGATION.REQUIRES_NEW**：创建新事务，无论当前存不存在事务，都创建新事务\n- **PROPAGATION.NOT_SUPPORTED**：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起\n- **PROPAGATION.NEVER**：以非事务方式执行，如果当前存在事务，则抛出异常\n- **PROPAGATION.NESTED**：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作\n\n### Spring事务隔离性\n\n[示例地址](https://www.cnblogs.com/huanongying/p/7021555.html)\n\n隔离级别是指若干个并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读取、重复读、幻读。\n\n- DEFAULT ：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是： READ_COMMITTED 。 MyAQL查询(SELECT @@tx_isolation)\n- READ_UNCOMMITTED ：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。 \n- READ_COMMITTED ：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。 \n- REPEATABLE_READ ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。 \n- SERIALIZABLE ：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。 \n\n指定方法：通过使用 isolation 属性设置，例如：@Transactional(isolation = Isolation.DEFAULT)/\n\n**丢失更新**：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。\n**脏读（Dirty reads）**：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。\n**不可重复读（Non-repeatable reads）**：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。\n**幻读（Phantom reads）**：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。\n注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。","slug":"记一次事务不起作用的排错历程","published":1,"updated":"2019-10-27T13:02:36.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxcl1000fd4kpewpce2z0","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>服务端接口需提供接口，在web端将某个终端调为在线模式时，同时需要更新内存中在线的终端数据。 在更新终端状态成功之后，立刻查询数据库处于在线状态的终端数据,然后内存中的数据。更新状态与更新内存数据在同一个事务，查询操作需要保证能够读取到还未提交的更新操作。</p>\n<a id=\"more\"></a>\n<p>想到这应该是设计到事务的隔离性这块，因为之前对事务处理这块认识比较不足，就决定来科普下事务相关的知识点。</p>\n<p>但出门的第一步就跌了个大跟头，代码里的事务根本不起作用，@Transactional注解形同虚设，于是开始排错。</p>\n<p>代码是这样的(项目整合了SpringBoot+MyBatisPlus+Druid+Shiro)</p>\n<p>Controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/switchstatus\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@RequiresPermissions</span>(<span class=\"string\">\"oilset:intelligentterminal:update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">switchStatus</span><span class=\"params\">(String uid, Integer status)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StrUtils.isEmpty(uid) || status == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ResponseResult.error(ResponseCode.requiredParamNotFound);</span><br><span class=\"line\">    IntelligentterminalEntity entity = intelligentterminalService.selectById(uid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entity == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.error(ResponseCode.recordNotFound);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entity.getStatus() == status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.error(ResponseCode.requestParamInvalid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> success = intelligentterminalService.switchStatus(uid, status);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success ? ResponseResult.ok() : ResponseResult.error();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">switchStatus</span><span class=\"params\">(String uid, Integer status)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    success = <span class=\"keyword\">this</span>.updateById(<span class=\"keyword\">new</span> IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尝试手动rollback,事务可以回滚</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DataSourceTransactionManager transactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">switchStatus</span><span class=\"params\">(String uid, Integer status)</span> </span>&#123;</span><br><span class=\"line\">    DefaultTransactionDefinition def = <span class=\"keyword\">new</span> DefaultTransactionDefinition();</span><br><span class=\"line\">    def.setName(<span class=\"string\">\"text-transaction\"</span>);</span><br><span class=\"line\">    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">    TransactionStatus tsStatus = transactionManager.getTransaction(def);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        success = <span class=\"keyword\">this</span>.updateById(<span class=\"keyword\">new</span> IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">        transactionManager.rollback(tsStatus);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动类加入了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableTransactionManagement</span><br></pre></td></tr></table></figure>\n<p>application.properties加入了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.transaction.rollback-on-commit-failure=true</span><br></pre></td></tr></table></figure>\n<p>本来想的是，本次更新应该不会成功，可数据库偏偏就更新了，事务根本就没有回滚。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>事务用法不对，对@Transactional的用法存在问题</li>\n<li>项目搭建/配置存在问题，导致整个项目事务不起作用</li>\n<li>框架之间整合不兼容，导致事务不起作用</li>\n</ul>\n<h3 id=\"排错之一：SpringBoot事务管理用法错误\"><a href=\"#排错之一：SpringBoot事务管理用法错误\" class=\"headerlink\" title=\"排错之一：SpringBoot事务管理用法错误\"></a>排错之一：SpringBoot事务管理用法错误</h3><p>经过查阅各种资料，SpringBoot中声明式事务注意点有以下几点：</p>\n<ul>\n<li>@Transactional 只能应用到 public 方法才有效</li>\n<li>正确的设置@Transactional 的 rollbackFor 属性。默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外，Spring 不会回滚事务。如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor</li>\n<li>正确的设置@Transactional 的 propagation 属性</li>\n<li>避免 Spring 的 AOP 的自调用问题。在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有@Transactional 注解的方法内部调用有@Transactional 注解的方法，有@Transactional 注解的方法的事务被忽略，不会发生回滚。</li>\n<li>抛出的异常不能被catch,或者catch后抛出其他异常</li>\n</ul>\n<p>检查代码后，所有这些条件都符合，可是就是没有生效呢。于是只能换个思路走走</p>\n<h3 id=\"排错之二：数据库引擎类型不支持\"><a href=\"#排错之二：数据库引擎类型不支持\" class=\"headerlink\" title=\"排错之二：数据库引擎类型不支持\"></a>排错之二：数据库引擎类型不支持</h3><p>数据库引擎要支持事务，如果是MySQL，注意表要使用支持事务的引擎，比如innodb，如果是myisam，事务是不起作用的。可检查发现表引擎确实是innodb。为了确认表引擎支持事务，我还重新在另一个项目里测试了表确实支持事务。那这到底是为啥呢，别的项目里可以，目前这个项目里就是不生效。于是怀疑是项目各框架之间整合出了问题。</p>\n<h3 id=\"排错之三：框架整合冲突\"><a href=\"#排错之三：框架整合冲突\" class=\"headerlink\" title=\"排错之三：框架整合冲突\"></a>排错之三：框架整合冲突</h3><p>第一步：<br>我重新建一张测试表, 然后操作这张表，其他代码与原代码一致。见证奇迹的时候到了,事务回滚了，欣喜若狂。代码如下</p>\n<p>Controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">update</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">    areaService.updateAreaById(id, name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResponseResult.ok();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">updateAreaById</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">        AreaEntity entity = <span class=\"keyword\">new</span> AreaEntity();</span><br><span class=\"line\">        entity.setAreaId(Integer.parseInt(id));</span><br><span class=\"line\">        entity.setAreaName(name);</span><br><span class=\"line\">        Integer integer = <span class=\"keyword\">this</span>.baseMapper.updateById(entity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integer &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就奇怪了,项目整合没啥问题,怎么操作终端的就是不回滚呢。好吧，我开始怀疑人生了。。。<br>于是我又用同样的操作，测试了用户更新，果然不负所望，跟操作终端的update一样的效果。我先冷静会。。。后来我各种神测试，在终端的Controller层调用Area的Service层，在终端Service层调用Area的Service层。突然，原来的测试Area的事务也不回滚了，这下彻底无解了。</p>\n<p>这期间实在头疼，脑子里各种回忆还有那种可能。好像项目中还有比较影响的就是Shiro了，于是灵机一动，百度一下”Shiro 使注解无效”。果然，有大牛给出了答案。<a href=\"https://blog.csdn.net/gnail_oug/article/details/80706205\" target=\"_blank\" rel=\"noopener\">Spring Boot整合shiro后导致@Cacheable、@Transactional等注解失效的问题</a></p>\n<p>参考:<br>stackoverflow网站上的一些文章认为，Shiro框架初始化比Spring框架的某些部件早，导致使用@Autowire注入Shiro框架的某些类不能被Spring正确初始化。<br><a href=\"https://stackoverflow.com/questions/21512791/spring-service-with-cacheable-methods-gets-initialized-without-cache-when-autowi\" target=\"_blank\" rel=\"noopener\">文章链接</a></p>\n<p>原来是shiro框架与spring框架的BeanFactory有所冲突，导致注入shiro框架的类不能被spring正确初始化。<br>于是修改了MyShiroRealm中的代码加入懒加载@Lazy</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Lazy</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> SysUserService userService;</span><br></pre></td></tr></table></figure>\n<p>终于，奇迹发生了，事务回滚了，我欣喜若狂。但回头想想，不对呀，Realm只注入了SysUserService，怎么会影响终端的Service,于是又开始各种寻找，果然SysUserService里注入了B，B又注入了终端的Service，这就是一环套一环啊，之前测试Area也解释通了，我在终端Service注入了AreaService，导致也被带跑偏了。</p>\n<p>终于这个找了2天的问题终于得到了解答。</p>\n<h2 id=\"补充知识点\"><a href=\"#补充知识点\" class=\"headerlink\" title=\"补充知识点\"></a>补充知识点</h2><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/\" target=\"_blank\" rel=\"noopener\">转自https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/</a></p>\n<p>Spring 事务管理分为编码式和声明式的两种方式。编程式事务指的是通过编码方式实现事务；声明式事务基于 AOP,将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多</p>\n<h3 id=\"Transactional注解实现事务管理的步骤\"><a href=\"#Transactional注解实现事务管理的步骤\" class=\"headerlink\" title=\"@Transactional注解实现事务管理的步骤\"></a>@Transactional注解实现事务管理的步骤</h3><h4 id=\"事务配置信息\"><a href=\"#事务配置信息\" class=\"headerlink\" title=\"事务配置信息\"></a>事务配置信息</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者使用 <strong>@EnableTransactionManagement</strong> 注解</p>\n<h4 id=\"将-Transactional-注解添加到合适的方法上，并设置合适的属性信息。\"><a href=\"#将-Transactional-注解添加到合适的方法上，并设置合适的属性信息。\" class=\"headerlink\" title=\"将@Transactional 注解添加到合适的方法上，并设置合适的属性信息。\"></a>将@Transactional 注解添加到合适的方法上，并设置合适的属性信息。</h4><p>@Transactional 注解的属性信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:left\">当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">propagation</td>\n<td style=\"text-align:left\">事务的传播行为，默认值为 REQUIRED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isolation</td>\n<td style=\"text-align:left\">事务的隔离度，默认值采用 DEFAULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:left\">事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">read-only</td>\n<td style=\"text-align:left\">指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rollback-for</td>\n<td style=\"text-align:left\">用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">no-rollback-for</td>\n<td style=\"text-align:left\">抛出 no-rollback-for 指定的异常类型，不回滚事务</td>\n</tr>\n</tbody>\n</table>\n<p>除此以外，@Transactional 注解也可以添加到类级别上。当把@Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。见清单 2，EmployeeService 的所有方法都支持事务并且是只读。当类级别配置了@Transactional，方法级别也配置了@Transactional，应用程序会以方法级别的事务属性信息来管理事务，换言之，方法级别的事务属性信息会覆盖类级别的相关配置信息</p>\n<p><strong>read-only使用场景</strong></p>\n<p>从这一点设置的时间点开始（时间点a）到这个事务结束的过程中，其他事务所提交的数据，该事务将看不见！（查询中不会出现别人在时间点a之后提交的数据）</p>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p>\n<p>在将事务设置成只读后，相当于将数据库设置成只读数据库，此时若要进行写的操作，会出现错误</p>\n<h3 id=\"Spring-的注解方式的事务实现机制\"><a href=\"#Spring-的注解方式的事务实现机制\" class=\"headerlink\" title=\"Spring 的注解方式的事务实现机制\"></a>Spring 的注解方式的事务实现机制</h3><p>在应用系统调用声明@Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，在代码运行时生成一个代理对象，根据@Transactional 的属性配置信息，这个代理对象决定该声明@Transactional 的目标方法是否由拦截器 TransactionInterceptor 来使用拦截，在 TransactionInterceptor 拦截时，会在在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器</p>\n<p><img src=\"D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/01Spring%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.jpg\" alt=\"image\"></p>\n<p>Spring AOP 代理有 CglibAopProxy 和 JdkDynamicAopProxy 两种，上图 是以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 DynamicAdvisedInterceptor 的 intercept 方法。对于 JdkDynamicAopProxy，需要调用其 invoke 方法。</p>\n<p>正如上文提到的，事务管理的框架是由抽象事务管理器 AbstractPlatformTransactionManager 来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。不同的事务管理器管理不同的数据资源 DataSource，比如 DataSourceTransactionManager 管理 JDBC 的 Connection。</p>\n<p>PlatformTransactionManager，AbstractPlatformTransactionManager 及具体实现类关系下图所示</p>\n<p><img src=\"D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/02TransactionManager%E7%B1%BB%E7%BB%93%E6%9E%84.jpg\" alt=\"image\"></p>\n<h3 id=\"Spring事务7种传播行为\"><a href=\"#Spring事务7种传播行为\" class=\"headerlink\" title=\"Spring事务7种传播行为\"></a>Spring事务7种传播行为</h3><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。</p>\n<ul>\n<li><strong>PROPAGATION.REQUIRED</strong>：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。<strong>Spring默认的传播行为</strong></li>\n<li><strong>PROPAGATION.SUPPORTS</strong>：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</li>\n<li><strong>PROPAGATION.MANDATORY</strong>：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常</li>\n<li><strong>PROPAGATION.REQUIRES_NEW</strong>：创建新事务，无论当前存不存在事务，都创建新事务</li>\n<li><strong>PROPAGATION.NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li>\n<li><strong>PROPAGATION.NEVER</strong>：以非事务方式执行，如果当前存在事务，则抛出异常</li>\n<li><strong>PROPAGATION.NESTED</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作</li>\n</ul>\n<h3 id=\"Spring事务隔离性\"><a href=\"#Spring事务隔离性\" class=\"headerlink\" title=\"Spring事务隔离性\"></a>Spring事务隔离性</h3><p><a href=\"https://www.cnblogs.com/huanongying/p/7021555.html\" target=\"_blank\" rel=\"noopener\">示例地址</a></p>\n<p>隔离级别是指若干个并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读取、重复读、幻读。</p>\n<ul>\n<li>DEFAULT ：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是： READ_COMMITTED 。 MyAQL查询(SELECT @@tx_isolation)</li>\n<li>READ_UNCOMMITTED ：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。 </li>\n<li>READ_COMMITTED ：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。 </li>\n<li>REPEATABLE_READ ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。 </li>\n<li>SERIALIZABLE ：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。 </li>\n</ul>\n<p>指定方法：通过使用 isolation 属性设置，例如：@Transactional(isolation = Isolation.DEFAULT)/</p>\n<p><strong>丢失更新</strong>：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。<br><strong>脏读（Dirty reads）</strong>：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。<br><strong>不可重复读（Non-repeatable reads）</strong>：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。<br><strong>幻读（Phantom reads）</strong>：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。<br>注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。</p>\n","site":{"data":{}},"length":7987,"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>服务端接口需提供接口，在web端将某个终端调为在线模式时，同时需要更新内存中在线的终端数据。 在更新终端状态成功之后，立刻查询数据库处于在线状态的终端数据,然后内存中的数据。更新状态与更新内存数据在同一个事务，查询操作需要保证能够读取到还未提交的更新操作。</p>","more":"<p>想到这应该是设计到事务的隔离性这块，因为之前对事务处理这块认识比较不足，就决定来科普下事务相关的知识点。</p>\n<p>但出门的第一步就跌了个大跟头，代码里的事务根本不起作用，@Transactional注解形同虚设，于是开始排错。</p>\n<p>代码是这样的(项目整合了SpringBoot+MyBatisPlus+Druid+Shiro)</p>\n<p>Controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/switchstatus\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@RequiresPermissions</span>(<span class=\"string\">\"oilset:intelligentterminal:update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">switchStatus</span><span class=\"params\">(String uid, Integer status)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StrUtils.isEmpty(uid) || status == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> ResponseResult.error(ResponseCode.requiredParamNotFound);</span><br><span class=\"line\">    IntelligentterminalEntity entity = intelligentterminalService.selectById(uid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entity == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.error(ResponseCode.recordNotFound);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entity.getStatus() == status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.error(ResponseCode.requestParamInvalid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> success = intelligentterminalService.switchStatus(uid, status);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success ? ResponseResult.ok() : ResponseResult.error();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">switchStatus</span><span class=\"params\">(String uid, Integer status)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    success = <span class=\"keyword\">this</span>.updateById(<span class=\"keyword\">new</span> IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尝试手动rollback,事务可以回滚</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DataSourceTransactionManager transactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">switchStatus</span><span class=\"params\">(String uid, Integer status)</span> </span>&#123;</span><br><span class=\"line\">    DefaultTransactionDefinition def = <span class=\"keyword\">new</span> DefaultTransactionDefinition();</span><br><span class=\"line\">    def.setName(<span class=\"string\">\"text-transaction\"</span>);</span><br><span class=\"line\">    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">    TransactionStatus tsStatus = transactionManager.getTransaction(def);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        success = <span class=\"keyword\">this</span>.updateById(<span class=\"keyword\">new</span> IntelligentterminalEntity(uid, status), SpringContextHolder.getLogInUserId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">        transactionManager.rollback(tsStatus);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动类加入了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableTransactionManagement</span><br></pre></td></tr></table></figure>\n<p>application.properties加入了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.transaction.rollback-on-commit-failure=true</span><br></pre></td></tr></table></figure>\n<p>本来想的是，本次更新应该不会成功，可数据库偏偏就更新了，事务根本就没有回滚。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>事务用法不对，对@Transactional的用法存在问题</li>\n<li>项目搭建/配置存在问题，导致整个项目事务不起作用</li>\n<li>框架之间整合不兼容，导致事务不起作用</li>\n</ul>\n<h3 id=\"排错之一：SpringBoot事务管理用法错误\"><a href=\"#排错之一：SpringBoot事务管理用法错误\" class=\"headerlink\" title=\"排错之一：SpringBoot事务管理用法错误\"></a>排错之一：SpringBoot事务管理用法错误</h3><p>经过查阅各种资料，SpringBoot中声明式事务注意点有以下几点：</p>\n<ul>\n<li>@Transactional 只能应用到 public 方法才有效</li>\n<li>正确的设置@Transactional 的 rollbackFor 属性。默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外，Spring 不会回滚事务。如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor</li>\n<li>正确的设置@Transactional 的 propagation 属性</li>\n<li>避免 Spring 的 AOP 的自调用问题。在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有@Transactional 注解的方法内部调用有@Transactional 注解的方法，有@Transactional 注解的方法的事务被忽略，不会发生回滚。</li>\n<li>抛出的异常不能被catch,或者catch后抛出其他异常</li>\n</ul>\n<p>检查代码后，所有这些条件都符合，可是就是没有生效呢。于是只能换个思路走走</p>\n<h3 id=\"排错之二：数据库引擎类型不支持\"><a href=\"#排错之二：数据库引擎类型不支持\" class=\"headerlink\" title=\"排错之二：数据库引擎类型不支持\"></a>排错之二：数据库引擎类型不支持</h3><p>数据库引擎要支持事务，如果是MySQL，注意表要使用支持事务的引擎，比如innodb，如果是myisam，事务是不起作用的。可检查发现表引擎确实是innodb。为了确认表引擎支持事务，我还重新在另一个项目里测试了表确实支持事务。那这到底是为啥呢，别的项目里可以，目前这个项目里就是不生效。于是怀疑是项目各框架之间整合出了问题。</p>\n<h3 id=\"排错之三：框架整合冲突\"><a href=\"#排错之三：框架整合冲突\" class=\"headerlink\" title=\"排错之三：框架整合冲突\"></a>排错之三：框架整合冲突</h3><p>第一步：<br>我重新建一张测试表, 然后操作这张表，其他代码与原代码一致。见证奇迹的时候到了,事务回滚了，欣喜若狂。代码如下</p>\n<p>Controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">update</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">    areaService.updateAreaById(id, name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResponseResult.ok();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">updateAreaById</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">        AreaEntity entity = <span class=\"keyword\">new</span> AreaEntity();</span><br><span class=\"line\">        entity.setAreaId(Integer.parseInt(id));</span><br><span class=\"line\">        entity.setAreaName(name);</span><br><span class=\"line\">        Integer integer = <span class=\"keyword\">this</span>.baseMapper.updateById(entity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integer &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就奇怪了,项目整合没啥问题,怎么操作终端的就是不回滚呢。好吧，我开始怀疑人生了。。。<br>于是我又用同样的操作，测试了用户更新，果然不负所望，跟操作终端的update一样的效果。我先冷静会。。。后来我各种神测试，在终端的Controller层调用Area的Service层，在终端Service层调用Area的Service层。突然，原来的测试Area的事务也不回滚了，这下彻底无解了。</p>\n<p>这期间实在头疼，脑子里各种回忆还有那种可能。好像项目中还有比较影响的就是Shiro了，于是灵机一动，百度一下”Shiro 使注解无效”。果然，有大牛给出了答案。<a href=\"https://blog.csdn.net/gnail_oug/article/details/80706205\" target=\"_blank\" rel=\"noopener\">Spring Boot整合shiro后导致@Cacheable、@Transactional等注解失效的问题</a></p>\n<p>参考:<br>stackoverflow网站上的一些文章认为，Shiro框架初始化比Spring框架的某些部件早，导致使用@Autowire注入Shiro框架的某些类不能被Spring正确初始化。<br><a href=\"https://stackoverflow.com/questions/21512791/spring-service-with-cacheable-methods-gets-initialized-without-cache-when-autowi\" target=\"_blank\" rel=\"noopener\">文章链接</a></p>\n<p>原来是shiro框架与spring框架的BeanFactory有所冲突，导致注入shiro框架的类不能被spring正确初始化。<br>于是修改了MyShiroRealm中的代码加入懒加载@Lazy</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Lazy</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> SysUserService userService;</span><br></pre></td></tr></table></figure>\n<p>终于，奇迹发生了，事务回滚了，我欣喜若狂。但回头想想，不对呀，Realm只注入了SysUserService，怎么会影响终端的Service,于是又开始各种寻找，果然SysUserService里注入了B，B又注入了终端的Service，这就是一环套一环啊，之前测试Area也解释通了，我在终端Service注入了AreaService，导致也被带跑偏了。</p>\n<p>终于这个找了2天的问题终于得到了解答。</p>\n<h2 id=\"补充知识点\"><a href=\"#补充知识点\" class=\"headerlink\" title=\"补充知识点\"></a>补充知识点</h2><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/\" target=\"_blank\" rel=\"noopener\">转自https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/</a></p>\n<p>Spring 事务管理分为编码式和声明式的两种方式。编程式事务指的是通过编码方式实现事务；声明式事务基于 AOP,将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多</p>\n<h3 id=\"Transactional注解实现事务管理的步骤\"><a href=\"#Transactional注解实现事务管理的步骤\" class=\"headerlink\" title=\"@Transactional注解实现事务管理的步骤\"></a>@Transactional注解实现事务管理的步骤</h3><h4 id=\"事务配置信息\"><a href=\"#事务配置信息\" class=\"headerlink\" title=\"事务配置信息\"></a>事务配置信息</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者使用 <strong>@EnableTransactionManagement</strong> 注解</p>\n<h4 id=\"将-Transactional-注解添加到合适的方法上，并设置合适的属性信息。\"><a href=\"#将-Transactional-注解添加到合适的方法上，并设置合适的属性信息。\" class=\"headerlink\" title=\"将@Transactional 注解添加到合适的方法上，并设置合适的属性信息。\"></a>将@Transactional 注解添加到合适的方法上，并设置合适的属性信息。</h4><p>@Transactional 注解的属性信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:left\">当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">propagation</td>\n<td style=\"text-align:left\">事务的传播行为，默认值为 REQUIRED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isolation</td>\n<td style=\"text-align:left\">事务的隔离度，默认值采用 DEFAULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:left\">事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">read-only</td>\n<td style=\"text-align:left\">指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rollback-for</td>\n<td style=\"text-align:left\">用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">no-rollback-for</td>\n<td style=\"text-align:left\">抛出 no-rollback-for 指定的异常类型，不回滚事务</td>\n</tr>\n</tbody>\n</table>\n<p>除此以外，@Transactional 注解也可以添加到类级别上。当把@Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。见清单 2，EmployeeService 的所有方法都支持事务并且是只读。当类级别配置了@Transactional，方法级别也配置了@Transactional，应用程序会以方法级别的事务属性信息来管理事务，换言之，方法级别的事务属性信息会覆盖类级别的相关配置信息</p>\n<p><strong>read-only使用场景</strong></p>\n<p>从这一点设置的时间点开始（时间点a）到这个事务结束的过程中，其他事务所提交的数据，该事务将看不见！（查询中不会出现别人在时间点a之后提交的数据）</p>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p>\n<p>在将事务设置成只读后，相当于将数据库设置成只读数据库，此时若要进行写的操作，会出现错误</p>\n<h3 id=\"Spring-的注解方式的事务实现机制\"><a href=\"#Spring-的注解方式的事务实现机制\" class=\"headerlink\" title=\"Spring 的注解方式的事务实现机制\"></a>Spring 的注解方式的事务实现机制</h3><p>在应用系统调用声明@Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，在代码运行时生成一个代理对象，根据@Transactional 的属性配置信息，这个代理对象决定该声明@Transactional 的目标方法是否由拦截器 TransactionInterceptor 来使用拦截，在 TransactionInterceptor 拦截时，会在在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器</p>\n<p><img src=\"D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/01Spring%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.jpg\" alt=\"image\"></p>\n<p>Spring AOP 代理有 CglibAopProxy 和 JdkDynamicAopProxy 两种，上图 是以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 DynamicAdvisedInterceptor 的 intercept 方法。对于 JdkDynamicAopProxy，需要调用其 invoke 方法。</p>\n<p>正如上文提到的，事务管理的框架是由抽象事务管理器 AbstractPlatformTransactionManager 来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。不同的事务管理器管理不同的数据资源 DataSource，比如 DataSourceTransactionManager 管理 JDBC 的 Connection。</p>\n<p>PlatformTransactionManager，AbstractPlatformTransactionManager 及具体实现类关系下图所示</p>\n<p><img src=\"D:/WorkSpaces/Hexo/HexoBlog/source/_posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-Transactional%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%8E%92%E9%94%99%E5%8E%86%E7%A8%8B/02TransactionManager%E7%B1%BB%E7%BB%93%E6%9E%84.jpg\" alt=\"image\"></p>\n<h3 id=\"Spring事务7种传播行为\"><a href=\"#Spring事务7种传播行为\" class=\"headerlink\" title=\"Spring事务7种传播行为\"></a>Spring事务7种传播行为</h3><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。</p>\n<ul>\n<li><strong>PROPAGATION.REQUIRED</strong>：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。<strong>Spring默认的传播行为</strong></li>\n<li><strong>PROPAGATION.SUPPORTS</strong>：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</li>\n<li><strong>PROPAGATION.MANDATORY</strong>：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常</li>\n<li><strong>PROPAGATION.REQUIRES_NEW</strong>：创建新事务，无论当前存不存在事务，都创建新事务</li>\n<li><strong>PROPAGATION.NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li>\n<li><strong>PROPAGATION.NEVER</strong>：以非事务方式执行，如果当前存在事务，则抛出异常</li>\n<li><strong>PROPAGATION.NESTED</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作</li>\n</ul>\n<h3 id=\"Spring事务隔离性\"><a href=\"#Spring事务隔离性\" class=\"headerlink\" title=\"Spring事务隔离性\"></a>Spring事务隔离性</h3><p><a href=\"https://www.cnblogs.com/huanongying/p/7021555.html\" target=\"_blank\" rel=\"noopener\">示例地址</a></p>\n<p>隔离级别是指若干个并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读取、重复读、幻读。</p>\n<ul>\n<li>DEFAULT ：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是： READ_COMMITTED 。 MyAQL查询(SELECT @@tx_isolation)</li>\n<li>READ_UNCOMMITTED ：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。 </li>\n<li>READ_COMMITTED ：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。 </li>\n<li>REPEATABLE_READ ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。 </li>\n<li>SERIALIZABLE ：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。 </li>\n</ul>\n<p>指定方法：通过使用 isolation 属性设置，例如：@Transactional(isolation = Isolation.DEFAULT)/</p>\n<p><strong>丢失更新</strong>：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。<br><strong>脏读（Dirty reads）</strong>：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。<br><strong>不可重复读（Non-repeatable reads）</strong>：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。<br><strong>幻读（Phantom reads）</strong>：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。<br>注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。</p>"},{"title":"Django入门","date":"2019-11-24T14:27:10.000Z","_content":"\n\n\n通过Django框架实现简单的个人博客，做为Python语言的入门项目，熟悉python语法及Django框架基础\n\n<!--more-->\n\n\n\n## 环境准备\n\n- 安装Python\n\n```shell\n# 验证是否成功\npython\n# 退出交互模式\nexit()\n```\n\n- Anaconda2 Python环境\n- Django环境\n\n```shell\npip install django==2.0\n# 验证是否成功\ndjango admin\n```\n\n- PyCharm IDE安装\n\n## Django项目初体验\n\n### 初识Django项目\n\n- Django基本命令\n  - startproject - 创建一个Django项目\n  - startapp - 创建一个Django应用\n  - check - 校验项目完整性\n  - runserver - 本地建议运行Django项目\n  - shell - 进入Django项目的Python Shell环境\n  - test - 执行Django用例测试\n  - makemigrations- 创建模型变更的迁移文件\n  - migrate - 执行上一个命令创建的迁移文件\n  - dumpdata - 数据库导出到文件\n  - loaddata - 文件数据导入到数据库\n\n- 创建一个Django项目\n\n  ```shell\n  django-admin startproject django_introduction\n  ```\n\n  进入项目根目录运行以下命令，启动项目\n\n  ```shell\n  python manage.py runserver\n  ```\n\n  ![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164600.png)\n\n- Django项目目录介绍\n\n  - django_introduction\n    - \\_\\_init\\_\\_.py\n    - settings.py - 项目配置文件\n    - urls.py - 项目路由配置文件\n    - wsgi.py\n  - manager.py - 项目管理文件\n\n### 初识Django应用\n\n- Django应用 vs Django项目\n  - 一个Django项目可以包含一组配置和若干个Django应用\n  - 一个Django项目就是一个基于Django的Web应用 - 可直接运行\n  - 一个Django应用就是一个可重用的Python软件包 - 不可直接运行\n- Django应用目录介绍\n  - views.py - 视图处理的地方\n  - models.py - 定义模型的地方\n  - admin.py - 定义Admin模块管理对象的地方\n  - apps.py - 声明应用的地方\n  - tests.py - 编写应用测试用例的地方\n  - urls.py - (自行创建)管理应用路由的地方\n\n- 创建一个应用\n\n  ```shell\n  python manage.py startapp blog\n  ```\n\n  ![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164528.png)\n\n### HelloWorld\n\n- **1.Django视图**\n\n新建视图，在blog目录下的view.py中定义如下函数\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n# Create your views here.\ndef hello_world(request):\n    return HttpResponse(\"Hello World\")\n```\n\n如果想正常返回，还需要配置路由\n\n- **2.Django路由**\n\n配置路由绑定视图函数和url\n\n分为2个层次：应用层次和项目层次\n\n**1) 应用层次**\n\n在blog目录下新建urls.py，添加如下配置, 注意hello_world不带括号\n\n```python\nfrom django.urls import path, include\n\nimport blog.views\n\nurlpatterns = [\n    path('hello_world', blog.views.hello_world)\n]\n```\n\n**2) 项目层次**\n\n项目根目录urls.py添加如下配置, blog/**转发到blog应用\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('blog/', include('blog.urls'))\n]\n```\n\n**3) 在项目设置中添加应用**\n\n 项目settings.py中添加如下配置\n\n```pyhton\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # myapp\n    'blog.apps.BlogConfig',\n]\n```\n\n**4) 运行项目**\n\n```python\npython manage.py runserver\n# 访问\nhttp://localhost:8000/blog/hello_world\n```\n\nHello World流程\n\n```mermaid\ngraph TD\nA[浏览器] -->|项目路由| B(Blog App)\nB -->|     | C(view.py)\nC -->|应用路由| D[hello_world函数]\nD -->|  返回Hello World    | A\n```\n## Django模型层\n\n### 模型层简介\n\n- **什么是模型层**\n\n连接数据库与视图的组件\n\n- **为什么需要？**\n\n屏蔽不同数据库间的差异\n\n开发者更加专注于业务逻辑的开发\n\n- **模型层相关配置**\n\n项目中数据库配置，settings.py\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n\n### 创建博客文章模型\n\n- 模型层定义字段\n  - 数字类型 - InterField\n  - 文本类型 - TextField\n  - 日期类型 - DateTimeField\n  - 自增ID - AutoField\n  - 主键定义 - primary_key属性\n\n- **定义模型**\n\n在blog目录下models.py中，新建Article模型\n\n```python\nfrom django.db import models\n\nclass Article(models.Model):\n    # 文章ID\n    article_id = models.AutoField(primary_key=True)\n    # 文章标题\n    title = models.TextField()\n    # 文章摘要\n    brief_content = models.TextField()\n    # 内容\n    content = models.TextField()\n    # 发布日期\n    publish_date = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n```\n\n- 模型迁移，将创建模型同步到数据库\n\n```shell\n# 运行一下命令后, 在blogmigrations目录下产生initial.py迁移文件\npython manage.py makemigrations\n# 运行迁移文件，同步到数据库\npython manage.py migrate\n```\n\n### 初识Django Shell\n\n- **是什么？**\n\nPython Shell用于交互式的Python编程。Django Shell也类似，继承Django项目环境\n\n- **为什么使用**\n\n方便开发、方便调试、方便Debug\n\n- **Django Shell使用**\n\n```shell\n# 进入交互式环境\npython manage.py shell\n\n>>> from blog.models import Article\n>>> a = Article()\n>>> a.title = 'Test Django Shell'\n>>> a.brief_content = 'Test Django Shell, By Hyman'\n>>> a.content = 'Test Django Shell, New Article, Main content'\n>>> print(a)\nArticle object (None)\n# 保存a\n>>> a.save()\n# 获取所有Article\n>>> articles = Article.objects.all()\n>>> article = articles[0]\n>>> print(article.title)\nTest Django Shell\n>>> print(article.content)\nTest Django Shell, New Article, Main content\n```\n\n### 初识Django Admin模块\n\n- **是什么**\n\nDjango的后台管理工具，可以读取定义的模型元数据，提供强大的管理使用页面\n\n- **为什么使用**\n\n可以使用后台管理模型，简化操作。借助框架完成认证用户、模型管理、校验输入等功能\n\n- **怎么使用**\n\n1) 创建管理员用户\n\n2) 登录页面进行管理\n\n```shell\npython manage.py createsuperuser\npython manage.py runserver\n# 访问\nhttp://localhost:8000/admin\n```\n\n在后台查看Article模型，还需要将Article注册到admin\n\n在blog目录下的admin.py中加入如下配置，刷新页面即可显示Article模型信息\n\n```python\nfrom django.contrib import admin\nfrom .models import Article\n\nadmin.site.register(Article)\n```\n\n### 博客数据返回页面\n\nblog目录下views.py新增方法\n\n```python\ndef article_content(request):\n    article = Article.objects.all()[0]\n    title = article.title\n    brief_content = article.brief_content\n    content = article.content\n    article_id = article.article_id\n    publish_date = article.publish_date\n    return_str =  'title: %s, brief_content: %s, content: %s, article_id: %s, publish_date: %s' % (title, brief_content, content, article_id, publish_date)\n    return HttpResponse(return_str)\n```\n\nblog目录下urls.py新增路由\n\n```python\nurlpatterns = [\n    path('hello_world', blog.views.hello_world),\n    path('content', blog.views.article_content)\n]\n```\n\n## Django视图与模版\n\n### 实现静态博客页面\n\n- **页面布局**\n\n**1)首页**\n\n**2)详情页**\n\n- **Bootstrap及其栅格系统**\n\n来自美国Twitter的前端框架\n\n### Django的模板系统\n\n- **模板系统简介**\n\n视图文件不适合编码HTML，页面设计需要修改Python代码\n\n模板系统定义了特有的标签占位符\n\n- **模板系统语法**\n\n  1)变量标签 \n\n  ```python\n{{ 变量 }}\n  ```\n  \n  2)for循环\n  \n  ```python\n  {% for x in list %}, {% endfor %}\n  ```\n  \n  3)if...else \n  \n  ```python\n  {% if %}, {% else %}, {% endif %}\n  ```\n\n### 使用模板系统\n\n- 获取路径参数\n\n```python\n# urls.py\nurlpatterns = [\n    path('hello_world', blog.views.hello_world),\n    path('content', blog.views.article_content),\n    path('index', blog.views.get_index_page),\n    # path('detail', blog.views.get_detail_page),\n    path('detail/<int:article_id>', blog.views.get_detail_page),\n]\n\n# views.py\ndef get_detail_page(request, article_id):\n    all_articles = Article.objects.all()\n    curr_article = None\n    for article in all_articles:\n        if(article.article_id == article_id):\n            curr_article = article\n            break\n    if(curr_article == None):\n        return HttpResponse('未找到，换个ID试试。。。')\n    section_list = curr_article.content.split('\\n')\n    return render(request, 'blog/detail.html',\n                  {\n                      'curr_article': curr_article,\n                      'section_list': section_list,\n                  })\n```\n\n- \n\n\n\n```python\ndef get_index_page(request):\n    page = request.GET.get('page')\n    if page:\n        page = int(page)\n    else:\n        page = 1\n    print('page param: ', page)\n    all_article = Article.objects.all()\n    # 每页3\n    paginator = Paginator(all_article, 3)\n    page_num = paginator.num_pages\n    print('page num: ', page_num)\n    page_article_list = paginator.page(page)\n    if page_article_list.has_next():\n        next_page = page + 1\n    else:\n        next_page = page\n    if page_article_list.has_previous():\n        previous_page = page - 1\n    else:\n        previous_page = page\n    return render(request, 'blog/index.html',\n                  {\n                      'article_list': page_article_list,\n                      'page_num': range(1, page_num + 1),\n                      'curr_page': page,\n                      'next_page': next_page,\n                      'previous_page': previous_page,\n                  }\n                  )\n```\n\n### 排序\n\nviews.py\n\n```python\ntop5_article_list = Article.objects.order_by('-publish_date')[:5]\n```\n\n\n\n[源码](<https://github.com/hyman213/django_introduction>)","source":"_posts/20191124-Django入门.md","raw":"---\ntitle: Django入门\ndate: 2019-11-24 22:27:10\ntags: Django\ncategories: \n - 技术\n - Python\n---\n\n\n\n通过Django框架实现简单的个人博客，做为Python语言的入门项目，熟悉python语法及Django框架基础\n\n<!--more-->\n\n\n\n## 环境准备\n\n- 安装Python\n\n```shell\n# 验证是否成功\npython\n# 退出交互模式\nexit()\n```\n\n- Anaconda2 Python环境\n- Django环境\n\n```shell\npip install django==2.0\n# 验证是否成功\ndjango admin\n```\n\n- PyCharm IDE安装\n\n## Django项目初体验\n\n### 初识Django项目\n\n- Django基本命令\n  - startproject - 创建一个Django项目\n  - startapp - 创建一个Django应用\n  - check - 校验项目完整性\n  - runserver - 本地建议运行Django项目\n  - shell - 进入Django项目的Python Shell环境\n  - test - 执行Django用例测试\n  - makemigrations- 创建模型变更的迁移文件\n  - migrate - 执行上一个命令创建的迁移文件\n  - dumpdata - 数据库导出到文件\n  - loaddata - 文件数据导入到数据库\n\n- 创建一个Django项目\n\n  ```shell\n  django-admin startproject django_introduction\n  ```\n\n  进入项目根目录运行以下命令，启动项目\n\n  ```shell\n  python manage.py runserver\n  ```\n\n  ![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164600.png)\n\n- Django项目目录介绍\n\n  - django_introduction\n    - \\_\\_init\\_\\_.py\n    - settings.py - 项目配置文件\n    - urls.py - 项目路由配置文件\n    - wsgi.py\n  - manager.py - 项目管理文件\n\n### 初识Django应用\n\n- Django应用 vs Django项目\n  - 一个Django项目可以包含一组配置和若干个Django应用\n  - 一个Django项目就是一个基于Django的Web应用 - 可直接运行\n  - 一个Django应用就是一个可重用的Python软件包 - 不可直接运行\n- Django应用目录介绍\n  - views.py - 视图处理的地方\n  - models.py - 定义模型的地方\n  - admin.py - 定义Admin模块管理对象的地方\n  - apps.py - 声明应用的地方\n  - tests.py - 编写应用测试用例的地方\n  - urls.py - (自行创建)管理应用路由的地方\n\n- 创建一个应用\n\n  ```shell\n  python manage.py startapp blog\n  ```\n\n  ![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164528.png)\n\n### HelloWorld\n\n- **1.Django视图**\n\n新建视图，在blog目录下的view.py中定义如下函数\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n# Create your views here.\ndef hello_world(request):\n    return HttpResponse(\"Hello World\")\n```\n\n如果想正常返回，还需要配置路由\n\n- **2.Django路由**\n\n配置路由绑定视图函数和url\n\n分为2个层次：应用层次和项目层次\n\n**1) 应用层次**\n\n在blog目录下新建urls.py，添加如下配置, 注意hello_world不带括号\n\n```python\nfrom django.urls import path, include\n\nimport blog.views\n\nurlpatterns = [\n    path('hello_world', blog.views.hello_world)\n]\n```\n\n**2) 项目层次**\n\n项目根目录urls.py添加如下配置, blog/**转发到blog应用\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('blog/', include('blog.urls'))\n]\n```\n\n**3) 在项目设置中添加应用**\n\n 项目settings.py中添加如下配置\n\n```pyhton\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # myapp\n    'blog.apps.BlogConfig',\n]\n```\n\n**4) 运行项目**\n\n```python\npython manage.py runserver\n# 访问\nhttp://localhost:8000/blog/hello_world\n```\n\nHello World流程\n\n```mermaid\ngraph TD\nA[浏览器] -->|项目路由| B(Blog App)\nB -->|     | C(view.py)\nC -->|应用路由| D[hello_world函数]\nD -->|  返回Hello World    | A\n```\n## Django模型层\n\n### 模型层简介\n\n- **什么是模型层**\n\n连接数据库与视图的组件\n\n- **为什么需要？**\n\n屏蔽不同数据库间的差异\n\n开发者更加专注于业务逻辑的开发\n\n- **模型层相关配置**\n\n项目中数据库配置，settings.py\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n\n### 创建博客文章模型\n\n- 模型层定义字段\n  - 数字类型 - InterField\n  - 文本类型 - TextField\n  - 日期类型 - DateTimeField\n  - 自增ID - AutoField\n  - 主键定义 - primary_key属性\n\n- **定义模型**\n\n在blog目录下models.py中，新建Article模型\n\n```python\nfrom django.db import models\n\nclass Article(models.Model):\n    # 文章ID\n    article_id = models.AutoField(primary_key=True)\n    # 文章标题\n    title = models.TextField()\n    # 文章摘要\n    brief_content = models.TextField()\n    # 内容\n    content = models.TextField()\n    # 发布日期\n    publish_date = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n```\n\n- 模型迁移，将创建模型同步到数据库\n\n```shell\n# 运行一下命令后, 在blogmigrations目录下产生initial.py迁移文件\npython manage.py makemigrations\n# 运行迁移文件，同步到数据库\npython manage.py migrate\n```\n\n### 初识Django Shell\n\n- **是什么？**\n\nPython Shell用于交互式的Python编程。Django Shell也类似，继承Django项目环境\n\n- **为什么使用**\n\n方便开发、方便调试、方便Debug\n\n- **Django Shell使用**\n\n```shell\n# 进入交互式环境\npython manage.py shell\n\n>>> from blog.models import Article\n>>> a = Article()\n>>> a.title = 'Test Django Shell'\n>>> a.brief_content = 'Test Django Shell, By Hyman'\n>>> a.content = 'Test Django Shell, New Article, Main content'\n>>> print(a)\nArticle object (None)\n# 保存a\n>>> a.save()\n# 获取所有Article\n>>> articles = Article.objects.all()\n>>> article = articles[0]\n>>> print(article.title)\nTest Django Shell\n>>> print(article.content)\nTest Django Shell, New Article, Main content\n```\n\n### 初识Django Admin模块\n\n- **是什么**\n\nDjango的后台管理工具，可以读取定义的模型元数据，提供强大的管理使用页面\n\n- **为什么使用**\n\n可以使用后台管理模型，简化操作。借助框架完成认证用户、模型管理、校验输入等功能\n\n- **怎么使用**\n\n1) 创建管理员用户\n\n2) 登录页面进行管理\n\n```shell\npython manage.py createsuperuser\npython manage.py runserver\n# 访问\nhttp://localhost:8000/admin\n```\n\n在后台查看Article模型，还需要将Article注册到admin\n\n在blog目录下的admin.py中加入如下配置，刷新页面即可显示Article模型信息\n\n```python\nfrom django.contrib import admin\nfrom .models import Article\n\nadmin.site.register(Article)\n```\n\n### 博客数据返回页面\n\nblog目录下views.py新增方法\n\n```python\ndef article_content(request):\n    article = Article.objects.all()[0]\n    title = article.title\n    brief_content = article.brief_content\n    content = article.content\n    article_id = article.article_id\n    publish_date = article.publish_date\n    return_str =  'title: %s, brief_content: %s, content: %s, article_id: %s, publish_date: %s' % (title, brief_content, content, article_id, publish_date)\n    return HttpResponse(return_str)\n```\n\nblog目录下urls.py新增路由\n\n```python\nurlpatterns = [\n    path('hello_world', blog.views.hello_world),\n    path('content', blog.views.article_content)\n]\n```\n\n## Django视图与模版\n\n### 实现静态博客页面\n\n- **页面布局**\n\n**1)首页**\n\n**2)详情页**\n\n- **Bootstrap及其栅格系统**\n\n来自美国Twitter的前端框架\n\n### Django的模板系统\n\n- **模板系统简介**\n\n视图文件不适合编码HTML，页面设计需要修改Python代码\n\n模板系统定义了特有的标签占位符\n\n- **模板系统语法**\n\n  1)变量标签 \n\n  ```python\n{{ 变量 }}\n  ```\n  \n  2)for循环\n  \n  ```python\n  {% for x in list %}, {% endfor %}\n  ```\n  \n  3)if...else \n  \n  ```python\n  {% if %}, {% else %}, {% endif %}\n  ```\n\n### 使用模板系统\n\n- 获取路径参数\n\n```python\n# urls.py\nurlpatterns = [\n    path('hello_world', blog.views.hello_world),\n    path('content', blog.views.article_content),\n    path('index', blog.views.get_index_page),\n    # path('detail', blog.views.get_detail_page),\n    path('detail/<int:article_id>', blog.views.get_detail_page),\n]\n\n# views.py\ndef get_detail_page(request, article_id):\n    all_articles = Article.objects.all()\n    curr_article = None\n    for article in all_articles:\n        if(article.article_id == article_id):\n            curr_article = article\n            break\n    if(curr_article == None):\n        return HttpResponse('未找到，换个ID试试。。。')\n    section_list = curr_article.content.split('\\n')\n    return render(request, 'blog/detail.html',\n                  {\n                      'curr_article': curr_article,\n                      'section_list': section_list,\n                  })\n```\n\n- \n\n\n\n```python\ndef get_index_page(request):\n    page = request.GET.get('page')\n    if page:\n        page = int(page)\n    else:\n        page = 1\n    print('page param: ', page)\n    all_article = Article.objects.all()\n    # 每页3\n    paginator = Paginator(all_article, 3)\n    page_num = paginator.num_pages\n    print('page num: ', page_num)\n    page_article_list = paginator.page(page)\n    if page_article_list.has_next():\n        next_page = page + 1\n    else:\n        next_page = page\n    if page_article_list.has_previous():\n        previous_page = page - 1\n    else:\n        previous_page = page\n    return render(request, 'blog/index.html',\n                  {\n                      'article_list': page_article_list,\n                      'page_num': range(1, page_num + 1),\n                      'curr_page': page,\n                      'next_page': next_page,\n                      'previous_page': previous_page,\n                  }\n                  )\n```\n\n### 排序\n\nviews.py\n\n```python\ntop5_article_list = Article.objects.order_by('-publish_date')[:5]\n```\n\n\n\n[源码](<https://github.com/hyman213/django_introduction>)","slug":"Django入门","published":1,"updated":"2019-11-25T02:28:12.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxcl5000id4kp4tmkp1ae","content":"<p>通过Django框架实现简单的个人博客，做为Python语言的入门项目，熟悉python语法及Django框架基础</p>\n<a id=\"more\"></a>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>安装Python</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证是否成功</span></span><br><span class=\"line\">python</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 退出交互模式</span></span><br><span class=\"line\">exit()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Anaconda2 Python环境</li>\n<li>Django环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django==2.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证是否成功</span></span><br><span class=\"line\">django admin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>PyCharm IDE安装</li>\n</ul>\n<h2 id=\"Django项目初体验\"><a href=\"#Django项目初体验\" class=\"headerlink\" title=\"Django项目初体验\"></a>Django项目初体验</h2><h3 id=\"初识Django项目\"><a href=\"#初识Django项目\" class=\"headerlink\" title=\"初识Django项目\"></a>初识Django项目</h3><ul>\n<li><p>Django基本命令</p>\n<ul>\n<li>startproject - 创建一个Django项目</li>\n<li>startapp - 创建一个Django应用</li>\n<li>check - 校验项目完整性</li>\n<li>runserver - 本地建议运行Django项目</li>\n<li>shell - 进入Django项目的Python Shell环境</li>\n<li>test - 执行Django用例测试</li>\n<li>makemigrations- 创建模型变更的迁移文件</li>\n<li>migrate - 执行上一个命令创建的迁移文件</li>\n<li>dumpdata - 数据库导出到文件</li>\n<li>loaddata - 文件数据导入到数据库</li>\n</ul>\n</li>\n<li><p>创建一个Django项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject django_introduction</span><br></pre></td></tr></table></figure>\n<p>进入项目根目录运行以下命令，启动项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164600.png\" alt></p>\n</li>\n<li><p>Django项目目录介绍</p>\n<ul>\n<li>django_introduction<ul>\n<li>__init__.py</li>\n<li>settings.py - 项目配置文件</li>\n<li>urls.py - 项目路由配置文件</li>\n<li>wsgi.py</li>\n</ul>\n</li>\n<li>manager.py - 项目管理文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初识Django应用\"><a href=\"#初识Django应用\" class=\"headerlink\" title=\"初识Django应用\"></a>初识Django应用</h3><ul>\n<li>Django应用 vs Django项目<ul>\n<li>一个Django项目可以包含一组配置和若干个Django应用</li>\n<li>一个Django项目就是一个基于Django的Web应用 - 可直接运行</li>\n<li>一个Django应用就是一个可重用的Python软件包 - 不可直接运行</li>\n</ul>\n</li>\n<li><p>Django应用目录介绍</p>\n<ul>\n<li>views.py - 视图处理的地方</li>\n<li>models.py - 定义模型的地方</li>\n<li>admin.py - 定义Admin模块管理对象的地方</li>\n<li>apps.py - 声明应用的地方</li>\n<li>tests.py - 编写应用测试用例的地方</li>\n<li>urls.py - (自行创建)管理应用路由的地方</li>\n</ul>\n</li>\n<li><p>创建一个应用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp blog</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164528.png\" alt></p>\n</li>\n</ul>\n<h3 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h3><ul>\n<li><strong>1.Django视图</strong></li>\n</ul>\n<p>新建视图，在blog目录下的view.py中定义如下函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello World\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果想正常返回，还需要配置路由</p>\n<ul>\n<li><strong>2.Django路由</strong></li>\n</ul>\n<p>配置路由绑定视图函数和url</p>\n<p>分为2个层次：应用层次和项目层次</p>\n<p><strong>1) 应用层次</strong></p>\n<p>在blog目录下新建urls.py，添加如下配置, 注意hello_world不带括号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> blog.views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'hello_world'</span>, blog.views.hello_world)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>2) 项目层次</strong></p>\n<p>项目根目录urls.py添加如下配置, blog/**转发到blog应用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">'blog/'</span>, include(<span class=\"string\">'blog.urls'</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>3) 在项目设置中添加应用</strong></p>\n<p> 项目settings.py中添加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # myapp</span><br><span class=\"line\">    &apos;blog.apps.BlogConfig&apos;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>4) 运行项目</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br><span class=\"line\"><span class=\"comment\"># 访问</span></span><br><span class=\"line\">http://localhost:<span class=\"number\">8000</span>/blog/hello_world</span><br></pre></td></tr></table></figure>\n<p>Hello World流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">A[浏览器] --&gt;|项目路由| B(Blog App)</span><br><span class=\"line\">B --&gt;|     | C(view.py)</span><br><span class=\"line\">C --&gt;|应用路由| D[hello_world函数]</span><br><span class=\"line\">D --&gt;|  返回Hello World    | A</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django模型层\"><a href=\"#Django模型层\" class=\"headerlink\" title=\"Django模型层\"></a>Django模型层</h2><h3 id=\"模型层简介\"><a href=\"#模型层简介\" class=\"headerlink\" title=\"模型层简介\"></a>模型层简介</h3><ul>\n<li><strong>什么是模型层</strong></li>\n</ul>\n<p>连接数据库与视图的组件</p>\n<ul>\n<li><strong>为什么需要？</strong></li>\n</ul>\n<p>屏蔽不同数据库间的差异</p>\n<p>开发者更加专注于业务逻辑的开发</p>\n<ul>\n<li><strong>模型层相关配置</strong></li>\n</ul>\n<p>项目中数据库配置，settings.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: os.path.join(BASE_DIR, <span class=\"string\">'db.sqlite3'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建博客文章模型\"><a href=\"#创建博客文章模型\" class=\"headerlink\" title=\"创建博客文章模型\"></a>创建博客文章模型</h3><ul>\n<li><p>模型层定义字段</p>\n<ul>\n<li>数字类型 - InterField</li>\n<li>文本类型 - TextField</li>\n<li>日期类型 - DateTimeField</li>\n<li>自增ID - AutoField</li>\n<li>主键定义 - primary_key属性</li>\n</ul>\n</li>\n<li><p><strong>定义模型</strong></p>\n</li>\n</ul>\n<p>在blog目录下models.py中，新建Article模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 文章ID</span></span><br><span class=\"line\">    article_id = models.AutoField(primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 文章标题</span></span><br><span class=\"line\">    title = models.TextField()</span><br><span class=\"line\">    <span class=\"comment\"># 文章摘要</span></span><br><span class=\"line\">    brief_content = models.TextField()</span><br><span class=\"line\">    <span class=\"comment\"># 内容</span></span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    <span class=\"comment\"># 发布日期</span></span><br><span class=\"line\">    publish_date = models.DateTimeField(auto_now=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.title</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模型迁移，将创建模型同步到数据库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行一下命令后, 在blogmigrations目录下产生initial.py迁移文件</span></span><br><span class=\"line\">python manage.py makemigrations</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行迁移文件，同步到数据库</span></span><br><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<h3 id=\"初识Django-Shell\"><a href=\"#初识Django-Shell\" class=\"headerlink\" title=\"初识Django Shell\"></a>初识Django Shell</h3><ul>\n<li><strong>是什么？</strong></li>\n</ul>\n<p>Python Shell用于交互式的Python编程。Django Shell也类似，继承Django项目环境</p>\n<ul>\n<li><strong>为什么使用</strong></li>\n</ul>\n<p>方便开发、方便调试、方便Debug</p>\n<ul>\n<li><strong>Django Shell使用</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入交互式环境</span></span><br><span class=\"line\">python manage.py shell</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; from blog.models import Article</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a = Article()</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.title = <span class=\"string\">'Test Django Shell'</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.brief_content = <span class=\"string\">'Test Django Shell, By Hyman'</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.content = <span class=\"string\">'Test Django Shell, New Article, Main content'</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(a)</span></span><br><span class=\"line\">Article object (None)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 保存a</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.save()</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取所有Article</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; articles = Article.objects.all()</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; article = articles[0]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(article.title)</span></span><br><span class=\"line\">Test Django Shell</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(article.content)</span></span><br><span class=\"line\">Test Django Shell, New Article, Main content</span><br></pre></td></tr></table></figure>\n<h3 id=\"初识Django-Admin模块\"><a href=\"#初识Django-Admin模块\" class=\"headerlink\" title=\"初识Django Admin模块\"></a>初识Django Admin模块</h3><ul>\n<li><strong>是什么</strong></li>\n</ul>\n<p>Django的后台管理工具，可以读取定义的模型元数据，提供强大的管理使用页面</p>\n<ul>\n<li><strong>为什么使用</strong></li>\n</ul>\n<p>可以使用后台管理模型，简化操作。借助框架完成认证用户、模型管理、校验输入等功能</p>\n<ul>\n<li><strong>怎么使用</strong></li>\n</ul>\n<p>1) 创建管理员用户</p>\n<p>2) 登录页面进行管理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br><span class=\"line\">python manage.py runserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 访问</span></span><br><span class=\"line\">http://localhost:8000/admin</span><br></pre></td></tr></table></figure>\n<p>在后台查看Article模型，还需要将Article注册到admin</p>\n<p>在blog目录下的admin.py中加入如下配置，刷新页面即可显示Article模型信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Article</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Article)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博客数据返回页面\"><a href=\"#博客数据返回页面\" class=\"headerlink\" title=\"博客数据返回页面\"></a>博客数据返回页面</h3><p>blog目录下views.py新增方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">article_content</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    article = Article.objects.all()[<span class=\"number\">0</span>]</span><br><span class=\"line\">    title = article.title</span><br><span class=\"line\">    brief_content = article.brief_content</span><br><span class=\"line\">    content = article.content</span><br><span class=\"line\">    article_id = article.article_id</span><br><span class=\"line\">    publish_date = article.publish_date</span><br><span class=\"line\">    return_str =  <span class=\"string\">'title: %s, brief_content: %s, content: %s, article_id: %s, publish_date: %s'</span> % (title, brief_content, content, article_id, publish_date)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(return_str)</span><br></pre></td></tr></table></figure>\n<p>blog目录下urls.py新增路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'hello_world'</span>, blog.views.hello_world),</span><br><span class=\"line\">    path(<span class=\"string\">'content'</span>, blog.views.article_content)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django视图与模版\"><a href=\"#Django视图与模版\" class=\"headerlink\" title=\"Django视图与模版\"></a>Django视图与模版</h2><h3 id=\"实现静态博客页面\"><a href=\"#实现静态博客页面\" class=\"headerlink\" title=\"实现静态博客页面\"></a>实现静态博客页面</h3><ul>\n<li><strong>页面布局</strong></li>\n</ul>\n<p><strong>1)首页</strong></p>\n<p><strong>2)详情页</strong></p>\n<ul>\n<li><strong>Bootstrap及其栅格系统</strong></li>\n</ul>\n<p>来自美国Twitter的前端框架</p>\n<h3 id=\"Django的模板系统\"><a href=\"#Django的模板系统\" class=\"headerlink\" title=\"Django的模板系统\"></a>Django的模板系统</h3><ul>\n<li><strong>模板系统简介</strong></li>\n</ul>\n<p>视图文件不适合编码HTML，页面设计需要修改Python代码</p>\n<p>模板系统定义了特有的标签占位符</p>\n<ul>\n<li><p><strong>模板系统语法</strong></p>\n<p>1)变量标签 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; 变量 &#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  2)for循环</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&#125;, &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>  3)if…else </p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> %&#125;, &#123;% <span class=\"keyword\">else</span> %&#125;, &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用模板系统\"><a href=\"#使用模板系统\" class=\"headerlink\" title=\"使用模板系统\"></a>使用模板系统</h3><ul>\n<li>获取路径参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># urls.py</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'hello_world'</span>, blog.views.hello_world),</span><br><span class=\"line\">    path(<span class=\"string\">'content'</span>, blog.views.article_content),</span><br><span class=\"line\">    path(<span class=\"string\">'index'</span>, blog.views.get_index_page),</span><br><span class=\"line\">    <span class=\"comment\"># path('detail', blog.views.get_detail_page),</span></span><br><span class=\"line\">    path(<span class=\"string\">'detail/&lt;int:article_id&gt;'</span>, blog.views.get_detail_page),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># views.py</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_detail_page</span><span class=\"params\">(request, article_id)</span>:</span></span><br><span class=\"line\">    all_articles = Article.objects.all()</span><br><span class=\"line\">    curr_article = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> article <span class=\"keyword\">in</span> all_articles:</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(article.article_id == article_id):</span><br><span class=\"line\">            curr_article = article</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(curr_article == <span class=\"literal\">None</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'未找到，换个ID试试。。。'</span>)</span><br><span class=\"line\">    section_list = curr_article.content.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'blog/detail.html'</span>,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"string\">'curr_article'</span>: curr_article,</span><br><span class=\"line\">                      <span class=\"string\">'section_list'</span>: section_list,</span><br><span class=\"line\">                  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_index_page</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    page = request.GET.get(<span class=\"string\">'page'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page:</span><br><span class=\"line\">        page = int(page)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        page = <span class=\"number\">1</span></span><br><span class=\"line\">    print(<span class=\"string\">'page param: '</span>, page)</span><br><span class=\"line\">    all_article = Article.objects.all()</span><br><span class=\"line\">    <span class=\"comment\"># 每页3</span></span><br><span class=\"line\">    paginator = Paginator(all_article, <span class=\"number\">3</span>)</span><br><span class=\"line\">    page_num = paginator.num_pages</span><br><span class=\"line\">    print(<span class=\"string\">'page num: '</span>, page_num)</span><br><span class=\"line\">    page_article_list = paginator.page(page)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_article_list.has_next():</span><br><span class=\"line\">        next_page = page + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        next_page = page</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_article_list.has_previous():</span><br><span class=\"line\">        previous_page = page - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        previous_page = page</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'blog/index.html'</span>,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"string\">'article_list'</span>: page_article_list,</span><br><span class=\"line\">                      <span class=\"string\">'page_num'</span>: range(<span class=\"number\">1</span>, page_num + <span class=\"number\">1</span>),</span><br><span class=\"line\">                      <span class=\"string\">'curr_page'</span>: page,</span><br><span class=\"line\">                      <span class=\"string\">'next_page'</span>: next_page,</span><br><span class=\"line\">                      <span class=\"string\">'previous_page'</span>: previous_page,</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  )</span><br></pre></td></tr></table></figure>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>views.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top5_article_list = Article.objects.order_by(<span class=\"string\">'-publish_date'</span>)[:<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hyman213/django_introduction\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n","site":{"data":{}},"length":6060,"excerpt":"<p>通过Django框架实现简单的个人博客，做为Python语言的入门项目，熟悉python语法及Django框架基础</p>","more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>安装Python</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证是否成功</span></span><br><span class=\"line\">python</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 退出交互模式</span></span><br><span class=\"line\">exit()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Anaconda2 Python环境</li>\n<li>Django环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django==2.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证是否成功</span></span><br><span class=\"line\">django admin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>PyCharm IDE安装</li>\n</ul>\n<h2 id=\"Django项目初体验\"><a href=\"#Django项目初体验\" class=\"headerlink\" title=\"Django项目初体验\"></a>Django项目初体验</h2><h3 id=\"初识Django项目\"><a href=\"#初识Django项目\" class=\"headerlink\" title=\"初识Django项目\"></a>初识Django项目</h3><ul>\n<li><p>Django基本命令</p>\n<ul>\n<li>startproject - 创建一个Django项目</li>\n<li>startapp - 创建一个Django应用</li>\n<li>check - 校验项目完整性</li>\n<li>runserver - 本地建议运行Django项目</li>\n<li>shell - 进入Django项目的Python Shell环境</li>\n<li>test - 执行Django用例测试</li>\n<li>makemigrations- 创建模型变更的迁移文件</li>\n<li>migrate - 执行上一个命令创建的迁移文件</li>\n<li>dumpdata - 数据库导出到文件</li>\n<li>loaddata - 文件数据导入到数据库</li>\n</ul>\n</li>\n<li><p>创建一个Django项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject django_introduction</span><br></pre></td></tr></table></figure>\n<p>进入项目根目录运行以下命令，启动项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164600.png\" alt></p>\n</li>\n<li><p>Django项目目录介绍</p>\n<ul>\n<li>django_introduction<ul>\n<li>__init__.py</li>\n<li>settings.py - 项目配置文件</li>\n<li>urls.py - 项目路由配置文件</li>\n<li>wsgi.py</li>\n</ul>\n</li>\n<li>manager.py - 项目管理文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初识Django应用\"><a href=\"#初识Django应用\" class=\"headerlink\" title=\"初识Django应用\"></a>初识Django应用</h3><ul>\n<li>Django应用 vs Django项目<ul>\n<li>一个Django项目可以包含一组配置和若干个Django应用</li>\n<li>一个Django项目就是一个基于Django的Web应用 - 可直接运行</li>\n<li>一个Django应用就是一个可重用的Python软件包 - 不可直接运行</li>\n</ul>\n</li>\n<li><p>Django应用目录介绍</p>\n<ul>\n<li>views.py - 视图处理的地方</li>\n<li>models.py - 定义模型的地方</li>\n<li>admin.py - 定义Admin模块管理对象的地方</li>\n<li>apps.py - 声明应用的地方</li>\n<li>tests.py - 编写应用测试用例的地方</li>\n<li>urls.py - (自行创建)管理应用路由的地方</li>\n</ul>\n</li>\n<li><p>创建一个应用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp blog</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/11/20191123164528.png\" alt></p>\n</li>\n</ul>\n<h3 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h3><ul>\n<li><strong>1.Django视图</strong></li>\n</ul>\n<p>新建视图，在blog目录下的view.py中定义如下函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello World\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果想正常返回，还需要配置路由</p>\n<ul>\n<li><strong>2.Django路由</strong></li>\n</ul>\n<p>配置路由绑定视图函数和url</p>\n<p>分为2个层次：应用层次和项目层次</p>\n<p><strong>1) 应用层次</strong></p>\n<p>在blog目录下新建urls.py，添加如下配置, 注意hello_world不带括号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> blog.views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'hello_world'</span>, blog.views.hello_world)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>2) 项目层次</strong></p>\n<p>项目根目录urls.py添加如下配置, blog/**转发到blog应用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    path(<span class=\"string\">'blog/'</span>, include(<span class=\"string\">'blog.urls'</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>3) 在项目设置中添加应用</strong></p>\n<p> 项目settings.py中添加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # myapp</span><br><span class=\"line\">    &apos;blog.apps.BlogConfig&apos;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>4) 运行项目</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br><span class=\"line\"><span class=\"comment\"># 访问</span></span><br><span class=\"line\">http://localhost:<span class=\"number\">8000</span>/blog/hello_world</span><br></pre></td></tr></table></figure>\n<p>Hello World流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">A[浏览器] --&gt;|项目路由| B(Blog App)</span><br><span class=\"line\">B --&gt;|     | C(view.py)</span><br><span class=\"line\">C --&gt;|应用路由| D[hello_world函数]</span><br><span class=\"line\">D --&gt;|  返回Hello World    | A</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django模型层\"><a href=\"#Django模型层\" class=\"headerlink\" title=\"Django模型层\"></a>Django模型层</h2><h3 id=\"模型层简介\"><a href=\"#模型层简介\" class=\"headerlink\" title=\"模型层简介\"></a>模型层简介</h3><ul>\n<li><strong>什么是模型层</strong></li>\n</ul>\n<p>连接数据库与视图的组件</p>\n<ul>\n<li><strong>为什么需要？</strong></li>\n</ul>\n<p>屏蔽不同数据库间的差异</p>\n<p>开发者更加专注于业务逻辑的开发</p>\n<ul>\n<li><strong>模型层相关配置</strong></li>\n</ul>\n<p>项目中数据库配置，settings.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: os.path.join(BASE_DIR, <span class=\"string\">'db.sqlite3'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建博客文章模型\"><a href=\"#创建博客文章模型\" class=\"headerlink\" title=\"创建博客文章模型\"></a>创建博客文章模型</h3><ul>\n<li><p>模型层定义字段</p>\n<ul>\n<li>数字类型 - InterField</li>\n<li>文本类型 - TextField</li>\n<li>日期类型 - DateTimeField</li>\n<li>自增ID - AutoField</li>\n<li>主键定义 - primary_key属性</li>\n</ul>\n</li>\n<li><p><strong>定义模型</strong></p>\n</li>\n</ul>\n<p>在blog目录下models.py中，新建Article模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 文章ID</span></span><br><span class=\"line\">    article_id = models.AutoField(primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 文章标题</span></span><br><span class=\"line\">    title = models.TextField()</span><br><span class=\"line\">    <span class=\"comment\"># 文章摘要</span></span><br><span class=\"line\">    brief_content = models.TextField()</span><br><span class=\"line\">    <span class=\"comment\"># 内容</span></span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    <span class=\"comment\"># 发布日期</span></span><br><span class=\"line\">    publish_date = models.DateTimeField(auto_now=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.title</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模型迁移，将创建模型同步到数据库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行一下命令后, 在blogmigrations目录下产生initial.py迁移文件</span></span><br><span class=\"line\">python manage.py makemigrations</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行迁移文件，同步到数据库</span></span><br><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<h3 id=\"初识Django-Shell\"><a href=\"#初识Django-Shell\" class=\"headerlink\" title=\"初识Django Shell\"></a>初识Django Shell</h3><ul>\n<li><strong>是什么？</strong></li>\n</ul>\n<p>Python Shell用于交互式的Python编程。Django Shell也类似，继承Django项目环境</p>\n<ul>\n<li><strong>为什么使用</strong></li>\n</ul>\n<p>方便开发、方便调试、方便Debug</p>\n<ul>\n<li><strong>Django Shell使用</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入交互式环境</span></span><br><span class=\"line\">python manage.py shell</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; from blog.models import Article</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a = Article()</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.title = <span class=\"string\">'Test Django Shell'</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.brief_content = <span class=\"string\">'Test Django Shell, By Hyman'</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.content = <span class=\"string\">'Test Django Shell, New Article, Main content'</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(a)</span></span><br><span class=\"line\">Article object (None)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 保存a</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; a.save()</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取所有Article</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; articles = Article.objects.all()</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; article = articles[0]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(article.title)</span></span><br><span class=\"line\">Test Django Shell</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(article.content)</span></span><br><span class=\"line\">Test Django Shell, New Article, Main content</span><br></pre></td></tr></table></figure>\n<h3 id=\"初识Django-Admin模块\"><a href=\"#初识Django-Admin模块\" class=\"headerlink\" title=\"初识Django Admin模块\"></a>初识Django Admin模块</h3><ul>\n<li><strong>是什么</strong></li>\n</ul>\n<p>Django的后台管理工具，可以读取定义的模型元数据，提供强大的管理使用页面</p>\n<ul>\n<li><strong>为什么使用</strong></li>\n</ul>\n<p>可以使用后台管理模型，简化操作。借助框架完成认证用户、模型管理、校验输入等功能</p>\n<ul>\n<li><strong>怎么使用</strong></li>\n</ul>\n<p>1) 创建管理员用户</p>\n<p>2) 登录页面进行管理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br><span class=\"line\">python manage.py runserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 访问</span></span><br><span class=\"line\">http://localhost:8000/admin</span><br></pre></td></tr></table></figure>\n<p>在后台查看Article模型，还需要将Article注册到admin</p>\n<p>在blog目录下的admin.py中加入如下配置，刷新页面即可显示Article模型信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Article</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Article)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博客数据返回页面\"><a href=\"#博客数据返回页面\" class=\"headerlink\" title=\"博客数据返回页面\"></a>博客数据返回页面</h3><p>blog目录下views.py新增方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">article_content</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    article = Article.objects.all()[<span class=\"number\">0</span>]</span><br><span class=\"line\">    title = article.title</span><br><span class=\"line\">    brief_content = article.brief_content</span><br><span class=\"line\">    content = article.content</span><br><span class=\"line\">    article_id = article.article_id</span><br><span class=\"line\">    publish_date = article.publish_date</span><br><span class=\"line\">    return_str =  <span class=\"string\">'title: %s, brief_content: %s, content: %s, article_id: %s, publish_date: %s'</span> % (title, brief_content, content, article_id, publish_date)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(return_str)</span><br></pre></td></tr></table></figure>\n<p>blog目录下urls.py新增路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'hello_world'</span>, blog.views.hello_world),</span><br><span class=\"line\">    path(<span class=\"string\">'content'</span>, blog.views.article_content)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django视图与模版\"><a href=\"#Django视图与模版\" class=\"headerlink\" title=\"Django视图与模版\"></a>Django视图与模版</h2><h3 id=\"实现静态博客页面\"><a href=\"#实现静态博客页面\" class=\"headerlink\" title=\"实现静态博客页面\"></a>实现静态博客页面</h3><ul>\n<li><strong>页面布局</strong></li>\n</ul>\n<p><strong>1)首页</strong></p>\n<p><strong>2)详情页</strong></p>\n<ul>\n<li><strong>Bootstrap及其栅格系统</strong></li>\n</ul>\n<p>来自美国Twitter的前端框架</p>\n<h3 id=\"Django的模板系统\"><a href=\"#Django的模板系统\" class=\"headerlink\" title=\"Django的模板系统\"></a>Django的模板系统</h3><ul>\n<li><strong>模板系统简介</strong></li>\n</ul>\n<p>视图文件不适合编码HTML，页面设计需要修改Python代码</p>\n<p>模板系统定义了特有的标签占位符</p>\n<ul>\n<li><p><strong>模板系统语法</strong></p>\n<p>1)变量标签 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; 变量 &#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  2)for循环</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list %&#125;, &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>  3)if…else </p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> %&#125;, &#123;% <span class=\"keyword\">else</span> %&#125;, &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用模板系统\"><a href=\"#使用模板系统\" class=\"headerlink\" title=\"使用模板系统\"></a>使用模板系统</h3><ul>\n<li>获取路径参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># urls.py</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'hello_world'</span>, blog.views.hello_world),</span><br><span class=\"line\">    path(<span class=\"string\">'content'</span>, blog.views.article_content),</span><br><span class=\"line\">    path(<span class=\"string\">'index'</span>, blog.views.get_index_page),</span><br><span class=\"line\">    <span class=\"comment\"># path('detail', blog.views.get_detail_page),</span></span><br><span class=\"line\">    path(<span class=\"string\">'detail/&lt;int:article_id&gt;'</span>, blog.views.get_detail_page),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># views.py</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_detail_page</span><span class=\"params\">(request, article_id)</span>:</span></span><br><span class=\"line\">    all_articles = Article.objects.all()</span><br><span class=\"line\">    curr_article = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> article <span class=\"keyword\">in</span> all_articles:</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(article.article_id == article_id):</span><br><span class=\"line\">            curr_article = article</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(curr_article == <span class=\"literal\">None</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'未找到，换个ID试试。。。'</span>)</span><br><span class=\"line\">    section_list = curr_article.content.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'blog/detail.html'</span>,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"string\">'curr_article'</span>: curr_article,</span><br><span class=\"line\">                      <span class=\"string\">'section_list'</span>: section_list,</span><br><span class=\"line\">                  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_index_page</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    page = request.GET.get(<span class=\"string\">'page'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page:</span><br><span class=\"line\">        page = int(page)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        page = <span class=\"number\">1</span></span><br><span class=\"line\">    print(<span class=\"string\">'page param: '</span>, page)</span><br><span class=\"line\">    all_article = Article.objects.all()</span><br><span class=\"line\">    <span class=\"comment\"># 每页3</span></span><br><span class=\"line\">    paginator = Paginator(all_article, <span class=\"number\">3</span>)</span><br><span class=\"line\">    page_num = paginator.num_pages</span><br><span class=\"line\">    print(<span class=\"string\">'page num: '</span>, page_num)</span><br><span class=\"line\">    page_article_list = paginator.page(page)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_article_list.has_next():</span><br><span class=\"line\">        next_page = page + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        next_page = page</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_article_list.has_previous():</span><br><span class=\"line\">        previous_page = page - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        previous_page = page</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'blog/index.html'</span>,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"string\">'article_list'</span>: page_article_list,</span><br><span class=\"line\">                      <span class=\"string\">'page_num'</span>: range(<span class=\"number\">1</span>, page_num + <span class=\"number\">1</span>),</span><br><span class=\"line\">                      <span class=\"string\">'curr_page'</span>: page,</span><br><span class=\"line\">                      <span class=\"string\">'next_page'</span>: next_page,</span><br><span class=\"line\">                      <span class=\"string\">'previous_page'</span>: previous_page,</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  )</span><br></pre></td></tr></table></figure>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>views.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top5_article_list = Article.objects.order_by(<span class=\"string\">'-publish_date'</span>)[:<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hyman213/django_introduction\" target=\"_blank\" rel=\"noopener\">源码</a></p>"},{"title":"初识网关Zuul","date":"2019-10-27T13:11:46.000Z","_content":"\n一直听说微服务，可苦于一直没有机会尝试。公司项目搭建基于SpringCLoud，正好可以深入了解下微服务的奥秘。 那就从网关-Zuul开始吧！\n此片为自己学习过程中认为比较重要的知识点，大部分基于网上各大神的文章，在此做一下整理。\n\n<!--more-->\n\n## 使用\n\n### 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n</dependency>\n```\n\n### 启用功能\n\n注释`@EnableZuulProxy`\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableZuulProxy\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n```\n\n### 配置路由规则\n\n**推荐**\n\n`zuul.routes.<route>.path` 配置匹配规则，`zuul.routes.<route>.service-id` 配置服务名称，其中 `<route>` 为路由名称，可以任意指定\n\n```xml\n## 面向服务的路由\nzuul.routes.hello-service.path=/hello-service/**\nzuul.routes.hello-service.service-id=hello-service\n\n## 面向服务路由的简易配置\n## zuul.routes.<serviceId>=<path>\nzuul.routes.hello-service=/hello-service/**\n```\n\n**传统多服务实例配置**\n\n需关闭负载均衡和 Eureka 的结合，通过配置 Ribbon 的服务列表进行负载均衡。\n\n```xml\n## 传统路由多实例配置\nzuul.routes.hello-service.path=/hello-service/**\nzuul.routes.hello-service.service-id=hello-service\nribbon.eureka.enabled=false\nhello-service.ribbon.listOfServers=http://localhost:8081/,http://localhost:8082/\n```\n\n**Zuui默认配置**\n\n默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：`http://ZUUL_HOST:ZUUL_PORT/`微服务在Eureka上的`serviceId/**`会被转发到`serviceId`对应的微服务。\n\n## 服务过滤\n\n### 自定义过滤器\n\n自定义过滤器的实现，需要继承`ZuulFilter`，需要重写实现下面四个方法：过滤类型、执行顺序、执行条件、具体操作\n\n- `filterType`  ：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：\n  - `pre`：可以在请求被路由之前调用\n  - `routing`：在路由请求时候被调用\n  - `post`：在routing和error过滤器之后被调用\n  - `error`：处理请求时发生错误时被调用\n  \n- `filterOrder`：通过int值来定义过滤器的执行顺序\n\n- `shouldFilter`：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回true，所以该过滤器总是生效。\n\n- `run`：过滤器的具体逻辑。需要注意，这里我们通过`ctx.setSendZuulResponse(false)`令zuul过滤该请求，不对其进行路由，然后通过`ctx.setResponseStatusCode(401)`设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，通过`ctx.setResponseBody(body)`对返回body内容进行编辑等。\n\n```java\npublic class AccessFilter extends ZuulFilter  {\n\n    private static Logger log = LoggerFactory.getLogger(AccessFilter.class);\n\n    @Override\n    public String filterType() {\n        return \"pre\";\n    }\n\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public Object run() {\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n\n        log.info(String.format(\"%s request to %s\", request.getMethod(), request.getRequestURL().toString()));\n\n        Object accessToken = request.getParameter(\"accessToken\");\n        if(accessToken == null) {\n            log.warn(\"access token is empty\");\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(401);\n            return null;\n        }\n        log.info(\"access token ok\");\n        return null;\n    }\n\n}\n```\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021132307.png)\n\n### 核心过滤器\n\n在Spring Cloud Zuul中，为了让API网关组件可以更方便的上手使用，它在HTTP请求生命周期的各个阶段默认地实现了一批核心过滤器，它们会在API网关服务启动的时候被自动地加载和启用。定义于`org.springframework.cloud.netflix.zuul.filters`包下\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021134033.png)\n\n\n\n#### pre过滤器\n\n- `ServletDetectionFilter`：它的执行顺序为-3，是最先被执行的过滤器。该过滤器总是会被执行，主要用来检测当前请求是通过Spring的DispatcherServlet处理运行，还是通过ZuulServlet来处理运行的。它的检测结果会以布尔类型保存在当前请求上下文的isDispatcherServletRequest参数中，这样在后续的过滤器中，我们就可以通过RequestUtils.isDispatcherServletRequest()和RequestUtils.isZuulServletRequest()方法判断它以实现做不同的处理。一般情况下，发送到API网关的外部请求都会被Spring的DispatcherServlet处理，除了通过/zuul/*路径访问的请求会绕过DispatcherServlet，被ZuulServlet处理，主要用来应对处理大文件上传的情况。另外，对于ZuulServlet的访问路径/zuul/*，我们可以通过zuul.servletPath参数来进行修改。\n- `Servlet30WrapperFilter`：它的执行顺序为-2，是第二个执行的过滤器。目前的实现会对所有请求生效，主要为了将原始的HttpServletRequest包装成Servlet30RequestWrapper对象。\n- `FormBodyWrapperFilter`：它的执行顺序为-1，是第三个执行的过滤器。该过滤器仅对两种类请求生效，第一类是Content-Type为application/x-www-form-urlencoded的请求，第二类是Content-Type为multipart/form-data并且是由Spring的DispatcherServlet处理的请求（用到了ServletDetectionFilter的处理结果）。而该过滤器的主要目的是将符合要求的请求体包装成FormBodyRequestWrapper对象。\n- `DebugFilter`：它的执行顺序为1，是第四个执行的过滤器。该过滤器会根据配置参数zuul.debug.request和请求中的debug参数来决定是否执行过滤器中的操作。而它的具体操作内容则是将当前的请求上下文中的debugRouting和debugRequest参数设置为true。由于在同一个请求的不同生命周期中，都可以访问到这两个值，所以我们在后续的各个过滤器中可以利用这两值来定义一些debug信息，这样当线上环境出现问题的时候，可以通过请求参数的方式来激活这些debug信息以帮助分析问题。另外，对于请求参数中的debug参数，我们也可以通过zuul.debug.parameter来进行自定义。\n- `PreDecorationFilter`：它的执行顺序为5，是pre阶段最后被执行的过滤器。该过滤器会判断当前请求上下文中是否存在forward.to和serviceId参数，如果都不存在，那么它就会执行具体过滤器的操作（如果有一个存在的话，说明当前请求已经被处理过了，因为这两个信息就是根据当前请求的路由信息加载进来的）。而它的具体操作内容就是为当前请求做一些预处理，比如：进行路由规则的匹配、在请求上下文中设置该请求的基本信息以及将路由匹配结果等一些设置信息等，这些信息将是后续过滤器进行处理的重要依据，我们可以通过RequestContext.getCurrentContext()来访问这些信息。另外，我们还可以在该实现中找到一些对HTTP头请求进行处理的逻辑，其中包含了一些耳熟能详的头域，比如：X-Forwarded-Host、X-Forwarded-Port。另外，对于这些头域的记录是通过zuul.addProxyHeaders参数进行控制的，而这个参数默认值为true，所以Zuul在请求跳转时默认地会为请求增加X-Forwarded-*头域，包括：X-Forwarded-Host、X-Forwarded-Port、X-Forwarded-For、X-Forwarded-Prefix、X-Forwarded-Proto。我们也可以通过设置zuul.addProxyHeaders=false关闭对这些头域的添加动作。\n\n> [《Spring Cloud实战小贴士：Zuul处理Cookie和重定向》](http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/) 一文中提到的加载敏感头信息加入到忽略头信息的操作调用就在PreDecorationFilter过滤器中实现。\n\n#### route过滤器\n\n- RibbonRoutingFilter：它的执行顺序为10，是route阶段第一个执行的过滤器。该过滤器只对请求上下文中存在serviceId参数的请求进行处理，即只对通过serviceId配置路由规则的请求生效。而该过滤器的执行逻辑就是面向服务路由的核心，它通过使用Ribbon和Hystrix来向服务实例发起请求，并将服务实例的请求结果返回。\n- SimpleHostRoutingFilter：它的执行顺序为100，是route阶段第二个执行的过滤器。该过滤器只对请求上下文中存在routeHost参数的请求进行处理，即只对通过url配置路由规则的请求生效。而该过滤器的执行逻辑就是直接向routeHost参数的物理地址发起请求，从源码中我们可以知道该请求是直接通过httpclient包实现的，而没有使用Hystrix命令进行包装，所以这类请求并没有线程隔离和断路器的保护。\n- SendForwardFilter：它的执行顺序为500，是route阶段第三个执行的过滤器。该过滤器只对请求上下文中存在forward.to参数的请求进行处理，即用来处理路由规则中的forward本地跳转配置。\n\n#### post过滤器\n\n- SendErrorFilter：它的执行顺序为0，是post阶段第一个执行的过滤器。该过滤器仅在请求上下文中包含error.status_code参数（由之前执行的过滤器设置的错误编码）并且还没有被该过滤器处理过的时候执行。而该过滤器的具体逻辑就是利用请求上下文中的错误信息来组织成一个forward到API网关/error错误端点的请求来产生错误响应。\n- SendResponseFilter：它的执行顺序为1000，是post阶段最后执行的过滤器。该过滤器会检查请求上下文中是否包含请求响应相关的头信息、响应数据流或是响应体，只有在包含它们其中一个的时候就会执行处理逻辑。而该过滤器的处理逻辑就是利用请求上下文的响应信息来组织需要发送回客户端的响应内容。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021133625.png)\n\n\n\n## 参考文章\n\n- [Spring Cloud 源码分析（四）Zuul：核心过滤器](<http://blog.didispace.com/spring-cloud-source-zuul/>)\n- [Spring Cloud Netflix套件](<http://blog.didispace.com/spring-cloud-learning/>)\n","source":"_posts/20191027-初识网关Zuul.md","raw":"---\ntitle: 初识网关Zuul\ndate: 2019-10-27 21:11:46\ntags: SpringCloud, Zuul\ncategories: \n - 技术\n - 微服务\n - 网关\n---\n\n一直听说微服务，可苦于一直没有机会尝试。公司项目搭建基于SpringCLoud，正好可以深入了解下微服务的奥秘。 那就从网关-Zuul开始吧！\n此片为自己学习过程中认为比较重要的知识点，大部分基于网上各大神的文章，在此做一下整理。\n\n<!--more-->\n\n## 使用\n\n### 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n</dependency>\n```\n\n### 启用功能\n\n注释`@EnableZuulProxy`\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableZuulProxy\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n```\n\n### 配置路由规则\n\n**推荐**\n\n`zuul.routes.<route>.path` 配置匹配规则，`zuul.routes.<route>.service-id` 配置服务名称，其中 `<route>` 为路由名称，可以任意指定\n\n```xml\n## 面向服务的路由\nzuul.routes.hello-service.path=/hello-service/**\nzuul.routes.hello-service.service-id=hello-service\n\n## 面向服务路由的简易配置\n## zuul.routes.<serviceId>=<path>\nzuul.routes.hello-service=/hello-service/**\n```\n\n**传统多服务实例配置**\n\n需关闭负载均衡和 Eureka 的结合，通过配置 Ribbon 的服务列表进行负载均衡。\n\n```xml\n## 传统路由多实例配置\nzuul.routes.hello-service.path=/hello-service/**\nzuul.routes.hello-service.service-id=hello-service\nribbon.eureka.enabled=false\nhello-service.ribbon.listOfServers=http://localhost:8081/,http://localhost:8082/\n```\n\n**Zuui默认配置**\n\n默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：`http://ZUUL_HOST:ZUUL_PORT/`微服务在Eureka上的`serviceId/**`会被转发到`serviceId`对应的微服务。\n\n## 服务过滤\n\n### 自定义过滤器\n\n自定义过滤器的实现，需要继承`ZuulFilter`，需要重写实现下面四个方法：过滤类型、执行顺序、执行条件、具体操作\n\n- `filterType`  ：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：\n  - `pre`：可以在请求被路由之前调用\n  - `routing`：在路由请求时候被调用\n  - `post`：在routing和error过滤器之后被调用\n  - `error`：处理请求时发生错误时被调用\n  \n- `filterOrder`：通过int值来定义过滤器的执行顺序\n\n- `shouldFilter`：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回true，所以该过滤器总是生效。\n\n- `run`：过滤器的具体逻辑。需要注意，这里我们通过`ctx.setSendZuulResponse(false)`令zuul过滤该请求，不对其进行路由，然后通过`ctx.setResponseStatusCode(401)`设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，通过`ctx.setResponseBody(body)`对返回body内容进行编辑等。\n\n```java\npublic class AccessFilter extends ZuulFilter  {\n\n    private static Logger log = LoggerFactory.getLogger(AccessFilter.class);\n\n    @Override\n    public String filterType() {\n        return \"pre\";\n    }\n\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public Object run() {\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n\n        log.info(String.format(\"%s request to %s\", request.getMethod(), request.getRequestURL().toString()));\n\n        Object accessToken = request.getParameter(\"accessToken\");\n        if(accessToken == null) {\n            log.warn(\"access token is empty\");\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(401);\n            return null;\n        }\n        log.info(\"access token ok\");\n        return null;\n    }\n\n}\n```\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021132307.png)\n\n### 核心过滤器\n\n在Spring Cloud Zuul中，为了让API网关组件可以更方便的上手使用，它在HTTP请求生命周期的各个阶段默认地实现了一批核心过滤器，它们会在API网关服务启动的时候被自动地加载和启用。定义于`org.springframework.cloud.netflix.zuul.filters`包下\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021134033.png)\n\n\n\n#### pre过滤器\n\n- `ServletDetectionFilter`：它的执行顺序为-3，是最先被执行的过滤器。该过滤器总是会被执行，主要用来检测当前请求是通过Spring的DispatcherServlet处理运行，还是通过ZuulServlet来处理运行的。它的检测结果会以布尔类型保存在当前请求上下文的isDispatcherServletRequest参数中，这样在后续的过滤器中，我们就可以通过RequestUtils.isDispatcherServletRequest()和RequestUtils.isZuulServletRequest()方法判断它以实现做不同的处理。一般情况下，发送到API网关的外部请求都会被Spring的DispatcherServlet处理，除了通过/zuul/*路径访问的请求会绕过DispatcherServlet，被ZuulServlet处理，主要用来应对处理大文件上传的情况。另外，对于ZuulServlet的访问路径/zuul/*，我们可以通过zuul.servletPath参数来进行修改。\n- `Servlet30WrapperFilter`：它的执行顺序为-2，是第二个执行的过滤器。目前的实现会对所有请求生效，主要为了将原始的HttpServletRequest包装成Servlet30RequestWrapper对象。\n- `FormBodyWrapperFilter`：它的执行顺序为-1，是第三个执行的过滤器。该过滤器仅对两种类请求生效，第一类是Content-Type为application/x-www-form-urlencoded的请求，第二类是Content-Type为multipart/form-data并且是由Spring的DispatcherServlet处理的请求（用到了ServletDetectionFilter的处理结果）。而该过滤器的主要目的是将符合要求的请求体包装成FormBodyRequestWrapper对象。\n- `DebugFilter`：它的执行顺序为1，是第四个执行的过滤器。该过滤器会根据配置参数zuul.debug.request和请求中的debug参数来决定是否执行过滤器中的操作。而它的具体操作内容则是将当前的请求上下文中的debugRouting和debugRequest参数设置为true。由于在同一个请求的不同生命周期中，都可以访问到这两个值，所以我们在后续的各个过滤器中可以利用这两值来定义一些debug信息，这样当线上环境出现问题的时候，可以通过请求参数的方式来激活这些debug信息以帮助分析问题。另外，对于请求参数中的debug参数，我们也可以通过zuul.debug.parameter来进行自定义。\n- `PreDecorationFilter`：它的执行顺序为5，是pre阶段最后被执行的过滤器。该过滤器会判断当前请求上下文中是否存在forward.to和serviceId参数，如果都不存在，那么它就会执行具体过滤器的操作（如果有一个存在的话，说明当前请求已经被处理过了，因为这两个信息就是根据当前请求的路由信息加载进来的）。而它的具体操作内容就是为当前请求做一些预处理，比如：进行路由规则的匹配、在请求上下文中设置该请求的基本信息以及将路由匹配结果等一些设置信息等，这些信息将是后续过滤器进行处理的重要依据，我们可以通过RequestContext.getCurrentContext()来访问这些信息。另外，我们还可以在该实现中找到一些对HTTP头请求进行处理的逻辑，其中包含了一些耳熟能详的头域，比如：X-Forwarded-Host、X-Forwarded-Port。另外，对于这些头域的记录是通过zuul.addProxyHeaders参数进行控制的，而这个参数默认值为true，所以Zuul在请求跳转时默认地会为请求增加X-Forwarded-*头域，包括：X-Forwarded-Host、X-Forwarded-Port、X-Forwarded-For、X-Forwarded-Prefix、X-Forwarded-Proto。我们也可以通过设置zuul.addProxyHeaders=false关闭对这些头域的添加动作。\n\n> [《Spring Cloud实战小贴士：Zuul处理Cookie和重定向》](http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/) 一文中提到的加载敏感头信息加入到忽略头信息的操作调用就在PreDecorationFilter过滤器中实现。\n\n#### route过滤器\n\n- RibbonRoutingFilter：它的执行顺序为10，是route阶段第一个执行的过滤器。该过滤器只对请求上下文中存在serviceId参数的请求进行处理，即只对通过serviceId配置路由规则的请求生效。而该过滤器的执行逻辑就是面向服务路由的核心，它通过使用Ribbon和Hystrix来向服务实例发起请求，并将服务实例的请求结果返回。\n- SimpleHostRoutingFilter：它的执行顺序为100，是route阶段第二个执行的过滤器。该过滤器只对请求上下文中存在routeHost参数的请求进行处理，即只对通过url配置路由规则的请求生效。而该过滤器的执行逻辑就是直接向routeHost参数的物理地址发起请求，从源码中我们可以知道该请求是直接通过httpclient包实现的，而没有使用Hystrix命令进行包装，所以这类请求并没有线程隔离和断路器的保护。\n- SendForwardFilter：它的执行顺序为500，是route阶段第三个执行的过滤器。该过滤器只对请求上下文中存在forward.to参数的请求进行处理，即用来处理路由规则中的forward本地跳转配置。\n\n#### post过滤器\n\n- SendErrorFilter：它的执行顺序为0，是post阶段第一个执行的过滤器。该过滤器仅在请求上下文中包含error.status_code参数（由之前执行的过滤器设置的错误编码）并且还没有被该过滤器处理过的时候执行。而该过滤器的具体逻辑就是利用请求上下文中的错误信息来组织成一个forward到API网关/error错误端点的请求来产生错误响应。\n- SendResponseFilter：它的执行顺序为1000，是post阶段最后执行的过滤器。该过滤器会检查请求上下文中是否包含请求响应相关的头信息、响应数据流或是响应体，只有在包含它们其中一个的时候就会执行处理逻辑。而该过滤器的处理逻辑就是利用请求上下文的响应信息来组织需要发送回客户端的响应内容。\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021133625.png)\n\n\n\n## 参考文章\n\n- [Spring Cloud 源码分析（四）Zuul：核心过滤器](<http://blog.didispace.com/spring-cloud-source-zuul/>)\n- [Spring Cloud Netflix套件](<http://blog.didispace.com/spring-cloud-learning/>)\n","slug":"初识网关Zuul","published":1,"updated":"2019-10-27T13:22:44.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxclb000kd4kp9pra0pjk","content":"<p>一直听说微服务，可苦于一直没有机会尝试。公司项目搭建基于SpringCLoud，正好可以深入了解下微服务的奥秘。 那就从网关-Zuul开始吧！<br>此片为自己学习过程中认为比较重要的知识点，大部分基于网上各大神的文章，在此做一下整理。</p>\n<a id=\"more\"></a>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启用功能\"><a href=\"#启用功能\" class=\"headerlink\" title=\"启用功能\"></a>启用功能</h3><p>注释<code>@EnableZuulProxy</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置路由规则\"><a href=\"#配置路由规则\" class=\"headerlink\" title=\"配置路由规则\"></a>配置路由规则</h3><p><strong>推荐</strong></p>\n<p><code>zuul.routes.&lt;route&gt;.path</code> 配置匹配规则，<code>zuul.routes.&lt;route&gt;.service-id</code> 配置服务名称，其中 <code>&lt;route&gt;</code> 为路由名称，可以任意指定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 面向服务的路由</span><br><span class=\"line\">zuul.routes.hello-service.path=/hello-service/**</span><br><span class=\"line\">zuul.routes.hello-service.service-id=hello-service</span><br><span class=\"line\"></span><br><span class=\"line\">## 面向服务路由的简易配置</span><br><span class=\"line\">## zuul.routes.<span class=\"tag\">&lt;<span class=\"name\">serviceId</span>&gt;</span>=<span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">zuul.routes.hello-service=/hello-service/**</span><br></pre></td></tr></table></figure>\n<p><strong>传统多服务实例配置</strong></p>\n<p>需关闭负载均衡和 Eureka 的结合，通过配置 Ribbon 的服务列表进行负载均衡。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 传统路由多实例配置</span><br><span class=\"line\">zuul.routes.hello-service.path=/hello-service/**</span><br><span class=\"line\">zuul.routes.hello-service.service-id=hello-service</span><br><span class=\"line\">ribbon.eureka.enabled=false</span><br><span class=\"line\">hello-service.ribbon.listOfServers=http://localhost:8081/,http://localhost:8082/</span><br></pre></td></tr></table></figure>\n<p><strong>Zuui默认配置</strong></p>\n<p>默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<code>http://ZUUL_HOST:ZUUL_PORT/</code>微服务在Eureka上的<code>serviceId/**</code>会被转发到<code>serviceId</code>对应的微服务。</p>\n<h2 id=\"服务过滤\"><a href=\"#服务过滤\" class=\"headerlink\" title=\"服务过滤\"></a>服务过滤</h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><p>自定义过滤器的实现，需要继承<code>ZuulFilter</code>，需要重写实现下面四个方法：过滤类型、执行顺序、执行条件、具体操作</p>\n<ul>\n<li><p><code>filterType</code>  ：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</p>\n<ul>\n<li><code>pre</code>：可以在请求被路由之前调用</li>\n<li><code>routing</code>：在路由请求时候被调用</li>\n<li><code>post</code>：在routing和error过滤器之后被调用</li>\n<li><code>error</code>：处理请求时发生错误时被调用</li>\n</ul>\n</li>\n<li><p><code>filterOrder</code>：通过int值来定义过滤器的执行顺序</p>\n</li>\n<li><p><code>shouldFilter</code>：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回true，所以该过滤器总是生效。</p>\n</li>\n<li><p><code>run</code>：过滤器的具体逻辑。需要注意，这里我们通过<code>ctx.setSendZuulResponse(false)</code>令zuul过滤该请求，不对其进行路由，然后通过<code>ctx.setResponseStatusCode(401)</code>设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，通过<code>ctx.setResponseBody(body)</code>对返回body内容进行编辑等。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccessFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger log = LoggerFactory.getLogger(AccessFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class=\"line\">        HttpServletRequest request = ctx.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(String.format(<span class=\"string\">\"%s request to %s\"</span>, request.getMethod(), request.getRequestURL().toString()));</span><br><span class=\"line\"></span><br><span class=\"line\">        Object accessToken = request.getParameter(<span class=\"string\">\"accessToken\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(accessToken == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">\"access token is empty\"</span>);</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">401</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"access token ok\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021132307.png\" alt></p>\n<h3 id=\"核心过滤器\"><a href=\"#核心过滤器\" class=\"headerlink\" title=\"核心过滤器\"></a>核心过滤器</h3><p>在Spring Cloud Zuul中，为了让API网关组件可以更方便的上手使用，它在HTTP请求生命周期的各个阶段默认地实现了一批核心过滤器，它们会在API网关服务启动的时候被自动地加载和启用。定义于<code>org.springframework.cloud.netflix.zuul.filters</code>包下</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021134033.png\" alt></p>\n<h4 id=\"pre过滤器\"><a href=\"#pre过滤器\" class=\"headerlink\" title=\"pre过滤器\"></a>pre过滤器</h4><ul>\n<li><code>ServletDetectionFilter</code>：它的执行顺序为-3，是最先被执行的过滤器。该过滤器总是会被执行，主要用来检测当前请求是通过Spring的DispatcherServlet处理运行，还是通过ZuulServlet来处理运行的。它的检测结果会以布尔类型保存在当前请求上下文的isDispatcherServletRequest参数中，这样在后续的过滤器中，我们就可以通过RequestUtils.isDispatcherServletRequest()和RequestUtils.isZuulServletRequest()方法判断它以实现做不同的处理。一般情况下，发送到API网关的外部请求都会被Spring的DispatcherServlet处理，除了通过/zuul/<em>路径访问的请求会绕过DispatcherServlet，被ZuulServlet处理，主要用来应对处理大文件上传的情况。另外，对于ZuulServlet的访问路径/zuul/</em>，我们可以通过zuul.servletPath参数来进行修改。</li>\n<li><code>Servlet30WrapperFilter</code>：它的执行顺序为-2，是第二个执行的过滤器。目前的实现会对所有请求生效，主要为了将原始的HttpServletRequest包装成Servlet30RequestWrapper对象。</li>\n<li><code>FormBodyWrapperFilter</code>：它的执行顺序为-1，是第三个执行的过滤器。该过滤器仅对两种类请求生效，第一类是Content-Type为application/x-www-form-urlencoded的请求，第二类是Content-Type为multipart/form-data并且是由Spring的DispatcherServlet处理的请求（用到了ServletDetectionFilter的处理结果）。而该过滤器的主要目的是将符合要求的请求体包装成FormBodyRequestWrapper对象。</li>\n<li><code>DebugFilter</code>：它的执行顺序为1，是第四个执行的过滤器。该过滤器会根据配置参数zuul.debug.request和请求中的debug参数来决定是否执行过滤器中的操作。而它的具体操作内容则是将当前的请求上下文中的debugRouting和debugRequest参数设置为true。由于在同一个请求的不同生命周期中，都可以访问到这两个值，所以我们在后续的各个过滤器中可以利用这两值来定义一些debug信息，这样当线上环境出现问题的时候，可以通过请求参数的方式来激活这些debug信息以帮助分析问题。另外，对于请求参数中的debug参数，我们也可以通过zuul.debug.parameter来进行自定义。</li>\n<li><code>PreDecorationFilter</code>：它的执行顺序为5，是pre阶段最后被执行的过滤器。该过滤器会判断当前请求上下文中是否存在forward.to和serviceId参数，如果都不存在，那么它就会执行具体过滤器的操作（如果有一个存在的话，说明当前请求已经被处理过了，因为这两个信息就是根据当前请求的路由信息加载进来的）。而它的具体操作内容就是为当前请求做一些预处理，比如：进行路由规则的匹配、在请求上下文中设置该请求的基本信息以及将路由匹配结果等一些设置信息等，这些信息将是后续过滤器进行处理的重要依据，我们可以通过RequestContext.getCurrentContext()来访问这些信息。另外，我们还可以在该实现中找到一些对HTTP头请求进行处理的逻辑，其中包含了一些耳熟能详的头域，比如：X-Forwarded-Host、X-Forwarded-Port。另外，对于这些头域的记录是通过zuul.addProxyHeaders参数进行控制的，而这个参数默认值为true，所以Zuul在请求跳转时默认地会为请求增加X-Forwarded-*头域，包括：X-Forwarded-Host、X-Forwarded-Port、X-Forwarded-For、X-Forwarded-Prefix、X-Forwarded-Proto。我们也可以通过设置zuul.addProxyHeaders=false关闭对这些头域的添加动作。</li>\n</ul>\n<blockquote>\n<p><a href=\"http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/\" target=\"_blank\" rel=\"noopener\">《Spring Cloud实战小贴士：Zuul处理Cookie和重定向》</a> 一文中提到的加载敏感头信息加入到忽略头信息的操作调用就在PreDecorationFilter过滤器中实现。</p>\n</blockquote>\n<h4 id=\"route过滤器\"><a href=\"#route过滤器\" class=\"headerlink\" title=\"route过滤器\"></a>route过滤器</h4><ul>\n<li>RibbonRoutingFilter：它的执行顺序为10，是route阶段第一个执行的过滤器。该过滤器只对请求上下文中存在serviceId参数的请求进行处理，即只对通过serviceId配置路由规则的请求生效。而该过滤器的执行逻辑就是面向服务路由的核心，它通过使用Ribbon和Hystrix来向服务实例发起请求，并将服务实例的请求结果返回。</li>\n<li>SimpleHostRoutingFilter：它的执行顺序为100，是route阶段第二个执行的过滤器。该过滤器只对请求上下文中存在routeHost参数的请求进行处理，即只对通过url配置路由规则的请求生效。而该过滤器的执行逻辑就是直接向routeHost参数的物理地址发起请求，从源码中我们可以知道该请求是直接通过httpclient包实现的，而没有使用Hystrix命令进行包装，所以这类请求并没有线程隔离和断路器的保护。</li>\n<li>SendForwardFilter：它的执行顺序为500，是route阶段第三个执行的过滤器。该过滤器只对请求上下文中存在forward.to参数的请求进行处理，即用来处理路由规则中的forward本地跳转配置。</li>\n</ul>\n<h4 id=\"post过滤器\"><a href=\"#post过滤器\" class=\"headerlink\" title=\"post过滤器\"></a>post过滤器</h4><ul>\n<li>SendErrorFilter：它的执行顺序为0，是post阶段第一个执行的过滤器。该过滤器仅在请求上下文中包含error.status_code参数（由之前执行的过滤器设置的错误编码）并且还没有被该过滤器处理过的时候执行。而该过滤器的具体逻辑就是利用请求上下文中的错误信息来组织成一个forward到API网关/error错误端点的请求来产生错误响应。</li>\n<li>SendResponseFilter：它的执行顺序为1000，是post阶段最后执行的过滤器。该过滤器会检查请求上下文中是否包含请求响应相关的头信息、响应数据流或是响应体，只有在包含它们其中一个的时候就会执行处理逻辑。而该过滤器的处理逻辑就是利用请求上下文的响应信息来组织需要发送回客户端的响应内容。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021133625.png\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://blog.didispace.com/spring-cloud-source-zuul/\" target=\"_blank\" rel=\"noopener\">Spring Cloud 源码分析（四）Zuul：核心过滤器</a></li>\n<li><a href=\"http://blog.didispace.com/spring-cloud-learning/\" target=\"_blank\" rel=\"noopener\">Spring Cloud Netflix套件</a></li>\n</ul>\n","site":{"data":{}},"length":5609,"excerpt":"<p>一直听说微服务，可苦于一直没有机会尝试。公司项目搭建基于SpringCLoud，正好可以深入了解下微服务的奥秘。 那就从网关-Zuul开始吧！<br>此片为自己学习过程中认为比较重要的知识点，大部分基于网上各大神的文章，在此做一下整理。</p>","more":"<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启用功能\"><a href=\"#启用功能\" class=\"headerlink\" title=\"启用功能\"></a>启用功能</h3><p>注释<code>@EnableZuulProxy</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置路由规则\"><a href=\"#配置路由规则\" class=\"headerlink\" title=\"配置路由规则\"></a>配置路由规则</h3><p><strong>推荐</strong></p>\n<p><code>zuul.routes.&lt;route&gt;.path</code> 配置匹配规则，<code>zuul.routes.&lt;route&gt;.service-id</code> 配置服务名称，其中 <code>&lt;route&gt;</code> 为路由名称，可以任意指定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 面向服务的路由</span><br><span class=\"line\">zuul.routes.hello-service.path=/hello-service/**</span><br><span class=\"line\">zuul.routes.hello-service.service-id=hello-service</span><br><span class=\"line\"></span><br><span class=\"line\">## 面向服务路由的简易配置</span><br><span class=\"line\">## zuul.routes.<span class=\"tag\">&lt;<span class=\"name\">serviceId</span>&gt;</span>=<span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">zuul.routes.hello-service=/hello-service/**</span><br></pre></td></tr></table></figure>\n<p><strong>传统多服务实例配置</strong></p>\n<p>需关闭负载均衡和 Eureka 的结合，通过配置 Ribbon 的服务列表进行负载均衡。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 传统路由多实例配置</span><br><span class=\"line\">zuul.routes.hello-service.path=/hello-service/**</span><br><span class=\"line\">zuul.routes.hello-service.service-id=hello-service</span><br><span class=\"line\">ribbon.eureka.enabled=false</span><br><span class=\"line\">hello-service.ribbon.listOfServers=http://localhost:8081/,http://localhost:8082/</span><br></pre></td></tr></table></figure>\n<p><strong>Zuui默认配置</strong></p>\n<p>默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<code>http://ZUUL_HOST:ZUUL_PORT/</code>微服务在Eureka上的<code>serviceId/**</code>会被转发到<code>serviceId</code>对应的微服务。</p>\n<h2 id=\"服务过滤\"><a href=\"#服务过滤\" class=\"headerlink\" title=\"服务过滤\"></a>服务过滤</h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><p>自定义过滤器的实现，需要继承<code>ZuulFilter</code>，需要重写实现下面四个方法：过滤类型、执行顺序、执行条件、具体操作</p>\n<ul>\n<li><p><code>filterType</code>  ：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</p>\n<ul>\n<li><code>pre</code>：可以在请求被路由之前调用</li>\n<li><code>routing</code>：在路由请求时候被调用</li>\n<li><code>post</code>：在routing和error过滤器之后被调用</li>\n<li><code>error</code>：处理请求时发生错误时被调用</li>\n</ul>\n</li>\n<li><p><code>filterOrder</code>：通过int值来定义过滤器的执行顺序</p>\n</li>\n<li><p><code>shouldFilter</code>：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回true，所以该过滤器总是生效。</p>\n</li>\n<li><p><code>run</code>：过滤器的具体逻辑。需要注意，这里我们通过<code>ctx.setSendZuulResponse(false)</code>令zuul过滤该请求，不对其进行路由，然后通过<code>ctx.setResponseStatusCode(401)</code>设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，通过<code>ctx.setResponseBody(body)</code>对返回body内容进行编辑等。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccessFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger log = LoggerFactory.getLogger(AccessFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class=\"line\">        HttpServletRequest request = ctx.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(String.format(<span class=\"string\">\"%s request to %s\"</span>, request.getMethod(), request.getRequestURL().toString()));</span><br><span class=\"line\"></span><br><span class=\"line\">        Object accessToken = request.getParameter(<span class=\"string\">\"accessToken\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(accessToken == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">\"access token is empty\"</span>);</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">401</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"access token ok\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021132307.png\" alt></p>\n<h3 id=\"核心过滤器\"><a href=\"#核心过滤器\" class=\"headerlink\" title=\"核心过滤器\"></a>核心过滤器</h3><p>在Spring Cloud Zuul中，为了让API网关组件可以更方便的上手使用，它在HTTP请求生命周期的各个阶段默认地实现了一批核心过滤器，它们会在API网关服务启动的时候被自动地加载和启用。定义于<code>org.springframework.cloud.netflix.zuul.filters</code>包下</p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021134033.png\" alt></p>\n<h4 id=\"pre过滤器\"><a href=\"#pre过滤器\" class=\"headerlink\" title=\"pre过滤器\"></a>pre过滤器</h4><ul>\n<li><code>ServletDetectionFilter</code>：它的执行顺序为-3，是最先被执行的过滤器。该过滤器总是会被执行，主要用来检测当前请求是通过Spring的DispatcherServlet处理运行，还是通过ZuulServlet来处理运行的。它的检测结果会以布尔类型保存在当前请求上下文的isDispatcherServletRequest参数中，这样在后续的过滤器中，我们就可以通过RequestUtils.isDispatcherServletRequest()和RequestUtils.isZuulServletRequest()方法判断它以实现做不同的处理。一般情况下，发送到API网关的外部请求都会被Spring的DispatcherServlet处理，除了通过/zuul/<em>路径访问的请求会绕过DispatcherServlet，被ZuulServlet处理，主要用来应对处理大文件上传的情况。另外，对于ZuulServlet的访问路径/zuul/</em>，我们可以通过zuul.servletPath参数来进行修改。</li>\n<li><code>Servlet30WrapperFilter</code>：它的执行顺序为-2，是第二个执行的过滤器。目前的实现会对所有请求生效，主要为了将原始的HttpServletRequest包装成Servlet30RequestWrapper对象。</li>\n<li><code>FormBodyWrapperFilter</code>：它的执行顺序为-1，是第三个执行的过滤器。该过滤器仅对两种类请求生效，第一类是Content-Type为application/x-www-form-urlencoded的请求，第二类是Content-Type为multipart/form-data并且是由Spring的DispatcherServlet处理的请求（用到了ServletDetectionFilter的处理结果）。而该过滤器的主要目的是将符合要求的请求体包装成FormBodyRequestWrapper对象。</li>\n<li><code>DebugFilter</code>：它的执行顺序为1，是第四个执行的过滤器。该过滤器会根据配置参数zuul.debug.request和请求中的debug参数来决定是否执行过滤器中的操作。而它的具体操作内容则是将当前的请求上下文中的debugRouting和debugRequest参数设置为true。由于在同一个请求的不同生命周期中，都可以访问到这两个值，所以我们在后续的各个过滤器中可以利用这两值来定义一些debug信息，这样当线上环境出现问题的时候，可以通过请求参数的方式来激活这些debug信息以帮助分析问题。另外，对于请求参数中的debug参数，我们也可以通过zuul.debug.parameter来进行自定义。</li>\n<li><code>PreDecorationFilter</code>：它的执行顺序为5，是pre阶段最后被执行的过滤器。该过滤器会判断当前请求上下文中是否存在forward.to和serviceId参数，如果都不存在，那么它就会执行具体过滤器的操作（如果有一个存在的话，说明当前请求已经被处理过了，因为这两个信息就是根据当前请求的路由信息加载进来的）。而它的具体操作内容就是为当前请求做一些预处理，比如：进行路由规则的匹配、在请求上下文中设置该请求的基本信息以及将路由匹配结果等一些设置信息等，这些信息将是后续过滤器进行处理的重要依据，我们可以通过RequestContext.getCurrentContext()来访问这些信息。另外，我们还可以在该实现中找到一些对HTTP头请求进行处理的逻辑，其中包含了一些耳熟能详的头域，比如：X-Forwarded-Host、X-Forwarded-Port。另外，对于这些头域的记录是通过zuul.addProxyHeaders参数进行控制的，而这个参数默认值为true，所以Zuul在请求跳转时默认地会为请求增加X-Forwarded-*头域，包括：X-Forwarded-Host、X-Forwarded-Port、X-Forwarded-For、X-Forwarded-Prefix、X-Forwarded-Proto。我们也可以通过设置zuul.addProxyHeaders=false关闭对这些头域的添加动作。</li>\n</ul>\n<blockquote>\n<p><a href=\"http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/\" target=\"_blank\" rel=\"noopener\">《Spring Cloud实战小贴士：Zuul处理Cookie和重定向》</a> 一文中提到的加载敏感头信息加入到忽略头信息的操作调用就在PreDecorationFilter过滤器中实现。</p>\n</blockquote>\n<h4 id=\"route过滤器\"><a href=\"#route过滤器\" class=\"headerlink\" title=\"route过滤器\"></a>route过滤器</h4><ul>\n<li>RibbonRoutingFilter：它的执行顺序为10，是route阶段第一个执行的过滤器。该过滤器只对请求上下文中存在serviceId参数的请求进行处理，即只对通过serviceId配置路由规则的请求生效。而该过滤器的执行逻辑就是面向服务路由的核心，它通过使用Ribbon和Hystrix来向服务实例发起请求，并将服务实例的请求结果返回。</li>\n<li>SimpleHostRoutingFilter：它的执行顺序为100，是route阶段第二个执行的过滤器。该过滤器只对请求上下文中存在routeHost参数的请求进行处理，即只对通过url配置路由规则的请求生效。而该过滤器的执行逻辑就是直接向routeHost参数的物理地址发起请求，从源码中我们可以知道该请求是直接通过httpclient包实现的，而没有使用Hystrix命令进行包装，所以这类请求并没有线程隔离和断路器的保护。</li>\n<li>SendForwardFilter：它的执行顺序为500，是route阶段第三个执行的过滤器。该过滤器只对请求上下文中存在forward.to参数的请求进行处理，即用来处理路由规则中的forward本地跳转配置。</li>\n</ul>\n<h4 id=\"post过滤器\"><a href=\"#post过滤器\" class=\"headerlink\" title=\"post过滤器\"></a>post过滤器</h4><ul>\n<li>SendErrorFilter：它的执行顺序为0，是post阶段第一个执行的过滤器。该过滤器仅在请求上下文中包含error.status_code参数（由之前执行的过滤器设置的错误编码）并且还没有被该过滤器处理过的时候执行。而该过滤器的具体逻辑就是利用请求上下文中的错误信息来组织成一个forward到API网关/error错误端点的请求来产生错误响应。</li>\n<li>SendResponseFilter：它的执行顺序为1000，是post阶段最后执行的过滤器。该过滤器会检查请求上下文中是否包含请求响应相关的头信息、响应数据流或是响应体，只有在包含它们其中一个的时候就会执行处理逻辑。而该过滤器的处理逻辑就是利用请求上下文的响应信息来组织需要发送回客户端的响应内容。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191021133625.png\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://blog.didispace.com/spring-cloud-source-zuul/\" target=\"_blank\" rel=\"noopener\">Spring Cloud 源码分析（四）Zuul：核心过滤器</a></li>\n<li><a href=\"http://blog.didispace.com/spring-cloud-learning/\" target=\"_blank\" rel=\"noopener\">Spring Cloud Netflix套件</a></li>\n</ul>"},{"title":"初识ELK日志分析系统","date":"2019-10-27T13:38:07.000Z","_content":"\n\n\n在上一家公司，服务器比较多，加上日志量又大，在实际过程中排查日志和定位问题几乎花费了大部分时间。新公司使用微服务架构，利用ELK搭建日志分析系统，于是网上搜集资料，开始了填坑之旅。。。最终本地搭建Filebeat-->LogStash-->Kafka-->ES-->Kibana，感觉ELK确实强大，跟之前一台台grep及awk, 实在轻松太多\n\n总的来说就是服务本地的Filebeat监控本地的日志文件，然后将日志实时输出到输出端(可能是Logstash，ES，Kafka)，最终保存到ES中，Kibana连接ES进行日志的分析及查找\n\n<!--more-->\n\n\n\n[TOC]\n\n## ELK简介\n\nELK = Elasticsearch, Logstash, Kibana 是一套实时数据收集，存储，索引，检索，统计分析及可视化的解决方案。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。\n\n\n\n### 为什么用到ELK\n\n一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。\n\n一个完整的集中式日志系统，需要包含以下几个主要特点：\n\n- 收集－能够采集多种来源的日志数据\n- 传输－能够稳定的把日志数据传输到中央系统\n- 存储－如何存储日志数据\n- 分析－可以支持 UI 分析\n- 警告－能够提供错误报告，监控机制\n\nELK提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。目前主流的一种日志系统。\n\n\n\n### ELK\n\n**Elasticsearch**是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。\n\n**Logstash** 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。\n\n**Kibana** 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。\n\nFilebeat隶属于Beats。目前Beats包含四种工具：\n\n1. 1. Packetbeat（搜集网络流量数据）\n   2. Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）\n   3. Filebeat（搜集文件数据）\n   4. Winlogbeat（搜集 Windows 事件日志数据）\n\n### 官方文档\n\nFilebeat：\n\n[https://www.elastic.co/cn/products/beats/filebeat](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/beats/filebeat)\n[https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/beats/filebeat/5.6/index.html)\n\nLogstash：\n[https://www.elastic.co/cn/products/logstash](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/logstash)\n[https://www.elastic.co/guide/en/logstash/5.6/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/logstash/5.6/index.html)\n\nKibana:\n\n[https://www.elastic.co/cn/products/kibana](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/kibana)\n\n[https://www.elastic.co/guide/en/kibana/5.5/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/kibana/5.5/index.html)\n\nElasticsearch：\n[https://www.elastic.co/cn/products/elasticsearch](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/elasticsearch)\n[https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html)\n\nelasticsearch中文社区：\n[https://elasticsearch.cn/](https://link.zhihu.com/?target=https%3A//elasticsearch.cn/)\n\n\n\n## 安装搭建(简易版)\n\n**使用同一个版本号!!!**\n\n### Elasticsearch\n\n[下载地址](<https://www.elastic.co/cn/downloads/elasticsearch>)\n\n- Download and unzip Elasticsearch\n- Run bin/elasticsearch (or bin\\elasticsearch.bat on Windows)\n- Run curl http://localhost:9200/ or Invoke-RestMethod http://localhost:9200 with PowerShell\n\nElasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索\n\n**启动脚本**\n\n```shell\n#!/bin/bash\n\nexport JAVA_HOME=/data/service/jdk1.8.0_192\n/data/service/elasticsearch-7.4.0/bin/elasticsearch\n```\n\n\n\n### Logstach\n\n[下载地址](<https://www.elastic.co/cn/downloads/logstash>)\n\n- Download and unzip Logstash\n- Prepare a logstash.conf config file\n- Run `bin/logstash -f logstash.conf`\n\n\n\n```shell\n在 /usr/local 目录下解压：\ntar -zxvf  logstash-7.4.0.tar.gz\n进入解压后的目录：\ncd /usr/local/logstash-7.4.0/bin\n新增配置文件：\nvim logstash.conf\n增加：\ninput{\n    file{\n      path => [\"/var/log/*.log\"]\n    }\n}\noutput{\n   elasticsearch{\n       hosts => [\"127.0.0.1:9200\"]\n       index => \"logstash__log\"\n  }\n}\n```\n\n\n\n### Filebeat\n\n[下载地址]()\n\n- Download and unzip Filebeat\n- Edit the filebeat.yml configuration file\n- Start the daemon by running `sudo ./filebeat -e -c filebeat.yml`\n\n**修改filebeat.yml**\n\n- 输出到ES\n\n```yml\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - /data/log/path1/**/*.log\n  fields:\n    topic: log1-app\n- type: log\n  enabled: true\n  paths:\n    - /data/log/path-api-*/logstash.log\n  fields:\n    topic: microservice\n    \nfilebeat.config.modules:\n  # Glob pattern for configuration loading\n  path: ${path.config}/modules.d/*.yml\n\n  # Set to true to enable config reloading\n  reload.enabled: true\n\n  # Period on which files under path should be checked for changes\n  reload.period: 60s\n  \n  \n#-------------------------- Elasticsearch output ------------------------------\noutput.elasticsearch:\n hosts: [\"localhost:9200\"]  \n    \n```\n\n此处简单的将出口定义为ES，实际上可能是Logstash\n\n- 输出到Logstash\n\n```yml\n#----------------------------- Logstash output --------------------------------\noutput.logstash:\n  # The Logstash hosts\n  hosts: [\"localhost:5044\"]\n\n  # Optional SSL. By default is off.\n  # List of root certificates for HTTPS server verifications\n  #ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]\n\n  # Certificate for SSL client authentication\n  #ssl.certificate: \"/etc/pki/client/cert.pem\"\n\n  # Client Certificate Key\n  #ssl.key: \"/etc/pki/client/cert.key\"\n```\n\n\n\n启动\n\n```shell\n./filebeat -e -c filebeat.yml -d \"publish\"\n```\n\n\n\n### Kibana\n\n从6.0.0开始，Kibana 只支持64位操作系统。\n\nLinux64位包\n\n```shell\n# Linux\nwget https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz\nsha1sum kibana-6.0.0-linux-x86_64.tar.gz \ntar -xzf kibana-6.0.0-linux-x86_64.tar.gz\ncd kibana/ \n\n# windows\n下载zip包，解压缩\nhttps://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-windows-x86_64.zip\n\n# docker\ndocker pull docker.elastic.co/kibana/kibana:6.0.0\n\n# 启动Kibana\n./bin/kibana\n\n# 配置文件路径\n$KIBANA_HOME/config/kibana.yml\n```\n\n**配置Kibana**\n\nKibana 默认配置 `localhost:5601`, 配置文件路径: `$KIBANA_HOME/config/kibana.yml`\n\n```xml\nserver.host: \"x.x.x.x\"\nserver.port: 5601\nelasticsearch.url: \"http://x.x.x.x:9200\"\n```\n\n**访问**\n\n`http://YOURDOMAIN.com:5601`\n\n`localhost:5601/status` 来访问 Kibana 的服务器状态页，状态页展示了服务器资源使用情况和已安装插件列表。\n\n**启动脚本**\n\n```shell\n#!/bin/bash\n/data/service/kibana-7.4.0/bin/kibana -c /data/service/kibana-7.4.0/config/kibana.yml\n```\n\n\n\n**加载示例数据**\n\n- 下载、解压示例文件\n- 建立数据集映射\n\nshakespeare(最新7.4版本需要去掉doc节点)\n\n```shell\nPUT /shakespeare\n{\n \"mappings\": {\n  \"doc\": {\n   \"properties\": {\n    \"speaker\": {\"type\": \"keyword\"},\n    \"play_name\": {\"type\": \"keyword\"},\n    \"line_id\": {\"type\": \"integer\"},\n    \"speech_number\": {\"type\": \"integer\"}\n   }\n  }\n }\n}\n\n\nPUT /shakespeare\n{\n \"mappings\": {\n   \"properties\": {\n    \"speaker\": {\"type\": \"keyword\"},\n    \"play_name\": {\"type\": \"keyword\"},\n    \"line_id\": {\"type\": \"integer\"},\n    \"speech_number\": {\"type\": \"integer\"}\n   }\n  }\n}\n```\n\nlog\n\n```shell\nPUT /logstash-2015.05.18\n{\n  \"mappings\": {\n    \"log\": {\n      \"properties\": {\n        \"geo\": {\n          \"properties\": {\n            \"coordinates\": {\n              \"type\": \"geo_point\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n- 用 Elasticsearch bulk API 来加载数据集\n\n```shell\ncurl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/bank/account/_bulk?pretty' --data-binary @accounts.json\ncurl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/shakespeare/doc/_bulk?pretty' --data-binary @shakespeare_6.0.json\ncurl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/_bulk?pretty' --data-binary @logs.jsonl\n```\n\n- 验证\n\n```shell\nGET /_cat/indices?v\n```\n\n\n\n## 原理解析\n\n### FileBeat\n\n\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221832.png)\n\nFilebeat由两个主要组件组成：prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。\n\n**Harvester（收割机）：**负责读取单个文件内容。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到`close_inactive`（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）\n\n**Prospector（勘测者）：**负责管理Harvester并找到所有读取源\n\n```yml\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - - /apps/logs/*/info.log\n```\n\nProspector会找到/apps/logs/*目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。\n\n**Filebeat如何记录文件状态：**\n\n将文件状态记录在文件中（默认在/var/lib/filebeat/registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。\n\n**Filebeat如何保证事件至少被输出一次：**\n\nFilebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置`shutdown_timeout` 参数来设置关闭之前的等待事件回应的时间（默认禁用）。\n\n### Logstash\n\nLogstash事件处理有三个阶段：inputs → filters → outputs。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。\n\n作者：蛙课网\n\n链接：\n\n来源：知乎\n\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n**Input：输入数据到logstash。**\n\n一些常用的输入为：\n\nfile：从文件系统的文件中读取，类似于tail -f命令\n\nsyslog：在514端口上监听系统日志消息，并根据RFC3164标准进行解析\n\nredis：从redis service中读取\n\nbeats：从filebeat中读取\n\n**Filters：数据中间处理，对数据进行操作。**\n\n一些常用的过滤器为：\n\ngrok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。\n\n官方提供的grok表达式：[https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns](https://link.zhihu.com/?target=https%3A//github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns)\ngrok在线调试：[https://grokdebug.herokuapp.com/](https://link.zhihu.com/?target=https%3A//grokdebug.herokuapp.com/)\n\nmutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。\n\ndrop：丢弃一部分events不进行处理。\n\nclone：拷贝 event，这个过程中也可以添加或移除字段。\n\ngeoip：添加地理信息(为前台kibana图形化展示使用)\n\n**Outputs：outputs是logstash处理管道的最末端组件。**一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。\n\n一些常见的outputs为：\n\nelasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。\n\nfile：将event数据保存到文件中。\n\ngraphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。\n\n**Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置**。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。\n\n\n\n### Elasticsearch\n\n\n\n### Kibana\n\nKibana 是一款开源的数据分析和可视化平台，可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。\n\n\n\n## ELK架构\n\n**架构一**\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221500.png)\n\n\n\n这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。\n\n此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web方便的对日志查询，并根据数据生成报表。\n\n**架构二**\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221635.png)\n\n此种架构引入了消息队列机制，位于各个节点上的Logstash Agent（FileBeat）（先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。\n\n\n\n## SpringBoot项目集成\n\n引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>com.ctrip.framework.apollo</groupId>\n    <artifactId>apollo-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>net.logstash.logback</groupId>\n    <artifactId>logstash-logback-encoder</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-core</artifactId>\n    <version>${logback.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>${slf4j.version}</version>\n</dependency>\n\n```\n\n启动类\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableApolloConfig\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n```\n\nlogback\n\n```xml\n\n  <property scope=\"context\" name=\"logPath4Context\" value=\"${loggerRoot}/${loggerAppName}\"/>\n  <property scope=\"context\" name=\"logPattern4Context\" value=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] - %level - %logger{10} - ${loggerAppName} - %class[%line] - %X{X-B3-TraceId} - %X{X-B3-SpanId} - %thread - %msg%n\"/>\n  <property scope=\"context\" name=\"loggerLevel4Context\" value=\"${logLevel}}\"/>\n\n\n  <appender name=\"HELLO-APPENDER\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    <file>${logPath4Context}/application.log</file>\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n      <fileNamePattern>${logPath4Context}/archive/hello.log.%d{yyyyMMdd}.gz</fileNamePattern>\n      <maxHistory>7</maxHistory>\n    </rollingPolicy>\n    <encoder>\n      <pattern>${logPattern4Context}</pattern>\n      <charset>UTF-8</charset>\n    </encoder>\n  </appender>\n\n    <!--  logstash  -->\n    <appender name=\"LOGSTASH-APPENDER\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${logPath4Context}/logstash.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>${logPath4Context}/archive/logstash.log.%d{yyyyMMddHH}.gz</fileNamePattern>\n            <maxHistory>72</maxHistory>\n        </rollingPolicy>\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n            <includeContext>false</includeContext>\n            <customFields>{\"app_name\":\"${loggerAppName}\"}</customFields>\n        </encoder>\n    </appender>\n\n\n  <logger name=\"HELLO-LOGGER\" additivity=\"false\">\n    <level value=\"${loggerLevel4Context}\"/>\n    <appender-ref ref=\"HELLO-APPENDER\" />\n    <appender-ref ref=\"ERROR-APPENDER\" />\n    <appender-ref ref=\"LOGSTASH-APPENDER\"/>\n  </logger>\n\n\n```\n\n\n\n\n\n## 参考文章\n\n- [Kibana 用户手册(中文)](<https://www.elastic.co/guide/cn/kibana/current/index.html>)\n- [Elasticsearch权威指南](<https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html>)\n- [ELK搭建全过程](<https://blog.csdn.net/tanqian351/article/details/83827583>)\n- [ES系列十八、FileBeat发送日志到logstash、ES、多个output过滤配置](https://www.cnblogs.com/wangzhuxing/p/9678578.html)\n- [ELK可以干什么呢？](https://www.zhihu.com/question/338932215/answer/777380560)\n- [ELK7.4+filebeat+Redis分析nginx服务访问日志](<https://blog.csdn.net/weixin_44766368/article/details/102550216>)\n\n","source":"_posts/20191027-初识ELK日志分析系统.md","raw":"---\ntitle: 初识ELK日志分析系统\ndate: 2019-10-27 21:38:07\ntags: SpringCloud，ELK\ncategories:\n - 技术\n - 微服务\n - 日志分析\n---\n\n\n\n在上一家公司，服务器比较多，加上日志量又大，在实际过程中排查日志和定位问题几乎花费了大部分时间。新公司使用微服务架构，利用ELK搭建日志分析系统，于是网上搜集资料，开始了填坑之旅。。。最终本地搭建Filebeat-->LogStash-->Kafka-->ES-->Kibana，感觉ELK确实强大，跟之前一台台grep及awk, 实在轻松太多\n\n总的来说就是服务本地的Filebeat监控本地的日志文件，然后将日志实时输出到输出端(可能是Logstash，ES，Kafka)，最终保存到ES中，Kibana连接ES进行日志的分析及查找\n\n<!--more-->\n\n\n\n[TOC]\n\n## ELK简介\n\nELK = Elasticsearch, Logstash, Kibana 是一套实时数据收集，存储，索引，检索，统计分析及可视化的解决方案。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。\n\n\n\n### 为什么用到ELK\n\n一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。\n\n一个完整的集中式日志系统，需要包含以下几个主要特点：\n\n- 收集－能够采集多种来源的日志数据\n- 传输－能够稳定的把日志数据传输到中央系统\n- 存储－如何存储日志数据\n- 分析－可以支持 UI 分析\n- 警告－能够提供错误报告，监控机制\n\nELK提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。目前主流的一种日志系统。\n\n\n\n### ELK\n\n**Elasticsearch**是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。\n\n**Logstash** 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。\n\n**Kibana** 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。\n\nFilebeat隶属于Beats。目前Beats包含四种工具：\n\n1. 1. Packetbeat（搜集网络流量数据）\n   2. Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）\n   3. Filebeat（搜集文件数据）\n   4. Winlogbeat（搜集 Windows 事件日志数据）\n\n### 官方文档\n\nFilebeat：\n\n[https://www.elastic.co/cn/products/beats/filebeat](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/beats/filebeat)\n[https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/beats/filebeat/5.6/index.html)\n\nLogstash：\n[https://www.elastic.co/cn/products/logstash](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/logstash)\n[https://www.elastic.co/guide/en/logstash/5.6/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/logstash/5.6/index.html)\n\nKibana:\n\n[https://www.elastic.co/cn/products/kibana](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/kibana)\n\n[https://www.elastic.co/guide/en/kibana/5.5/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/kibana/5.5/index.html)\n\nElasticsearch：\n[https://www.elastic.co/cn/products/elasticsearch](https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/elasticsearch)\n[https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html](https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html)\n\nelasticsearch中文社区：\n[https://elasticsearch.cn/](https://link.zhihu.com/?target=https%3A//elasticsearch.cn/)\n\n\n\n## 安装搭建(简易版)\n\n**使用同一个版本号!!!**\n\n### Elasticsearch\n\n[下载地址](<https://www.elastic.co/cn/downloads/elasticsearch>)\n\n- Download and unzip Elasticsearch\n- Run bin/elasticsearch (or bin\\elasticsearch.bat on Windows)\n- Run curl http://localhost:9200/ or Invoke-RestMethod http://localhost:9200 with PowerShell\n\nElasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索\n\n**启动脚本**\n\n```shell\n#!/bin/bash\n\nexport JAVA_HOME=/data/service/jdk1.8.0_192\n/data/service/elasticsearch-7.4.0/bin/elasticsearch\n```\n\n\n\n### Logstach\n\n[下载地址](<https://www.elastic.co/cn/downloads/logstash>)\n\n- Download and unzip Logstash\n- Prepare a logstash.conf config file\n- Run `bin/logstash -f logstash.conf`\n\n\n\n```shell\n在 /usr/local 目录下解压：\ntar -zxvf  logstash-7.4.0.tar.gz\n进入解压后的目录：\ncd /usr/local/logstash-7.4.0/bin\n新增配置文件：\nvim logstash.conf\n增加：\ninput{\n    file{\n      path => [\"/var/log/*.log\"]\n    }\n}\noutput{\n   elasticsearch{\n       hosts => [\"127.0.0.1:9200\"]\n       index => \"logstash__log\"\n  }\n}\n```\n\n\n\n### Filebeat\n\n[下载地址]()\n\n- Download and unzip Filebeat\n- Edit the filebeat.yml configuration file\n- Start the daemon by running `sudo ./filebeat -e -c filebeat.yml`\n\n**修改filebeat.yml**\n\n- 输出到ES\n\n```yml\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - /data/log/path1/**/*.log\n  fields:\n    topic: log1-app\n- type: log\n  enabled: true\n  paths:\n    - /data/log/path-api-*/logstash.log\n  fields:\n    topic: microservice\n    \nfilebeat.config.modules:\n  # Glob pattern for configuration loading\n  path: ${path.config}/modules.d/*.yml\n\n  # Set to true to enable config reloading\n  reload.enabled: true\n\n  # Period on which files under path should be checked for changes\n  reload.period: 60s\n  \n  \n#-------------------------- Elasticsearch output ------------------------------\noutput.elasticsearch:\n hosts: [\"localhost:9200\"]  \n    \n```\n\n此处简单的将出口定义为ES，实际上可能是Logstash\n\n- 输出到Logstash\n\n```yml\n#----------------------------- Logstash output --------------------------------\noutput.logstash:\n  # The Logstash hosts\n  hosts: [\"localhost:5044\"]\n\n  # Optional SSL. By default is off.\n  # List of root certificates for HTTPS server verifications\n  #ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]\n\n  # Certificate for SSL client authentication\n  #ssl.certificate: \"/etc/pki/client/cert.pem\"\n\n  # Client Certificate Key\n  #ssl.key: \"/etc/pki/client/cert.key\"\n```\n\n\n\n启动\n\n```shell\n./filebeat -e -c filebeat.yml -d \"publish\"\n```\n\n\n\n### Kibana\n\n从6.0.0开始，Kibana 只支持64位操作系统。\n\nLinux64位包\n\n```shell\n# Linux\nwget https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz\nsha1sum kibana-6.0.0-linux-x86_64.tar.gz \ntar -xzf kibana-6.0.0-linux-x86_64.tar.gz\ncd kibana/ \n\n# windows\n下载zip包，解压缩\nhttps://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-windows-x86_64.zip\n\n# docker\ndocker pull docker.elastic.co/kibana/kibana:6.0.0\n\n# 启动Kibana\n./bin/kibana\n\n# 配置文件路径\n$KIBANA_HOME/config/kibana.yml\n```\n\n**配置Kibana**\n\nKibana 默认配置 `localhost:5601`, 配置文件路径: `$KIBANA_HOME/config/kibana.yml`\n\n```xml\nserver.host: \"x.x.x.x\"\nserver.port: 5601\nelasticsearch.url: \"http://x.x.x.x:9200\"\n```\n\n**访问**\n\n`http://YOURDOMAIN.com:5601`\n\n`localhost:5601/status` 来访问 Kibana 的服务器状态页，状态页展示了服务器资源使用情况和已安装插件列表。\n\n**启动脚本**\n\n```shell\n#!/bin/bash\n/data/service/kibana-7.4.0/bin/kibana -c /data/service/kibana-7.4.0/config/kibana.yml\n```\n\n\n\n**加载示例数据**\n\n- 下载、解压示例文件\n- 建立数据集映射\n\nshakespeare(最新7.4版本需要去掉doc节点)\n\n```shell\nPUT /shakespeare\n{\n \"mappings\": {\n  \"doc\": {\n   \"properties\": {\n    \"speaker\": {\"type\": \"keyword\"},\n    \"play_name\": {\"type\": \"keyword\"},\n    \"line_id\": {\"type\": \"integer\"},\n    \"speech_number\": {\"type\": \"integer\"}\n   }\n  }\n }\n}\n\n\nPUT /shakespeare\n{\n \"mappings\": {\n   \"properties\": {\n    \"speaker\": {\"type\": \"keyword\"},\n    \"play_name\": {\"type\": \"keyword\"},\n    \"line_id\": {\"type\": \"integer\"},\n    \"speech_number\": {\"type\": \"integer\"}\n   }\n  }\n}\n```\n\nlog\n\n```shell\nPUT /logstash-2015.05.18\n{\n  \"mappings\": {\n    \"log\": {\n      \"properties\": {\n        \"geo\": {\n          \"properties\": {\n            \"coordinates\": {\n              \"type\": \"geo_point\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n- 用 Elasticsearch bulk API 来加载数据集\n\n```shell\ncurl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/bank/account/_bulk?pretty' --data-binary @accounts.json\ncurl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/shakespeare/doc/_bulk?pretty' --data-binary @shakespeare_6.0.json\ncurl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/_bulk?pretty' --data-binary @logs.jsonl\n```\n\n- 验证\n\n```shell\nGET /_cat/indices?v\n```\n\n\n\n## 原理解析\n\n### FileBeat\n\n\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221832.png)\n\nFilebeat由两个主要组件组成：prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。\n\n**Harvester（收割机）：**负责读取单个文件内容。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到`close_inactive`（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）\n\n**Prospector（勘测者）：**负责管理Harvester并找到所有读取源\n\n```yml\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - - /apps/logs/*/info.log\n```\n\nProspector会找到/apps/logs/*目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。\n\n**Filebeat如何记录文件状态：**\n\n将文件状态记录在文件中（默认在/var/lib/filebeat/registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。\n\n**Filebeat如何保证事件至少被输出一次：**\n\nFilebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置`shutdown_timeout` 参数来设置关闭之前的等待事件回应的时间（默认禁用）。\n\n### Logstash\n\nLogstash事件处理有三个阶段：inputs → filters → outputs。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。\n\n作者：蛙课网\n\n链接：\n\n来源：知乎\n\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n**Input：输入数据到logstash。**\n\n一些常用的输入为：\n\nfile：从文件系统的文件中读取，类似于tail -f命令\n\nsyslog：在514端口上监听系统日志消息，并根据RFC3164标准进行解析\n\nredis：从redis service中读取\n\nbeats：从filebeat中读取\n\n**Filters：数据中间处理，对数据进行操作。**\n\n一些常用的过滤器为：\n\ngrok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。\n\n官方提供的grok表达式：[https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns](https://link.zhihu.com/?target=https%3A//github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns)\ngrok在线调试：[https://grokdebug.herokuapp.com/](https://link.zhihu.com/?target=https%3A//grokdebug.herokuapp.com/)\n\nmutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。\n\ndrop：丢弃一部分events不进行处理。\n\nclone：拷贝 event，这个过程中也可以添加或移除字段。\n\ngeoip：添加地理信息(为前台kibana图形化展示使用)\n\n**Outputs：outputs是logstash处理管道的最末端组件。**一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。\n\n一些常见的outputs为：\n\nelasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。\n\nfile：将event数据保存到文件中。\n\ngraphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。\n\n**Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置**。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。\n\n\n\n### Elasticsearch\n\n\n\n### Kibana\n\nKibana 是一款开源的数据分析和可视化平台，可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。\n\n\n\n## ELK架构\n\n**架构一**\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221500.png)\n\n\n\n这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。\n\n此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web方便的对日志查询，并根据数据生成报表。\n\n**架构二**\n\n![](https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221635.png)\n\n此种架构引入了消息队列机制，位于各个节点上的Logstash Agent（FileBeat）（先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。\n\n\n\n## SpringBoot项目集成\n\n引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>com.ctrip.framework.apollo</groupId>\n    <artifactId>apollo-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>net.logstash.logback</groupId>\n    <artifactId>logstash-logback-encoder</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-core</artifactId>\n    <version>${logback.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>${slf4j.version}</version>\n</dependency>\n\n```\n\n启动类\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableApolloConfig\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n```\n\nlogback\n\n```xml\n\n  <property scope=\"context\" name=\"logPath4Context\" value=\"${loggerRoot}/${loggerAppName}\"/>\n  <property scope=\"context\" name=\"logPattern4Context\" value=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] - %level - %logger{10} - ${loggerAppName} - %class[%line] - %X{X-B3-TraceId} - %X{X-B3-SpanId} - %thread - %msg%n\"/>\n  <property scope=\"context\" name=\"loggerLevel4Context\" value=\"${logLevel}}\"/>\n\n\n  <appender name=\"HELLO-APPENDER\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    <file>${logPath4Context}/application.log</file>\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n      <fileNamePattern>${logPath4Context}/archive/hello.log.%d{yyyyMMdd}.gz</fileNamePattern>\n      <maxHistory>7</maxHistory>\n    </rollingPolicy>\n    <encoder>\n      <pattern>${logPattern4Context}</pattern>\n      <charset>UTF-8</charset>\n    </encoder>\n  </appender>\n\n    <!--  logstash  -->\n    <appender name=\"LOGSTASH-APPENDER\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${logPath4Context}/logstash.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>${logPath4Context}/archive/logstash.log.%d{yyyyMMddHH}.gz</fileNamePattern>\n            <maxHistory>72</maxHistory>\n        </rollingPolicy>\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n            <includeContext>false</includeContext>\n            <customFields>{\"app_name\":\"${loggerAppName}\"}</customFields>\n        </encoder>\n    </appender>\n\n\n  <logger name=\"HELLO-LOGGER\" additivity=\"false\">\n    <level value=\"${loggerLevel4Context}\"/>\n    <appender-ref ref=\"HELLO-APPENDER\" />\n    <appender-ref ref=\"ERROR-APPENDER\" />\n    <appender-ref ref=\"LOGSTASH-APPENDER\"/>\n  </logger>\n\n\n```\n\n\n\n\n\n## 参考文章\n\n- [Kibana 用户手册(中文)](<https://www.elastic.co/guide/cn/kibana/current/index.html>)\n- [Elasticsearch权威指南](<https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html>)\n- [ELK搭建全过程](<https://blog.csdn.net/tanqian351/article/details/83827583>)\n- [ES系列十八、FileBeat发送日志到logstash、ES、多个output过滤配置](https://www.cnblogs.com/wangzhuxing/p/9678578.html)\n- [ELK可以干什么呢？](https://www.zhihu.com/question/338932215/answer/777380560)\n- [ELK7.4+filebeat+Redis分析nginx服务访问日志](<https://blog.csdn.net/weixin_44766368/article/details/102550216>)\n\n","slug":"初识ELK日志分析系统","published":1,"updated":"2019-10-27T13:49:49.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3rfxclh000nd4kpr2250dcj","content":"<p>在上一家公司，服务器比较多，加上日志量又大，在实际过程中排查日志和定位问题几乎花费了大部分时间。新公司使用微服务架构，利用ELK搭建日志分析系统，于是网上搜集资料，开始了填坑之旅。。。最终本地搭建Filebeat–&gt;LogStash–&gt;Kafka–&gt;ES–&gt;Kibana，感觉ELK确实强大，跟之前一台台grep及awk, 实在轻松太多</p>\n<p>总的来说就是服务本地的Filebeat监控本地的日志文件，然后将日志实时输出到输出端(可能是Logstash，ES，Kafka)，最终保存到ES中，Kibana连接ES进行日志的分析及查找</p>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"ELK简介\"><a href=\"#ELK简介\" class=\"headerlink\" title=\"ELK简介\"></a>ELK简介</h2><p>ELK = Elasticsearch, Logstash, Kibana 是一套实时数据收集，存储，索引，检索，统计分析及可视化的解决方案。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p>\n<h3 id=\"为什么用到ELK\"><a href=\"#为什么用到ELK\" class=\"headerlink\" title=\"为什么用到ELK\"></a>为什么用到ELK</h3><p>一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。</p>\n<p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p>\n<ul>\n<li>收集－能够采集多种来源的日志数据</li>\n<li>传输－能够稳定的把日志数据传输到中央系统</li>\n<li>存储－如何存储日志数据</li>\n<li>分析－可以支持 UI 分析</li>\n<li>警告－能够提供错误报告，监控机制</li>\n</ul>\n<p>ELK提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。目前主流的一种日志系统。</p>\n<h3 id=\"ELK\"><a href=\"#ELK\" class=\"headerlink\" title=\"ELK\"></a>ELK</h3><p><strong>Elasticsearch</strong>是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p>\n<p><strong>Logstash</strong> 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p>\n<p><strong>Kibana</strong> 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p>\n<p>Filebeat隶属于Beats。目前Beats包含四种工具：</p>\n<ol>\n<li><ol>\n<li>Packetbeat（搜集网络流量数据）</li>\n<li>Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li>\n<li>Filebeat（搜集文件数据）</li>\n<li>Winlogbeat（搜集 Windows 事件日志数据）</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p>Filebeat：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/beats/filebeat\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/beats/filebeat</a><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/beats/filebeat/5.6/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html</a></p>\n<p>Logstash：<br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/logstash\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/logstash</a><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/logstash/5.6/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/5.6/index.html</a></p>\n<p>Kibana:</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/kibana\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/kibana</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/kibana/5.5/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/kibana/5.5/index.html</a></p>\n<p>Elasticsearch：<br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/elasticsearch</a><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html</a></p>\n<p>elasticsearch中文社区：<br><a href=\"https://link.zhihu.com/?target=https%3A//elasticsearch.cn/\" target=\"_blank\" rel=\"noopener\">https://elasticsearch.cn/</a></p>\n<h2 id=\"安装搭建-简易版\"><a href=\"#安装搭建-简易版\" class=\"headerlink\" title=\"安装搭建(简易版)\"></a>安装搭建(简易版)</h2><p><strong>使用同一个版本号!!!</strong></p>\n<h3 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h3><p><a href=\"https://www.elastic.co/cn/downloads/elasticsearch\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<ul>\n<li>Download and unzip Elasticsearch</li>\n<li>Run bin/elasticsearch (or bin\\elasticsearch.bat on Windows)</li>\n<li>Run curl <a href=\"http://localhost:9200/\" target=\"_blank\" rel=\"noopener\">http://localhost:9200/</a> or Invoke-RestMethod <a href=\"http://localhost:9200\" target=\"_blank\" rel=\"noopener\">http://localhost:9200</a> with PowerShell</li>\n</ul>\n<p>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索</p>\n<p><strong>启动脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=/data/service/jdk1.8.0_192</span><br><span class=\"line\">/data/service/elasticsearch-7.4.0/bin/elasticsearch</span><br></pre></td></tr></table></figure>\n<h3 id=\"Logstach\"><a href=\"#Logstach\" class=\"headerlink\" title=\"Logstach\"></a>Logstach</h3><p><a href=\"https://www.elastic.co/cn/downloads/logstash\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<ul>\n<li>Download and unzip Logstash</li>\n<li>Prepare a logstash.conf config file</li>\n<li>Run <code>bin/logstash -f logstash.conf</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 /usr/local 目录下解压：</span><br><span class=\"line\">tar -zxvf  logstash-7.4.0.tar.gz</span><br><span class=\"line\">进入解压后的目录：</span><br><span class=\"line\">cd /usr/local/logstash-7.4.0/bin</span><br><span class=\"line\">新增配置文件：</span><br><span class=\"line\">vim logstash.conf</span><br><span class=\"line\">增加：</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">    file&#123;</span><br><span class=\"line\">      path =&gt; [\"/var/log/*.log\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output&#123;</span><br><span class=\"line\">   elasticsearch&#123;</span><br><span class=\"line\">       hosts =&gt; [\"127.0.0.1:9200\"]</span><br><span class=\"line\">       index =&gt; \"logstash__log\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h3><p><a href>下载地址</a></p>\n<ul>\n<li>Download and unzip Filebeat</li>\n<li>Edit the filebeat.yml configuration file</li>\n<li>Start the daemon by running <code>sudo ./filebeat -e -c filebeat.yml</code></li>\n</ul>\n<p><strong>修改filebeat.yml</strong></p>\n<ul>\n<li>输出到ES</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">filebeat.inputs:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  paths:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/log/path1/**/*.log</span></span><br><span class=\"line\"><span class=\"attr\">  fields:</span></span><br><span class=\"line\"><span class=\"attr\">    topic:</span> <span class=\"string\">log1-app</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  paths:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/log/path-api-*/logstash.log</span></span><br><span class=\"line\"><span class=\"attr\">  fields:</span></span><br><span class=\"line\"><span class=\"attr\">    topic:</span> <span class=\"string\">microservice</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">filebeat.config.modules:</span></span><br><span class=\"line\">  <span class=\"comment\"># Glob pattern for configuration loading</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Set to true to enable config reloading</span></span><br><span class=\"line\">  <span class=\"string\">reload.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Period on which files under path should be checked for changes</span></span><br><span class=\"line\">  <span class=\"string\">reload.period:</span> <span class=\"number\">60</span><span class=\"string\">s</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#-------------------------- Elasticsearch output ------------------------------</span></span><br><span class=\"line\"><span class=\"string\">output.elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\"> hosts:</span> <span class=\"string\">[\"localhost:9200\"]</span></span><br></pre></td></tr></table></figure>\n<p>此处简单的将出口定义为ES，实际上可能是Logstash</p>\n<ul>\n<li>输出到Logstash</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#----------------------------- Logstash output --------------------------------</span></span><br><span class=\"line\"><span class=\"string\">output.logstash:</span></span><br><span class=\"line\">  <span class=\"comment\"># The Logstash hosts</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"localhost:5044\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Optional SSL. By default is off.</span></span><br><span class=\"line\">  <span class=\"comment\"># List of root certificates for HTTPS server verifications</span></span><br><span class=\"line\">  <span class=\"comment\">#ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Certificate for SSL client authentication</span></span><br><span class=\"line\">  <span class=\"comment\">#ssl.certificate: \"/etc/pki/client/cert.pem\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Client Certificate Key</span></span><br><span class=\"line\">  <span class=\"comment\">#ssl.key: \"/etc/pki/client/cert.key\"</span></span><br></pre></td></tr></table></figure>\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./filebeat -e -c filebeat.yml -d \"publish\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h3><p>从6.0.0开始，Kibana 只支持64位操作系统。</p>\n<p>Linux64位包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Linux</span></span><br><span class=\"line\">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class=\"line\">sha1sum kibana-6.0.0-linux-x86_64.tar.gz </span><br><span class=\"line\">tar -xzf kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class=\"line\">cd kibana/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> windows</span></span><br><span class=\"line\">下载zip包，解压缩</span><br><span class=\"line\">https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-windows-x86_64.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker</span></span><br><span class=\"line\">docker pull docker.elastic.co/kibana/kibana:6.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Kibana</span></span><br><span class=\"line\">./bin/kibana</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置文件路径</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">KIBANA_HOME/config/kibana.yml</span></span><br></pre></td></tr></table></figure>\n<p><strong>配置Kibana</strong></p>\n<p>Kibana 默认配置 <code>localhost:5601</code>, 配置文件路径: <code>$KIBANA_HOME/config/kibana.yml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.host: \"x.x.x.x\"</span><br><span class=\"line\">server.port: 5601</span><br><span class=\"line\">elasticsearch.url: \"http://x.x.x.x:9200\"</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong></p>\n<p><code>http://YOURDOMAIN.com:5601</code></p>\n<p><code>localhost:5601/status</code> 来访问 Kibana 的服务器状态页，状态页展示了服务器资源使用情况和已安装插件列表。</p>\n<p><strong>启动脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/data/service/kibana-7.4.0/bin/kibana -c /data/service/kibana-7.4.0/config/kibana.yml</span><br></pre></td></tr></table></figure>\n<p><strong>加载示例数据</strong></p>\n<ul>\n<li>下载、解压示例文件</li>\n<li>建立数据集映射</li>\n</ul>\n<p>shakespeare(最新7.4版本需要去掉doc节点)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /shakespeare</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \"mappings\": &#123;</span><br><span class=\"line\">  \"doc\": &#123;</span><br><span class=\"line\">   \"properties\": &#123;</span><br><span class=\"line\">    \"speaker\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"play_name\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"line_id\": &#123;\"type\": \"integer\"&#125;,</span><br><span class=\"line\">    \"speech_number\": &#123;\"type\": \"integer\"&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PUT /shakespeare</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \"mappings\": &#123;</span><br><span class=\"line\">   \"properties\": &#123;</span><br><span class=\"line\">    \"speaker\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"play_name\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"line_id\": &#123;\"type\": \"integer\"&#125;,</span><br><span class=\"line\">    \"speech_number\": &#123;\"type\": \"integer\"&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /logstash-2015.05.18</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"mappings\": &#123;</span><br><span class=\"line\">    \"log\": &#123;</span><br><span class=\"line\">      \"properties\": &#123;</span><br><span class=\"line\">        \"geo\": &#123;</span><br><span class=\"line\">          \"properties\": &#123;</span><br><span class=\"line\">            \"coordinates\": &#123;</span><br><span class=\"line\">              \"type\": \"geo_point\"</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 Elasticsearch bulk API 来加载数据集</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/bank/account/_bulk?pretty' --data-binary @accounts.json</span><br><span class=\"line\">curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/shakespeare/doc/_bulk?pretty' --data-binary @shakespeare_6.0.json</span><br><span class=\"line\">curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/_bulk?pretty' --data-binary @logs.jsonl</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_cat/indices?v</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><h3 id=\"FileBeat\"><a href=\"#FileBeat\" class=\"headerlink\" title=\"FileBeat\"></a>FileBeat</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221832.png\" alt></p>\n<p>Filebeat由两个主要组件组成：prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。</p>\n<p><strong>Harvester（收割机）：</strong>负责读取单个文件内容。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到<code>close_inactive</code>（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）</p>\n<p><strong>Prospector（勘测者）：</strong>负责管理Harvester并找到所有读取源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">filebeat.inputs:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  paths:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"bullet\">-</span> <span class=\"string\">/apps/logs/*/info.log</span></span><br></pre></td></tr></table></figure>\n<p>Prospector会找到/apps/logs/*目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。</p>\n<p><strong>Filebeat如何记录文件状态：</strong></p>\n<p>将文件状态记录在文件中（默认在/var/lib/filebeat/registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。</p>\n<p><strong>Filebeat如何保证事件至少被输出一次：</strong></p>\n<p>Filebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置<code>shutdown_timeout</code> 参数来设置关闭之前的等待事件回应的时间（默认禁用）。</p>\n<h3 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h3><p>Logstash事件处理有三个阶段：inputs → filters → outputs。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。</p>\n<p>作者：蛙课网</p>\n<p>链接：</p>\n<p>来源：知乎</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p><strong>Input：输入数据到logstash。</strong></p>\n<p>一些常用的输入为：</p>\n<p>file：从文件系统的文件中读取，类似于tail -f命令</p>\n<p>syslog：在514端口上监听系统日志消息，并根据RFC3164标准进行解析</p>\n<p>redis：从redis service中读取</p>\n<p>beats：从filebeat中读取</p>\n<p><strong>Filters：数据中间处理，对数据进行操作。</strong></p>\n<p>一些常用的过滤器为：</p>\n<p>grok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。</p>\n<p>官方提供的grok表达式：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns\" target=\"_blank\" rel=\"noopener\">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a><br>grok在线调试：<a href=\"https://link.zhihu.com/?target=https%3A//grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://grokdebug.herokuapp.com/</a></p>\n<p>mutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。</p>\n<p>drop：丢弃一部分events不进行处理。</p>\n<p>clone：拷贝 event，这个过程中也可以添加或移除字段。</p>\n<p>geoip：添加地理信息(为前台kibana图形化展示使用)</p>\n<p><strong>Outputs：outputs是logstash处理管道的最末端组件。</strong>一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。</p>\n<p>一些常见的outputs为：</p>\n<p>elasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。</p>\n<p>file：将event数据保存到文件中。</p>\n<p>graphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。</p>\n<p><strong>Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置</strong>。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。</p>\n<h3 id=\"Elasticsearch-1\"><a href=\"#Elasticsearch-1\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h3><h3 id=\"Kibana-1\"><a href=\"#Kibana-1\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h3><p>Kibana 是一款开源的数据分析和可视化平台，可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。</p>\n<h2 id=\"ELK架构\"><a href=\"#ELK架构\" class=\"headerlink\" title=\"ELK架构\"></a>ELK架构</h2><p><strong>架构一</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221500.png\" alt></p>\n<p>这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。</p>\n<p>此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web方便的对日志查询，并根据数据生成报表。</p>\n<p><strong>架构二</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221635.png\" alt></p>\n<p>此种架构引入了消息队列机制，位于各个节点上的Logstash Agent（FileBeat）（先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。</p>\n<h2 id=\"SpringBoot项目集成\"><a href=\"#SpringBoot项目集成\" class=\"headerlink\" title=\"SpringBoot项目集成\"></a>SpringBoot项目集成</h2><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>apollo-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableApolloConfig</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>logback</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logPath4Context\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;loggerRoot&#125;/$&#123;loggerAppName&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logPattern4Context\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] - %level - %logger&#123;10&#125; - $&#123;loggerAppName&#125; - %class[%line] - %X&#123;X-B3-TraceId&#125; - %X&#123;X-B3-SpanId&#125; - %thread - %msg%n\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"loggerLevel4Context\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;logLevel&#125;&#125;\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HELLO-APPENDER\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;logPath4Context&#125;/application.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;logPath4Context&#125;/archive/hello.log.%d&#123;yyyyMMdd&#125;.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;logPattern4Context&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--  logstash  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH-APPENDER\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;logPath4Context&#125;/logstash.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;logPath4Context&#125;/archive/logstash.log.%d&#123;yyyyMMddHH&#125;.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>72<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.encoder.LogstashEncoder\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">includeContext</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">includeContext</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;loggerAppName&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HELLO-LOGGER\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;loggerLevel4Context&#125;\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"HELLO-APPENDER\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ERROR-APPENDER\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH-APPENDER\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.elastic.co/guide/cn/kibana/current/index.html\" target=\"_blank\" rel=\"noopener\">Kibana 用户手册(中文)</a></li>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch权威指南</a></li>\n<li><a href=\"https://blog.csdn.net/tanqian351/article/details/83827583\" target=\"_blank\" rel=\"noopener\">ELK搭建全过程</a></li>\n<li><a href=\"https://www.cnblogs.com/wangzhuxing/p/9678578.html\" target=\"_blank\" rel=\"noopener\">ES系列十八、FileBeat发送日志到logstash、ES、多个output过滤配置</a></li>\n<li><a href=\"https://www.zhihu.com/question/338932215/answer/777380560\" target=\"_blank\" rel=\"noopener\">ELK可以干什么呢？</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_44766368/article/details/102550216\" target=\"_blank\" rel=\"noopener\">ELK7.4+filebeat+Redis分析nginx服务访问日志</a></li>\n</ul>\n","site":{"data":{}},"length":12447,"excerpt":"<p>在上一家公司，服务器比较多，加上日志量又大，在实际过程中排查日志和定位问题几乎花费了大部分时间。新公司使用微服务架构，利用ELK搭建日志分析系统，于是网上搜集资料，开始了填坑之旅。。。最终本地搭建Filebeat–&gt;LogStash–&gt;Kafka–&gt;ES–&gt;Kibana，感觉ELK确实强大，跟之前一台台grep及awk, 实在轻松太多</p>\n<p>总的来说就是服务本地的Filebeat监控本地的日志文件，然后将日志实时输出到输出端(可能是Logstash，ES，Kafka)，最终保存到ES中，Kibana连接ES进行日志的分析及查找</p>","more":"<p>[TOC]</p>\n<h2 id=\"ELK简介\"><a href=\"#ELK简介\" class=\"headerlink\" title=\"ELK简介\"></a>ELK简介</h2><p>ELK = Elasticsearch, Logstash, Kibana 是一套实时数据收集，存储，索引，检索，统计分析及可视化的解决方案。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p>\n<h3 id=\"为什么用到ELK\"><a href=\"#为什么用到ELK\" class=\"headerlink\" title=\"为什么用到ELK\"></a>为什么用到ELK</h3><p>一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。</p>\n<p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p>\n<ul>\n<li>收集－能够采集多种来源的日志数据</li>\n<li>传输－能够稳定的把日志数据传输到中央系统</li>\n<li>存储－如何存储日志数据</li>\n<li>分析－可以支持 UI 分析</li>\n<li>警告－能够提供错误报告，监控机制</li>\n</ul>\n<p>ELK提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。目前主流的一种日志系统。</p>\n<h3 id=\"ELK\"><a href=\"#ELK\" class=\"headerlink\" title=\"ELK\"></a>ELK</h3><p><strong>Elasticsearch</strong>是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p>\n<p><strong>Logstash</strong> 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p>\n<p><strong>Kibana</strong> 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p>\n<p>Filebeat隶属于Beats。目前Beats包含四种工具：</p>\n<ol>\n<li><ol>\n<li>Packetbeat（搜集网络流量数据）</li>\n<li>Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li>\n<li>Filebeat（搜集文件数据）</li>\n<li>Winlogbeat（搜集 Windows 事件日志数据）</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h3><p>Filebeat：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/beats/filebeat\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/beats/filebeat</a><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/beats/filebeat/5.6/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html</a></p>\n<p>Logstash：<br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/logstash\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/logstash</a><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/logstash/5.6/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/5.6/index.html</a></p>\n<p>Kibana:</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/kibana\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/kibana</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/kibana/5.5/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/kibana/5.5/index.html</a></p>\n<p>Elasticsearch：<br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/products/elasticsearch</a><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html</a></p>\n<p>elasticsearch中文社区：<br><a href=\"https://link.zhihu.com/?target=https%3A//elasticsearch.cn/\" target=\"_blank\" rel=\"noopener\">https://elasticsearch.cn/</a></p>\n<h2 id=\"安装搭建-简易版\"><a href=\"#安装搭建-简易版\" class=\"headerlink\" title=\"安装搭建(简易版)\"></a>安装搭建(简易版)</h2><p><strong>使用同一个版本号!!!</strong></p>\n<h3 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h3><p><a href=\"https://www.elastic.co/cn/downloads/elasticsearch\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<ul>\n<li>Download and unzip Elasticsearch</li>\n<li>Run bin/elasticsearch (or bin\\elasticsearch.bat on Windows)</li>\n<li>Run curl <a href=\"http://localhost:9200/\" target=\"_blank\" rel=\"noopener\">http://localhost:9200/</a> or Invoke-RestMethod <a href=\"http://localhost:9200\" target=\"_blank\" rel=\"noopener\">http://localhost:9200</a> with PowerShell</li>\n</ul>\n<p>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索</p>\n<p><strong>启动脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=/data/service/jdk1.8.0_192</span><br><span class=\"line\">/data/service/elasticsearch-7.4.0/bin/elasticsearch</span><br></pre></td></tr></table></figure>\n<h3 id=\"Logstach\"><a href=\"#Logstach\" class=\"headerlink\" title=\"Logstach\"></a>Logstach</h3><p><a href=\"https://www.elastic.co/cn/downloads/logstash\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<ul>\n<li>Download and unzip Logstash</li>\n<li>Prepare a logstash.conf config file</li>\n<li>Run <code>bin/logstash -f logstash.conf</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 /usr/local 目录下解压：</span><br><span class=\"line\">tar -zxvf  logstash-7.4.0.tar.gz</span><br><span class=\"line\">进入解压后的目录：</span><br><span class=\"line\">cd /usr/local/logstash-7.4.0/bin</span><br><span class=\"line\">新增配置文件：</span><br><span class=\"line\">vim logstash.conf</span><br><span class=\"line\">增加：</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">    file&#123;</span><br><span class=\"line\">      path =&gt; [\"/var/log/*.log\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output&#123;</span><br><span class=\"line\">   elasticsearch&#123;</span><br><span class=\"line\">       hosts =&gt; [\"127.0.0.1:9200\"]</span><br><span class=\"line\">       index =&gt; \"logstash__log\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Filebeat\"><a href=\"#Filebeat\" class=\"headerlink\" title=\"Filebeat\"></a>Filebeat</h3><p><a href>下载地址</a></p>\n<ul>\n<li>Download and unzip Filebeat</li>\n<li>Edit the filebeat.yml configuration file</li>\n<li>Start the daemon by running <code>sudo ./filebeat -e -c filebeat.yml</code></li>\n</ul>\n<p><strong>修改filebeat.yml</strong></p>\n<ul>\n<li>输出到ES</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">filebeat.inputs:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  paths:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/log/path1/**/*.log</span></span><br><span class=\"line\"><span class=\"attr\">  fields:</span></span><br><span class=\"line\"><span class=\"attr\">    topic:</span> <span class=\"string\">log1-app</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  paths:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/data/log/path-api-*/logstash.log</span></span><br><span class=\"line\"><span class=\"attr\">  fields:</span></span><br><span class=\"line\"><span class=\"attr\">    topic:</span> <span class=\"string\">microservice</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">filebeat.config.modules:</span></span><br><span class=\"line\">  <span class=\"comment\"># Glob pattern for configuration loading</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Set to true to enable config reloading</span></span><br><span class=\"line\">  <span class=\"string\">reload.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Period on which files under path should be checked for changes</span></span><br><span class=\"line\">  <span class=\"string\">reload.period:</span> <span class=\"number\">60</span><span class=\"string\">s</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#-------------------------- Elasticsearch output ------------------------------</span></span><br><span class=\"line\"><span class=\"string\">output.elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\"> hosts:</span> <span class=\"string\">[\"localhost:9200\"]</span></span><br></pre></td></tr></table></figure>\n<p>此处简单的将出口定义为ES，实际上可能是Logstash</p>\n<ul>\n<li>输出到Logstash</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#----------------------------- Logstash output --------------------------------</span></span><br><span class=\"line\"><span class=\"string\">output.logstash:</span></span><br><span class=\"line\">  <span class=\"comment\"># The Logstash hosts</span></span><br><span class=\"line\"><span class=\"attr\">  hosts:</span> <span class=\"string\">[\"localhost:5044\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Optional SSL. By default is off.</span></span><br><span class=\"line\">  <span class=\"comment\"># List of root certificates for HTTPS server verifications</span></span><br><span class=\"line\">  <span class=\"comment\">#ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Certificate for SSL client authentication</span></span><br><span class=\"line\">  <span class=\"comment\">#ssl.certificate: \"/etc/pki/client/cert.pem\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Client Certificate Key</span></span><br><span class=\"line\">  <span class=\"comment\">#ssl.key: \"/etc/pki/client/cert.key\"</span></span><br></pre></td></tr></table></figure>\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./filebeat -e -c filebeat.yml -d \"publish\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h3><p>从6.0.0开始，Kibana 只支持64位操作系统。</p>\n<p>Linux64位包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Linux</span></span><br><span class=\"line\">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class=\"line\">sha1sum kibana-6.0.0-linux-x86_64.tar.gz </span><br><span class=\"line\">tar -xzf kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class=\"line\">cd kibana/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> windows</span></span><br><span class=\"line\">下载zip包，解压缩</span><br><span class=\"line\">https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-windows-x86_64.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker</span></span><br><span class=\"line\">docker pull docker.elastic.co/kibana/kibana:6.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Kibana</span></span><br><span class=\"line\">./bin/kibana</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置文件路径</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">KIBANA_HOME/config/kibana.yml</span></span><br></pre></td></tr></table></figure>\n<p><strong>配置Kibana</strong></p>\n<p>Kibana 默认配置 <code>localhost:5601</code>, 配置文件路径: <code>$KIBANA_HOME/config/kibana.yml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.host: \"x.x.x.x\"</span><br><span class=\"line\">server.port: 5601</span><br><span class=\"line\">elasticsearch.url: \"http://x.x.x.x:9200\"</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong></p>\n<p><code>http://YOURDOMAIN.com:5601</code></p>\n<p><code>localhost:5601/status</code> 来访问 Kibana 的服务器状态页，状态页展示了服务器资源使用情况和已安装插件列表。</p>\n<p><strong>启动脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/data/service/kibana-7.4.0/bin/kibana -c /data/service/kibana-7.4.0/config/kibana.yml</span><br></pre></td></tr></table></figure>\n<p><strong>加载示例数据</strong></p>\n<ul>\n<li>下载、解压示例文件</li>\n<li>建立数据集映射</li>\n</ul>\n<p>shakespeare(最新7.4版本需要去掉doc节点)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /shakespeare</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \"mappings\": &#123;</span><br><span class=\"line\">  \"doc\": &#123;</span><br><span class=\"line\">   \"properties\": &#123;</span><br><span class=\"line\">    \"speaker\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"play_name\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"line_id\": &#123;\"type\": \"integer\"&#125;,</span><br><span class=\"line\">    \"speech_number\": &#123;\"type\": \"integer\"&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PUT /shakespeare</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \"mappings\": &#123;</span><br><span class=\"line\">   \"properties\": &#123;</span><br><span class=\"line\">    \"speaker\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"play_name\": &#123;\"type\": \"keyword\"&#125;,</span><br><span class=\"line\">    \"line_id\": &#123;\"type\": \"integer\"&#125;,</span><br><span class=\"line\">    \"speech_number\": &#123;\"type\": \"integer\"&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>log</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /logstash-2015.05.18</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"mappings\": &#123;</span><br><span class=\"line\">    \"log\": &#123;</span><br><span class=\"line\">      \"properties\": &#123;</span><br><span class=\"line\">        \"geo\": &#123;</span><br><span class=\"line\">          \"properties\": &#123;</span><br><span class=\"line\">            \"coordinates\": &#123;</span><br><span class=\"line\">              \"type\": \"geo_point\"</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 Elasticsearch bulk API 来加载数据集</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/bank/account/_bulk?pretty' --data-binary @accounts.json</span><br><span class=\"line\">curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/shakespeare/doc/_bulk?pretty' --data-binary @shakespeare_6.0.json</span><br><span class=\"line\">curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/_bulk?pretty' --data-binary @logs.jsonl</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_cat/indices?v</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><h3 id=\"FileBeat\"><a href=\"#FileBeat\" class=\"headerlink\" title=\"FileBeat\"></a>FileBeat</h3><p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221832.png\" alt></p>\n<p>Filebeat由两个主要组件组成：prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。</p>\n<p><strong>Harvester（收割机）：</strong>负责读取单个文件内容。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到<code>close_inactive</code>（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）</p>\n<p><strong>Prospector（勘测者）：</strong>负责管理Harvester并找到所有读取源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">filebeat.inputs:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  paths:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"bullet\">-</span> <span class=\"string\">/apps/logs/*/info.log</span></span><br></pre></td></tr></table></figure>\n<p>Prospector会找到/apps/logs/*目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。</p>\n<p><strong>Filebeat如何记录文件状态：</strong></p>\n<p>将文件状态记录在文件中（默认在/var/lib/filebeat/registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。</p>\n<p><strong>Filebeat如何保证事件至少被输出一次：</strong></p>\n<p>Filebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置<code>shutdown_timeout</code> 参数来设置关闭之前的等待事件回应的时间（默认禁用）。</p>\n<h3 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h3><p>Logstash事件处理有三个阶段：inputs → filters → outputs。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。</p>\n<p>作者：蛙课网</p>\n<p>链接：</p>\n<p>来源：知乎</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p><strong>Input：输入数据到logstash。</strong></p>\n<p>一些常用的输入为：</p>\n<p>file：从文件系统的文件中读取，类似于tail -f命令</p>\n<p>syslog：在514端口上监听系统日志消息，并根据RFC3164标准进行解析</p>\n<p>redis：从redis service中读取</p>\n<p>beats：从filebeat中读取</p>\n<p><strong>Filters：数据中间处理，对数据进行操作。</strong></p>\n<p>一些常用的过滤器为：</p>\n<p>grok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。</p>\n<p>官方提供的grok表达式：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns\" target=\"_blank\" rel=\"noopener\">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a><br>grok在线调试：<a href=\"https://link.zhihu.com/?target=https%3A//grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://grokdebug.herokuapp.com/</a></p>\n<p>mutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。</p>\n<p>drop：丢弃一部分events不进行处理。</p>\n<p>clone：拷贝 event，这个过程中也可以添加或移除字段。</p>\n<p>geoip：添加地理信息(为前台kibana图形化展示使用)</p>\n<p><strong>Outputs：outputs是logstash处理管道的最末端组件。</strong>一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。</p>\n<p>一些常见的outputs为：</p>\n<p>elasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。</p>\n<p>file：将event数据保存到文件中。</p>\n<p>graphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。</p>\n<p><strong>Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置</strong>。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。</p>\n<h3 id=\"Elasticsearch-1\"><a href=\"#Elasticsearch-1\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h3><h3 id=\"Kibana-1\"><a href=\"#Kibana-1\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h3><p>Kibana 是一款开源的数据分析和可视化平台，可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。</p>\n<h2 id=\"ELK架构\"><a href=\"#ELK架构\" class=\"headerlink\" title=\"ELK架构\"></a>ELK架构</h2><p><strong>架构一</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221500.png\" alt></p>\n<p>这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。</p>\n<p>此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web方便的对日志查询，并根据数据生成报表。</p>\n<p><strong>架构二</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/hyman213/FigureBed/master/2019/10/20191024221635.png\" alt></p>\n<p>此种架构引入了消息队列机制，位于各个节点上的Logstash Agent（FileBeat）（先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。</p>\n<h2 id=\"SpringBoot项目集成\"><a href=\"#SpringBoot项目集成\" class=\"headerlink\" title=\"SpringBoot项目集成\"></a>SpringBoot项目集成</h2><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>apollo-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.logstash.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logstash-logback-encoder<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableApolloConfig</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>logback</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logPath4Context\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;loggerRoot&#125;/$&#123;loggerAppName&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logPattern4Context\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] - %level - %logger&#123;10&#125; - $&#123;loggerAppName&#125; - %class[%line] - %X&#123;X-B3-TraceId&#125; - %X&#123;X-B3-SpanId&#125; - %thread - %msg%n\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"loggerLevel4Context\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;logLevel&#125;&#125;\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HELLO-APPENDER\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;logPath4Context&#125;/application.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;logPath4Context&#125;/archive/hello.log.%d&#123;yyyyMMdd&#125;.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;logPattern4Context&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--  logstash  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH-APPENDER\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;logPath4Context&#125;/logstash.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;logPath4Context&#125;/archive/logstash.log.%d&#123;yyyyMMddHH&#125;.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>72<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net.logstash.logback.encoder.LogstashEncoder\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">includeContext</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">includeContext</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">customFields</span>&gt;</span>&#123;\"app_name\":\"$&#123;loggerAppName&#125;\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">customFields</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HELLO-LOGGER\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;loggerLevel4Context&#125;\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"HELLO-APPENDER\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ERROR-APPENDER\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"LOGSTASH-APPENDER\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.elastic.co/guide/cn/kibana/current/index.html\" target=\"_blank\" rel=\"noopener\">Kibana 用户手册(中文)</a></li>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch权威指南</a></li>\n<li><a href=\"https://blog.csdn.net/tanqian351/article/details/83827583\" target=\"_blank\" rel=\"noopener\">ELK搭建全过程</a></li>\n<li><a href=\"https://www.cnblogs.com/wangzhuxing/p/9678578.html\" target=\"_blank\" rel=\"noopener\">ES系列十八、FileBeat发送日志到logstash、ES、多个output过滤配置</a></li>\n<li><a href=\"https://www.zhihu.com/question/338932215/answer/777380560\" target=\"_blank\" rel=\"noopener\">ELK可以干什么呢？</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_44766368/article/details/102550216\" target=\"_blank\" rel=\"noopener\">ELK7.4+filebeat+Redis分析nginx服务访问日志</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3rfxckm0008d4kpl4883fo7","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclp000td4kpym9yooli"},{"post_id":"ck3rfxckm0008d4kpl4883fo7","category_id":"ck3rfxclb000ld4kpmi31ecup","_id":"ck3rfxclp000vd4kpm3qrw3u5"},{"post_id":"ck3rfxcju0002d4kpurvo7p97","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclt000xd4kpnjn7329v"},{"post_id":"ck3rfxcju0002d4kpurvo7p97","category_id":"ck3rfxclb000ld4kpmi31ecup","_id":"ck3rfxclt0010d4kp23r91vx0"},{"post_id":"ck3rfxckp0009d4kpac182d5q","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclx0012d4kpon4ue0c2"},{"post_id":"ck3rfxckp0009d4kpac182d5q","category_id":"ck3rfxclp000sd4kpsam5dbb2","_id":"ck3rfxclx0015d4kp0fcp8scx"},{"post_id":"ck3rfxckt000dd4kps5nmum4o","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxclx0017d4kpddeykner"},{"post_id":"ck3rfxckt000dd4kps5nmum4o","category_id":"ck3rfxclt000yd4kps7jtso4d","_id":"ck3rfxcm1001ad4kpe9mjtbh0"},{"post_id":"ck3rfxck80004d4kpp9hskq56","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm1001cd4kpyp8l22gx"},{"post_id":"ck3rfxck80004d4kpp9hskq56","category_id":"ck3rfxclx0013d4kpkcwbh9mj","_id":"ck3rfxcm1001ed4kp4tdhvmp5"},{"post_id":"ck3rfxcl1000fd4kpewpce2z0","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm1001gd4kp6846kvfr"},{"post_id":"ck3rfxcl1000fd4kpewpce2z0","category_id":"ck3rfxclx0018d4kpptw5ne3c","_id":"ck3rfxcm5001id4kpw3up91ji"},{"post_id":"ck3rfxcl5000id4kp4tmkp1ae","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm5001kd4kppl2uxgbr"},{"post_id":"ck3rfxcl5000id4kp4tmkp1ae","category_id":"ck3rfxcm1001dd4kpib7qwip1","_id":"ck3rfxcm6001ld4kp78kupzh8"},{"post_id":"ck3rfxckh0007d4kptz5fypdv","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm6001md4kpw9vkw1d4"},{"post_id":"ck3rfxckh0007d4kptz5fypdv","category_id":"ck3rfxclx0018d4kpptw5ne3c","_id":"ck3rfxcm6001od4kp3zka2ad5"},{"post_id":"ck3rfxclb000kd4kp9pra0pjk","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcm6001rd4kp53352z5r"},{"post_id":"ck3rfxclb000kd4kp9pra0pjk","category_id":"ck3rfxcm5001jd4kp8xnrgqs8","_id":"ck3rfxcm6001sd4kpgio12xlp"},{"post_id":"ck3rfxclb000kd4kp9pra0pjk","category_id":"ck3rfxcm6001pd4kplypmlzzd","_id":"ck3rfxcma001td4kp1l9radw6"},{"post_id":"ck3rfxclh000nd4kpr2250dcj","category_id":"ck3rfxckd0005d4kp9y85rjiv","_id":"ck3rfxcma001ud4kpkv5xrjcf"},{"post_id":"ck3rfxclh000nd4kpr2250dcj","category_id":"ck3rfxcm5001jd4kp8xnrgqs8","_id":"ck3rfxcma001vd4kpixqedr1m"},{"post_id":"ck3rfxclh000nd4kpr2250dcj","category_id":"ck3rfxcm6001qd4kp1ah39np0","_id":"ck3rfxcmb001wd4kpu4yqzhf9"}],"PostTag":[{"post_id":"ck3rfxckm0008d4kpl4883fo7","tag_id":"ck3rfxckh0006d4kp4596l7on","_id":"ck3rfxckt000cd4kpx7vvkwwe"},{"post_id":"ck3rfxcju0002d4kpurvo7p97","tag_id":"ck3rfxckh0006d4kp4596l7on","_id":"ck3rfxcl1000ed4kp9l3m2t5x"},{"post_id":"ck3rfxck80004d4kpp9hskq56","tag_id":"ck3rfxckp000bd4kptqf6ni2e","_id":"ck3rfxclb000jd4kpgvxn4o28"},{"post_id":"ck3rfxckh0007d4kptz5fypdv","tag_id":"ck3rfxcl5000hd4kpoc487r88","_id":"ck3rfxclk000od4kp13r98f8a"},{"post_id":"ck3rfxckp0009d4kpac182d5q","tag_id":"ck3rfxclg000md4kpqlo1wr0a","_id":"ck3rfxcll000rd4kplbhmq519"},{"post_id":"ck3rfxckt000dd4kps5nmum4o","tag_id":"ck3rfxcll000qd4kpeqg5gha6","_id":"ck3rfxclp000wd4kphngzdlag"},{"post_id":"ck3rfxcl1000fd4kpewpce2z0","tag_id":"ck3rfxcl5000hd4kpoc487r88","_id":"ck3rfxclt0011d4kps9m2m3hc"},{"post_id":"ck3rfxcl5000id4kp4tmkp1ae","tag_id":"ck3rfxclt000zd4kpig65j1ei","_id":"ck3rfxclx0016d4kp0ty3p5g7"},{"post_id":"ck3rfxclb000kd4kp9pra0pjk","tag_id":"ck3rfxclx0014d4kpytg9bfp0","_id":"ck3rfxcm1001bd4kpkj0avt4k"},{"post_id":"ck3rfxclh000nd4kpr2250dcj","tag_id":"ck3rfxcm10019d4kpttfbkl3s","_id":"ck3rfxcm1001fd4kpqqmk4t39"}],"Tag":[{"name":"Hexo博客","_id":"ck3rfxckh0006d4kp4596l7on"},{"name":"Git","_id":"ck3rfxckp000bd4kptqf6ni2e"},{"name":"经验总结","_id":"ck3rfxcl5000hd4kpoc487r88"},{"name":"FTP","_id":"ck3rfxclg000md4kpqlo1wr0a"},{"name":"mock.js","_id":"ck3rfxcll000qd4kpeqg5gha6"},{"name":"Django","_id":"ck3rfxclt000zd4kpig65j1ei"},{"name":"SpringCloud, Zuul","_id":"ck3rfxclx0014d4kpytg9bfp0"},{"name":"SpringCloud，ELK","_id":"ck3rfxcm10019d4kpttfbkl3s"}]}}